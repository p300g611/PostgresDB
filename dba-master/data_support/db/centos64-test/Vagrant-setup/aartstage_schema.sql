--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- Name: addglobalsystemadminrole(text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION addglobalsystemadminrole(emailaddress text) RETURNS void
    LANGUAGE plpgsql
    AS $$
	DECLARE 
		userId bigint;
		userOrgId bigint;
	BEGIN
  		SELECT INTO userId (select id from aartuser where email=emailAddress and activeflag is true);
  		userOrgId := (select nextval('usersorganizations_id_seq'::regclass));
		INSERT INTO usersorganizations(id, aartuserid, organizationid, isdefault, createddate, createduser, modifieddate, modifieduser)
			VALUES (userOrgId, userId, (select id from organization where displayidentifier='CETE' limit 1), false, now(), 
			(select id from aartuser where email='cete@ku.edu' and activeflag is true), now(), 
			(select id from aartuser where email='cete@ku.edu' and activeflag is true));
            
		INSERT INTO userorganizationsgroups(groupid, status, userorganizationid, createddate, createduser, modifieddate, modifieduser)
			VALUES ((select id from groups where groupcode='GSAD'), 2, userOrgId, now(), (select id from aartuser where email='cete@ku.edu' and activeflag is true), now(), 
			(select id from aartuser where email='cete@ku.edu' and activeflag is true));
        END;
	$$;


ALTER FUNCTION public.addglobalsystemadminrole(emailaddress text) OWNER TO aart;

--
-- Name: addnewenrollment(character varying, character varying, character varying, character varying, character varying, bigint, date, date, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION addnewenrollment(statestudent_identifier character varying, localstate_stuid character varying, aypsch character varying, attsch character varying, district character varying, schoolyear bigint, schentrydate date, distentrydate date, state_entrydate date, grade character varying, statedisplayidentifier character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
 DECLARE
   state_Id BIGINT;
   ayp_sch_id BIGINT;
   att_sch_id BIGINT;
   dist_id BIGINT;
   ceteSysAdminUserId BIGINT;
   new_EnrlId BIGINT;
   newSchEnrlRecord RECORD;
   grade_id BIGINT;
   student_id BIGINT;
   sch_entry_date timestamp with time zone;
   district_entry_date timestamp with time zone;
   state_entry_date timestamp with time zone;
   error_msg TEXT;

 BEGIN
   error_msg :='';
   sch_entry_date:=((schEntryDate::timestamp) AT TIME ZONE 'CDT');
   district_entry_date:=((distEntryDate::timestamp) AT TIME ZONE 'CDT');
   state_entry_date:=((state_EntryDate::timestamp) AT TIME ZONE 'CDT');
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(org.tree_schooldisplayidentifier)=lower(attSch) or lower(org.tree_schooldisplayidentifier)=lower(aypSch))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(statestudent_identifier,'NULL')||';State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(attSch,'NULL')||';OR AYP School:'||COALESCE(aypSch,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE
	SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
	SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(aypSch)));
	SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(attSch)));
	SELECT INTO dist_id (SELECT districtid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(district)));
	SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
        SELECT INTO grade_id (SELECT id FROM gradecourse gc WHERE contentareaid IS NULL AND assessmentprogramgradesid IS NOT NULL
					AND abbreviatedname = grade AND activeflag is true);
        SELECT INTO student_id (SELECT id FROM student WHERE lower(trim(statestudentidentifier)) = lower(trim(statestudent_identifier)) AND stateid = state_Id AND activeflag is true LIMIT 1);

    IF (student_id IS NULL)

     THEN
	RAISE NOTICE 'Student % is not present in state %', statestudent_identifier, stateDisplayidentifier;
	error_msg = '<error>'||'Student :'|| COALESCE(statestudent_identifier,'NULL') || ';  not present in state:' || COALESCE(stateDisplayidentifier,'NULL');

    ELSE
    IF (grade_id IS NULL)

     THEN
	RAISE NOTICE 'Invalid grade  %', grade;
	error_msg = '<error>'||'Student :'|| COALESCE(statestudent_identifier,'NULL') || '; grade Invalid:' || COALESCE(grade,'NULL');

    ELSE    
      IF((SELECT  count(*) FROM enrollment WHERE studentid = student_id AND currentschoolyear = schoolyear 
		AND aypschoolid = ayp_sch_id and attendanceschoolid = att_sch_id) <= 0)
        THEN
          INSERT INTO enrollment(aypschoolidentifier, residencedistrictidentifier, localstudentidentifier,
		currentgradelevel, currentschoolyear, attendanceschoolid,
		schoolentrydate, districtentrydate, stateentrydate, exitwithdrawaldate,
		exitwithdrawaltype, studentid, restrictionid, createddate, createduser,
		activeflag, modifieddate, modifieduser, aypSchoolId, sourcetype)
	     VALUES (aypSch, district, localState_StuId,
		     grade_id, schoolyear, att_sch_id,
		     sch_entry_date, district_entry_date, state_entry_date, null,
		     0, student_id, 2, now(), ceteSysAdminUserId,
		     true, now(), ceteSysAdminUserId, ayp_sch_id, 'LOCK_DOWN_SCRIPT') RETURNING id INTO new_EnrlId;

	    INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT', new_EnrlId, ceteSysAdminUserId, now(),
		'NEW_ENROLLMENT', ('{"studentId":'|| student_id || ',"stateId":' ||  state_Id
				|| ',"stateStudentIdentifier":"' ||  statestudent_identifier
				|| '","aypSchool":' || ayp_sch_id || ',"attendanceSchoolId":'|| att_sch_id
				|| ',"grade":' || grade_id || ',"schoolEntryDate":"' || schEntryDate ||  '"}')::json);

	RAISE NOTICE 'Student % is enrolled into School % for school year % and grade level %', statestudent_identifier, attSch, schoolyear, grade;
	error_msg = '<success>'||'Student:' || COALESCE(statestudent_identifier,'NULL') || ';  enrolled into School:' || COALESCE(attSch,'NULL') || ';for school year:' || CAST(COALESCE(schoolyear,0) AS TEXT)  || ';and grade level:' || COALESCE(grade,'NULL');

        ELSE
	      FOR newSchEnrlRecord IN (SELECT stu.statestudentidentifier, en.* FROM enrollment en JOIN student stu ON stu.id = en.studentid
	                WHERE stu.id = student_id AND aypschoolid = ayp_sch_id AND attendanceschoolid = att_sch_id
                         AND currentschoolyear = schoolyear LIMIT 1)
             LOOP
		IF(schEntryDate is null) THEN
		     sch_entry_date := newSchEnrlRecord.schoolentrydate;
		ELSE
		     sch_entry_date := sch_entry_date;
		END IF;

                IF(distEntryDate is null) THEN
                    district_entry_date := newSchEnrlRecord.districtentrydate;
                ELSE
                   district_entry_date := district_entry_date;
                END IF;

                IF(state_EntryDate is null) THEN
                   state_entry_date := newSchEnrlRecord.stateentrydate;
                ELSE
                   state_entry_date := state_entry_date;
                END IF;

		UPDATE enrollment SET currentgradelevel= grade_id,activeflag = true, schoolentrydate = sch_entry_date, districtentrydate = district_entry_date, stateentrydate = state_entry_date,exitwithdrawaldate = null,
		          exitwithdrawaltype = 0, modifieduser = ceteSysAdminUserId, modifieddate = now() WHERE id = newSchEnrlRecord.id;

		RAISE NOTICE 'Enrollment % is updated, student % in school year %', newSchEnrlRecord.id, newSchEnrlRecord.statestudentidentifier, schoolyear;

		error_msg = '<success>'|| 'Enrollment:' || CAST(COALESCE(newSchEnrlRecord.id,0) AS TEXT)  || ';  updated for student:' || COALESCE(newSchEnrlRecord.statestudentidentifier,'NULL') || ';in school year:' || CAST(COALESCE(schoolyear,0) AS TEXT) ;

             END LOOP;
        END IF;
        END IF;
      END IF;
      END IF;
RETURN error_msg;
END;
$$;


ALTER FUNCTION public.addnewenrollment(statestudent_identifier character varying, localstate_stuid character varying, aypsch character varying, attsch character varying, district character varying, schoolyear bigint, schentrydate date, distentrydate date, state_entrydate date, grade character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: addon(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION addon(i bigint) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
        BEGIN
		if(i < 1) THEN
			return '';
		else    
			RETURN '.' || (i + 1);
		end if;
        END;
$$;


ALTER FUNCTION public.addon(i bigint) OWNER TO aart;

--
-- Name: addorupdateresponse(bigint, bigint, bigint, bigint, bigint, bigint, bigint, text, numeric); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION addorupdateresponse(in_studentid bigint, in_testid bigint, in_testsectionid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) RETURNS integer
    LANGUAGE plpgsql
    AS $$
  BEGIN
INSERT INTO studentsresponses(studentid, testid, testsectionid, studentstestsid, 
studentstestsectionsid, taskvariantid, foilid, response, score) 
VALUES (in_studentid, in_testid, in_testSectionId, in_studentTestId, in_studentTestSectionId,
in_taskId, in_foilid, in_response, in_score);
RETURN 1;
  EXCEPTION 
    WHEN unique_violation THEN
--RAISE NOTICE unique violation;
UPDATE studentsresponses SET foilid = in_foilid, response = in_response, score = in_score, modifieddate=now()
WHERE studentstestsectionsid = in_studentTestSectionId and taskvariantid = in_taskId;
RETURN 1;
    WHEN OTHERS THEN
RETURN 0;
  END;
$$;


ALTER FUNCTION public.addorupdateresponse(in_studentid bigint, in_testid bigint, in_testsectionid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) OWNER TO aart;

--
-- Name: addorupdateresponseparameters(bigint, bigint, bigint, bigint, numeric, numeric, numeric, numeric, integer); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION addorupdateresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_score numeric, in_avalue numeric, in_bvalue numeric, in_b2value numeric, in_formulacode integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
  BEGIN
INSERT INTO studentsresponseparameters(testid, studentstestsid, studentstestsectionsid, 
taskvariantid, avalue, bvalue, b2value, formulacode, score) 
VALUES (in_testid, in_studentTestId, in_studentTestSectionId, in_taskId, in_avalue, in_bvalue, in_b2value, in_formulacode, in_score);
RETURN 1;
  EXCEPTION 
    WHEN unique_violation THEN
--RAISE NOTICE unique violation;
UPDATE studentsresponseparameters SET avalue = in_avalue, bvalue = in_bvalue, b2value = in_b2value, formulacode = in_formulacode, score = in_score, modifieddate=now() 
WHERE studentstestsectionsid = in_studentTestSectionId and taskvariantid = in_taskId;
RETURN 1;
    WHEN OTHERS THEN
RETURN 0;
  END;
$$;


ALTER FUNCTION public.addorupdateresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_score numeric, in_avalue numeric, in_bvalue numeric, in_b2value numeric, in_formulacode integer) OWNER TO aart;

--
-- Name: addorupdatestudentadaptivetest(bigint, bigint, text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION addorupdatestudentadaptivetest(in_studenttestid bigint, in_nextexternaltestid bigint, in_message text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
  BEGIN
INSERT INTO studentadaptivetest(studentstestsid, nextexternaltestid, message)
VALUES (in_studenttestid, in_nextexternaltestid, in_message);
RETURN 1;
  EXCEPTION 
    WHEN unique_violation THEN
--RAISE NOTICE unique violation;
UPDATE studentadaptivetest SET nextexternaltestid = in_nextexternaltestid, message = in_message, modifieddate=now() WHERE studentstestsid = in_studenttestid;
RETURN 1;
    WHEN OTHERS THEN
RETURN 0;
  END;
$$;


ALTER FUNCTION public.addorupdatestudentadaptivetest(in_studenttestid bigint, in_nextexternaltestid bigint, in_message text) OWNER TO aart;

--
-- Name: addstudenttorosterwithcourse(character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION addstudenttorosterwithcourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   state_Id BIGINT;
   att_sch_id BIGINT;
   ayp_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   subject_Id BIGINT;
   teacher_Id BIGINT;
   rosterRecord RECORD;
   enrollmentRecord RECORD;
   enrlRecords RECORD;
   course_Id BIGINT;
   enrl_Id BIGINT;
   error_msg TEXT;

 BEGIN
   error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(state_student_identifier,'NULL')||';State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE 
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);

   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
   SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(trim(abbreviatedname))  = lower(trim(subject_abbrName)) AND activeflag is true LIMIT 1);
   SELECT INTO teacher_Id (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid = att_sch_id AND case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(teacher_uniqueCommonId)) LIMIT 1);
   SELECT INTO course_Id (SELECT id FROM gradecourse WHERE lower(trim(abbreviatedname)) = lower(trim(course_Abbrname)) AND course is true AND activeflag is true LIMIT 1);
  error_msg ='';
        IF(subject_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', subject_abbrName;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(subject_abbrName,'NULL');

     ELSE
        IF(course_Id is null) THEN

         RAISE NOTICE 'course_Id % is invalid', course_Abbrname;

         error_msg := '<error>' || 'invalid value on course_abbrName:' || COALESCE(course_Abbrname,'NULL');

     ELSE 

   IF((SELECT count(*) FROM roster r WHERE lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id AND r.statecoursesid = course_Id
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id AND r.activeflag is true)) <= 0 THEN

     RAISE NOTICE 'No rosters found for student:%, with roster name: %, subject: %, course: %, attendanceschool: %, teacher: %, and school year: %  ', state_student_identifier,roster_name, subject_abbrName, course_Abbrname, att_sch_displayidentifier,
          teacher_uniqueCommonId, schoolyear;
     error_msg := '<error>'||'No rosters found for studentid:'||COALESCE(state_student_identifier,'NULL')||';with roster name:'||COALESCE(roster_name,'NULL')||';subject:'||COALESCE(subject_abbrName,'NULL')||';course:'||COALESCE(course_Abbrname,'NULL')||';attendanceschool:'||COALESCE(att_sch_displayidentifier,'NULL')||';teacher:'||COALESCE(teacher_uniqueCommonId,'NULL')||';and school year:'||CAST(COALESCE(schoolyear,0) AS TEXT);

   ELSE
    IF((SELECT count(en.*) FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear AND en.attendanceschoolid = att_sch_id
           AND trim(stu.statestudentidentifier) = trim(state_student_identifier) AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true) <= 0 ) THEN

        RAISE NOTICE 'Studentid % not found with attendance %  in school year %', state_student_identifier, att_sch_displayidentifier, schoolyear;
        error_msg := '<error>'||'Studentid:'||COALESCE(state_student_identifier,'NULL')||'; not found attendance:'||COALESCE(att_sch_displayidentifier,'NULL')||';in school year:'||CAST(COALESCE(schoolyear,0) AS TEXT);
    ELSE
         FOR enrollmentRecord IN(SELECT en.* FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear AND en.attendanceschoolid = att_sch_id
           AND trim(stu.statestudentidentifier) = trim(state_student_identifier) AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true)
       LOOP
         FOR rosterRecord IN(SELECT r.* FROM roster r WHERE  r.activeflag is true AND lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id AND r.statecoursesid = course_Id
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id)
        LOOP
           IF((SELECT count(*) FROM enrollmentsrosters WHERE  enrollmentid = enrollmentRecord.id AND rosterid = rosterRecord.id) <= 0) THEN

INSERT INTO enrollmentsrosters(enrollmentid, rosterid, createddate, createduser, activeflag, modifieddate, modifieduser)
                         VALUES (enrollmentRecord.id, rosterRecord.id, now(), ceteSysAdminUserId, true, now(), ceteSysAdminUserId) RETURNING id INTO enrl_Id;

                INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', enrl_Id, ceteSysAdminUserId, now(),
     'ADD_STUDNET_TO_ROSTER', ('{"rosterId":' || rosterRecord.id || ', "enrollmentId":' ||  enrollmentRecord.id || ',"enrollmentRosterId":' || enrl_Id || '}')::json);

RAISE NOTICE 'Studentid % added to the roster %', state_student_identifier, roster_name;
    error_msg := '<success>'||'Studentid:'||COALESCE(state_student_identifier,'NULL')||';  added to the roster:'||COALESCE(roster_name,'NULL');

                 PERFORM moveCompletedTestsAndResetSTWithCourse(student_id := enrollmentRecord.studentid,enrollment_id := enrollmentRecord.id, subjectArea_id := subject_Id,
                         course_Id := course_Id, new_roster_id := rosterRecord.id, school_year := schoolyear, attendance_schId := att_sch_id);

  ELSE
     FOR enrlRecords IN (SELECT * FROM enrollmentsrosters WHERE enrollmentid = enrollmentRecord.id AND rosterid = rosterRecord.id LIMIT 1)
       LOOP
                  UPDATE enrollmentsrosters SET activeflag = true, modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = enrlRecords.id;

         INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', enrlRecords.id, ceteSysAdminUserId, now(),
     'ADD_STUDNET_TO_ROSTER', ('{"rosterId":' || enrlRecords.rosterid || ', "enrollmentId":' ||  enrlRecords.enrollmentid || ',"enrollmentRosterId":' || enrlRecords.id || '}')::json);

 RAISE NOTICE 'Studentid % added to the roster %', state_student_identifier, roster_name;
 error_msg := '<success>'||'Studentid:'||COALESCE(state_student_identifier,'NULL')||';  added to the roster:'||COALESCE(roster_name,'NULL');


 PERFORM moveCompletedTestsAndResetSTWithCourse(student_id := enrollmentRecord.studentid,enrollment_id := enrollmentRecord.id, subjectArea_id := subject_Id,
            course_Id := course_Id, new_roster_id := enrlRecords.rosterid, school_year := schoolyear, attendance_schId := att_sch_id);

     END LOOP;
  END IF;
        END LOOP;
     END LOOP;
     END IF;
   END IF;
   END IF;
   END IF;
   END IF;
RETURN error_msg;
END;
$$;


ALTER FUNCTION public.addstudenttorosterwithcourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: addstudenttorosterwithnocourse(character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION addstudenttorosterwithnocourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   state_Id BIGINT;
   att_sch_id BIGINT;
   ayp_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   subject_Id BIGINT;
   teacher_Id BIGINT;
   rosterRecord RECORD;
   enrollmentRecord RECORD;
   enrlRecords RECORD;
   enrl_Id BIGINT;
   error_msg TEXT;

 BEGIN
   error_msg :='';
   
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1 
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(state_student_identifier,'NULL')||';State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE  
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true); 
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
   SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin' and activeflag is true);
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(trim(abbreviatedname))  = lower(trim(subject_abbrName)) AND activeflag is true LIMIT 1);
   SELECT INTO teacher_Id (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE uso.organizationid = att_sch_id AND au.activeflag is true AND  case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(teacher_uniqueCommonId)) LIMIT 1);
   IF(subject_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', subject_abbrName;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(subject_abbrName,'NULL');

     ELSE
   IF((SELECT count(*) FROM roster r WHERE   r.activeflag is true AND lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id) ) <= 0 THEN

     RAISE NOTICE 'No rosters found with roster name: %, subject: %, attendanceschool: %, teacher: %, and school year: %  ', roster_name, subject_abbrName, att_sch_displayidentifier,
          teacher_uniqueCommonId, schoolyear;
     error_msg := '<error>'||'No rosters found for studentid:'||COALESCE(state_student_identifier,'NULL')||';with roster name:'||COALESCE(roster_name,'NULL')||';subject:'||COALESCE(subject_abbrName,'NULL')||';attendanceschool:'||COALESCE(att_sch_displayidentifier,'NULL')||';teacher:'||COALESCE(teacher_uniqueCommonId,'NULL')||';and school year:'||CAST(COALESCE(schoolyear,0) AS TEXT);
   ELSE
    IF((SELECT count(en.*) FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear AND en.attendanceschoolid = att_sch_id
           AND trim(stu.statestudentidentifier) = trim(state_student_identifier) AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true) <= 0 ) THEN

        RAISE NOTICE 'Student % is not found with attendance %  in school year %', state_student_identifier, att_sch_displayidentifier, schoolyear;
        error_msg := '<error>'||'Studentid:'||COALESCE(state_student_identifier,'NULL')||'; not found attendance:'||COALESCE(att_sch_displayidentifier,'NULL')||';in school year:'||CAST(COALESCE(schoolyear,0) AS TEXT);
    ELSE
         FOR enrollmentRecord IN(SELECT en.* FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear  AND en.attendanceschoolid = att_sch_id
           AND trim(stu.statestudentidentifier) = trim(state_student_identifier) AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true)
       LOOP
         FOR rosterRecord IN(SELECT r.* FROM roster r WHERE lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND r.attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id AND r.activeflag is true)
        LOOP
           IF((SELECT count(*) FROM enrollmentsrosters WHERE enrollmentid = enrollmentRecord.id AND rosterid = rosterRecord.id) <= 0) THEN

  	INSERT INTO enrollmentsrosters(enrollmentid, rosterid, createddate, createduser, activeflag, modifieddate, modifieduser)
                         VALUES (enrollmentRecord.id, rosterRecord.id, now(), ceteSysAdminUserId, true, now(), ceteSysAdminUserId) RETURNING id INTO enrl_Id;

                INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', enrl_Id, ceteSysAdminUserId, now(),
		      'ADD_STUDNET_TO_ROSTER', ('{"rosterId":' || rosterRecord.id || ', "enrollmentId":' ||  enrollmentRecord.id || ',"enrollmentRosterId":' || enrl_Id || '}')::json);

		RAISE NOTICE 'Student % is added to the roster %', state_student_identifier, roster_name;
    error_msg := '<success>'||'Studentid:'||COALESCE(state_student_identifier,'NULL')||'; added to the roster:'||COALESCE(roster_name,'NULL');

		 PERFORM moveCompletedTestsAndResetSTWithNoCourse(student_id := enrollmentRecord.studentid, enrollment_id := enrollmentRecord.id, subjectArea_id := subject_Id, new_roster_id := rosterRecord.id, school_year:=schoolyear, attendance_schId := att_sch_id);
	   ELSE
	      FOR enrlRecords IN (SELECT * FROM enrollmentsrosters WHERE enrollmentid = enrollmentRecord.id AND rosterid = rosterRecord.id LIMIT 1)
	        LOOP
                  UPDATE enrollmentsrosters SET activeflag = true, modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = enrlRecords.id;

	          INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', enrlRecords.id, ceteSysAdminUserId, now(),
		      'ADD_STUDNET_TO_ROSTER', ('{"rosterId":' || enrlRecords.rosterid || ', "enrollmentId":' ||  enrlRecords.enrollmentid || ',"enrollmentRosterId":' || enrlRecords.id || '}')::json);

		  RAISE NOTICE 'Student % is added to the roster %', state_student_identifier, roster_name;
      error_msg = '<success>'||'Studentid:'||COALESCE(state_student_identifier,'NULL')||';  added to the roster '||COALESCE(roster_name,'NULL');
                  PERFORM moveCompletedTestsAndResetSTWithNoCourse(student_id := enrollmentRecord.studentid, enrollment_id := enrollmentRecord.id, subjectArea_id := subject_Id, new_roster_id := enrlRecords.rosterid, school_year:=schoolyear, attendance_schId := att_sch_id);

	      END LOOP;
	 END IF;
        END LOOP;
     END LOOP;
     END IF;
   END IF; 
END IF;
END IF;
RETURN error_msg;
END;
$$;


ALTER FUNCTION public.addstudenttorosterwithnocourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: calculate_avg_linkage_level(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION calculate_avg_linkage_level(publishedtestid bigint) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ 

DECLARE 

	section_id bigint;
	linkage_value real;
	total real = 0;
	num_of_tasks real;
	avg_linkage real = -1;
	assessment_program text[];
	assessment_program_name text;
	content_area text;
	sections_avg real array;
	section_counter integer = 0;
	section_avg real;
	BEGIN
		RAISE INFO 'BEGIN CALCULATE AVERAGE LINKAGE LEVEL';
		assessment_program = array(select abbreviatedname from assessmentprogram where id in (select assessmentprogramid from testingprogram where id in (
							select testingprogramid from assessment where id in (
							select assessmentid from assessmentstestcollections where testcollectionid in (select testcollectionid from testcollectionstests where testid=publishedtestid)))));
		
		content_area = (select abbreviatedname from contentarea where id = (select contentareaid from test where id = publishedtestid));
							
		RAISE INFO 'CHECK ASSESSMENT PROGRAM NAME: %, TEST ID: %',  assessment_program, publishedtestid;
		
		FOREACH assessment_program_name IN ARRAY assessment_program
				LOOP
					IF ('DLM' = assessment_program_name AND ('M' = content_area OR 'ELA' = content_area OR 'Sci' = content_area)) then
						
						FOR section_id in select id from testsection where testid = publishedtestid
		
						LOOP
		
							num_of_tasks = (select count(id) from essentialelementlinkagetranslationvalues where categoryid in (
									select essentialelementlinkageid from taskvariantessentialelementlinkage where taskvariantid in (
									select taskvariantid from testsectionstaskvariants where testsectionid = section_id)));
		
							RAISE INFO 'NUMBER OF TASKS: %, TEST SECTION ID: %',   num_of_tasks, section_id;
		
							CONTINUE WHEN num_of_tasks = 0;
		
							FOR linkage_value IN select translationvalue from essentialelementlinkagetranslationvalues where categoryid in (
									select essentialelementlinkageid from taskvariantessentialelementlinkage where taskvariantid in (
									select taskvariantid from testsectionstaskvariants where testsectionid = section_id))
							LOOP
									total = total + linkage_value;
		
							END LOOP;
		
							RAISE INFO 'TOTAL LINKAGE: %, TEST SECTION ID: %',   total, section_id;
		
							sections_avg[section_counter] = total/num_of_tasks;
		
							RAISE INFO 'SECTION AVG: %, TEST SECTION ID: %',   sections_avg[section_counter], section_id;
		
							total = 0;
		
							section_counter = section_counter + 1;
		
						END LOOP;
		
						total = 0;
						IF (sections_avg IS NOT NULL) THEN
							FOREACH section_avg in array sections_avg
								LOOP
									total = total + section_avg;
			
								END LOOP;
			
							RAISE INFO 'TOTAL LINKAGE ALL SECTIONS: %, NUMBER OF SECTIONS: %', total, section_counter;
			
							avg_linkage = total/section_counter;
			
							RAISE INFO 'AVG LINKAGE LEVEL: %, TEST ID: %',   avg_linkage, publishedtestid;

							UPDATE test SET avglinkagelevel = avg_linkage
								WHERE id = publishedtestid; 
						END IF;
					END IF;
			END LOOP;
			
			RAISE INFO 'END CALCULATE AVERAGE LINKAGE LEVEL';
		RETURN cast(avg_linkage as numeric);
 END;
$$;


ALTER FUNCTION public.calculate_avg_linkage_level(publishedtestid bigint) OWNER TO aart;

--
-- Name: calculate_max_score(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION calculate_max_score(publishedtestid bigint) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ 

DECLARE 
        TVROW RECORD;
	max_score integer = 0;
	
	BEGIN
		RAISE INFO 'BEGIN CALCULATE MAX SCORE';

		FOR TVROW IN (select tv.id, tv.maxscore 
				from testsection ts
				inner join testsectionstaskvariants tstv on tstv.testsectionid = ts.id 
				inner join taskvariant tv on (tstv.taskvariantid = tv.id and tv.scoringneeded IS true)
				where ts.testid = publishedtestid ) LOOP
				
			--RAISE NOTICE  '%,%', TVROW.id, TVROW.maxscore;                                       
			max_score = max_score + TVROW.maxscore;
			--RAISE NOTICE  'Current MAX Score %', max_score;
		    END LOOP;

		RAISE NOTICE  'Total MAX Score %', max_score;
		RETURN cast(max_score as numeric);
 END;

$$;


ALTER FUNCTION public.calculate_max_score(publishedtestid bigint) OWNER TO aart;

--
-- Name: calculaterecommendedcomplexityband(bigint, bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION calculaterecommendedcomplexityband(studenttestsid bigint, stbandid bigint, incontentareaid bigint, schoolyear bigint) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE 
    recommendedBandId   BIGINT :=0;
    finalRecordLevel          BIGINT :=0;
    stestsid                            BIGINT :=0;
    totalScore                       decimal :=0;
    totalMaxScore              decimal :=0;
    proportion                      decimal :=0;
    lowProp                           decimal :=0;
    highProp                          decimal :=0;
    recLevels                         BIGINT :=10;
    count                INTEGER;
    currentLinkageLevelCode VARCHAR;
    STUDENTRESPONSES_ROW RECORD;
    STUDENTRESPONSESBYEE_ROW RECORD;
    STUDENTRESPONSEEE_ROW RECORD;
    STUDENT_ROW RECORD;
    minMaxBandIds RECORD;
    recommended_bands_EE  BIGINT ARRAY;
    sorted_recommended_bands_EE  BIGINT ARRAY;      
BEGIN
                --RAISE INFO '-Enter-';  
                
                currentLinkageLevelCode:=(select c.categorycode from complexityband cb
                inner join essentialelementlinkagetranslationvalues eel on cb.bandcode = CAST( eel.translationvalue AS text )
                inner join category c on eel.categoryid=c.id
                where cb.id=stbandid);
 
                --RAISE NOTICE 'currentLinkageLevelCode %',currentLinkageLevelCode;
               
                finalRecordLevel:=(select id from complexityband where id=stbandid);
 
                --RAISE NOTICE 'finalRecordLevel %',finalRecordLevel;
                               
                --RAISE NOTICE 'studenttestsid %',studenttestsid;
               
                IF studenttestsid IS NOT NULL THEN
                                select distinct  r.statesubjectareaid as contentareaid, ca.abbreviatedname as contentareacode, e.currentgradelevel as gradecourseid , gc.abbreviatedname as gradecode,  r.statecoursesid as courseid, r.statecoursecode as courseCode into STUDENT_ROW
                                                from studentstests sts
                                                inner join enrollment e on sts.studentid=e.studentid
                                                inner join enrollmentsrosters er on er.enrollmentid=e.id
                                                inner join roster r on er.rosterid=r.id
                                                inner join gradecourse gc on gc.id=e.currentgradelevel
                                                inner join contentarea ca on ca.id = r.statesubjectareaid
                                where
                                                er.activeflag is true and sts.activeflag is true
                                                and e.activeflag is true 
                                                and r.activeflag is true
                                                and e.currentschoolyear=schoolyear
                                                and (e.exitwithdrawaldate is null or (e.exitwithdrawaldate < e.schoolentrydate))
                                                and (r.statesubjectareaid=incontentareaid and r.currentschoolyear=schoolyear)
                                                and sts.id=studenttestsid;
 
                                --RAISE NOTICE 'contentareaid : %',STUDENT_ROW.contentareaid;
                                --RAISE NOTICE 'contentareacode : %',STUDENT_ROW.contentareacode;
                                --RAISE NOTICE 'gradecourseid : %',STUDENT_ROW.gradecourseid;
                                --RAISE NOTICE 'gradecode : %',STUDENT_ROW.gradecode;
                                --RAISE NOTICE 'courseid : %',STUDENT_ROW.courseid;
                                --RAISE NOTICE 'courseCode : %',STUDENT_ROW.courseCode;
                                --RAISE NOTICE 'contentareaid : %',STUDENT_ROW.contentareaid;
 
                                IF STUDENT_ROW.contentareacode = 'Sci'  THEN
                                                select min(id) as minband, max(id) as maxband into minMaxBandIds from complexityband where contentareaid = STUDENT_ROW.contentareaid;
                                ELSE
                                                select min(id) as minband, max(id) as maxband into minMaxBandIds from complexityband where contentareaid is null;
                                END IF;
                                   
                                FOR STUDENTRESPONSES_ROW IN
                                                select distinct st.studentid, st.testid , cfd.contentcode as essentialelement, sum(sr.score) as srscore, sum(tv.maxscore) as maxscore
                                                from studentstests st
                                                inner join testsection ts on ts.testid=st.testid
                                                inner join testsectionstaskvariants tstv on tstv.testsectionid=ts.id
                                                inner join taskvariant tv on tstv.taskvariantid = tv.id
                                                inner join taskvariantcontentframeworkdetail tvcf on tv.id = tvcf.taskvariantid
                                                inner join contentframeworkdetail cfd on tvcf.contentframeworkdetailid = cfd.id
                                                left join studentsresponses sr on sr.studentstestsid=st.id and sr.taskvariantid = tv.id and sr.activeflag is true
                                                where cfd.activeflag is true and tvcf.isprimary is true
                                                and st.id=studenttestsid
                                                group by st.studentid, st.testid, cfd.contentcode
                                LOOP
                                               
                                                --RAISE NOTICE 'essentialelement : %',STUDENTRESPONSES_ROW.essentialelement;
 
                                                --RAISE NOTICE 'STUDENTRESPONSES_ROW.srscore %',STUDENTRESPONSES_ROW.srscore;
                                                IF STUDENTRESPONSES_ROW.srscore IS NOT NULL THEN
                                                                totalScore:=STUDENTRESPONSES_ROW.srscore;
                                                END IF;
                                                --RAISE NOTICE 'STUDENTRESPONSES_ROW.maxscore %',STUDENTRESPONSES_ROW.maxscore;
                                                IF STUDENTRESPONSES_ROW.maxscore IS NOT NULL THEN
                                                                totalMaxScore:=STUDENTRESPONSES_ROW.maxscore;
                                                END IF;
                               
                                                --RAISE NOTICE 'totalScore %',totalScore;
                                                --RAISE NOTICE 'totalMaxScore %',totalMaxScore;
                               
                                                IF totalMaxScore>0 THEN
                                                                proportion:=totalScore/totalMaxScore;
                                                END IF;
                                               
                                                IF STUDENTRESPONSES_ROW.essentialelement IS NOT NULL THEN
                                                                                select distinct proportionlow,proportionhigh into lowProp,highProp from proportionmetrics
                                                                                where activeflag is true and essentialelement=STUDENTRESPONSES_ROW.essentialelement and linkagelevelabbr=currentLinkageLevelCode
                                                                                and gradebandid in (select gradebandid from gradebandgradecourse gbgc inner join gradecourse gc on gbgc.gradecourseid=gc.id
                                                                                where gc.abbreviatedname = (select abbreviatedname from gradecourse where id=STUDENT_ROW.gradecourseid)) limit 1;
                                                                               
                                                                                IF lowProp IS NULL THEN
                                                                                                select distinct proportionlow,proportionhigh into lowProp,highProp from proportionmetrics
                                                                                                where activeflag is true and essentialelement=STUDENTRESPONSES_ROW.essentialelement and linkagelevelabbr=currentLinkageLevelCode
                                                                                                and gradecourseid in (select id from gradecourse gc where gc.abbreviatedname = (select abbreviatedname from gradecourse where id=STUDENT_ROW.gradecourseid)) limit 1;
                                                                                END IF;
 
                                                                               -- RAISE NOTICE 'highProp %',highProp;
                                                                                --RAISE NOTICE 'lowProp %',lowProp;
                                                                                --RAISE NOTICE 'proportion %',proportion;
                                                                                CASE WHEN highProp IS NOT NULL AND proportion > highProp THEN
                                                                                                               -- RAISE NOTICE 'LEAST(minMaxBandIds.maxband, finalRecordLevel + 1) :  %',LEAST(minMaxBandIds.maxband, finalRecordLevel + 1);
                                                                                                                --RAISE NOTICE 'minMaxBandIds.maxband : %', minMaxBandIds.maxband;
                                                                                                               -- RAISE NOTICE 'finalRecordLevel : %', finalRecordLevel;
                                                                                                                recommended_bands_EE = array_append(recommended_bands_EE, LEAST(minMaxBandIds.maxband, finalRecordLevel + 1));
                                                                                                WHEN lowProp IS NOT NULL AND proportion < lowProp THEN
                                                                                                                --RAISE NOTICE 'GREATEST(minMaxBandIds.minband, finalRecordLevel - 1) :  %',GREATEST(minMaxBandIds.minband, finalRecordLevel - 1);
                                                                                                                recommended_bands_EE = array_append(recommended_bands_EE, GREATEST(minMaxBandIds.minband, finalRecordLevel - 1));
                                                                                                ELSE
                                                                                                                --RAISE NOTICE 'finalRecordLevel :  %',finalRecordLevel;
                                                                                                                recommended_bands_EE= array_append(recommended_bands_EE, finalRecordLevel);
                                                                                END CASE;
                                                                               -- RAISE NOTICE 'recommended_bands_EE %',recommended_bands_EE;
                                                END IF;
               
                                END LOOP;
                                --RAISE NOTICE 'Sorted  recommended_bands_EE : %', ARRAY(SELECT unnest(recommended_bands_EE) ORDER BY 1);
                                --SELECT ARRAY(SELECT unnest(recommended_bands_EE) ORDER BY 1) into sorted_recommended_bands_EE;
                                recommendedBandId = (SELECT unnest(recommended_bands_EE) ORDER BY 1 limit 1);
                               
--RAISE NOTICE 'recommendedBandId %', recommendedBandId;
               
                END IF;
               
--RAISE NOTICE '-Exit - ';  
RETURN recommendedBandId; 
EXCEPTION
            WHEN undefined_object THEN
            --RAISE NOTICE 'caught exception %', ststudentid;
            RETURN recommendedBandId;
END
$$;


ALTER FUNCTION public.calculaterecommendedcomplexityband(studenttestsid bigint, stbandid bigint, incontentareaid bigint, schoolyear bigint) OWNER TO aart;

--
-- Name: changeeductorandrosternameonrosterwithcourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION changeeductorandrosternameonrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
   DECLARE
   state_Id BIGINT;
   att_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   subject_Id BIGINT;
   old_teacherId BIGINT;
   new_teacherId BIGINT;
   rosterRecord RECORD;
   course_Id BIGINT;
   
 BEGIN
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(displayidentifier) = lower(stateDisplayidentifier));   
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(att_sch_displayidentifier));   
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');   
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(abbreviatedname)  = lower(subject_abbrName) LIMIT 1);
   SELECT INTO old_teacherId (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE uso.organizationid = att_sch_id AND lower(uniquecommonidentifier) = lower(old_teacher_uniqueCommonId) LIMIT 1); 
   SELECT INTO new_teacherId (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE uso.organizationid = att_sch_id AND lower(uniquecommonidentifier) = lower(new_teacher_uniqueCommonId) LIMIT 1); 
   SELECT INTO course_Id (SELECT id FROM gradecourse WHERE lower(abbreviatedname) = lower(course_Abbrname) AND course is true LIMIT 1);
   
   IF((SELECT count(*) FROM roster r WHERE lower(r.coursesectionname) = lower(old_roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id AND r.statecoursesid = course_Id
                          AND currentschoolyear = schoolyear AND teacherid = old_teacherId)) <= 0 THEN

     RAISE NOTICE 'No rosters found with roster name: %, subject: %, course: %, attendanceschool: %, teacher: %, and school year: %  ', old_roster_name, subject_abbrName, course_Abbrname, att_sch_displayidentifier,
           old_teacher_uniqueCommonId, schoolyear;

   ELSE
   FOR rosterRecord IN (SELECT r.* FROM roster r WHERE lower(r.coursesectionname) = lower(old_roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id AND r.statecoursesid = course_Id
                          AND currentschoolyear = schoolyear AND teacherid = old_teacherId)
     LOOP

UPDATE roster set coursesectionname= new_roster_name, teacherid = new_teacherId, modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId 
            WHERE id = rosterRecord.id;

INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ROSTER', rosterRecord.id, ceteSysAdminUserId, now(),
'TEACHER_CHANGE', ('{"rosterId":' ||  rosterRecord.id || ',"oldEducatorId":' ||  old_teacherId || ',"newEducatorId":'  || new_teacherId || '}')::json);

RAISE NOTICE 'Roster with id %, changed the educator % from to new educator %', rosterRecord.id, old_teacher_uniqueCommonId, new_teacher_uniqueCommonId;

     END LOOP;
   END IF;
END;
$$;


ALTER FUNCTION public.changeeductorandrosternameonrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: changeeductorandrosternameonrosterwithnocourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION changeeductorandrosternameonrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
   DECLARE
   state_Id BIGINT;
   att_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   subject_Id BIGINT;
   old_teacherId BIGINT;
   new_teacherId BIGINT;
   rosterRecord RECORD;
   
 BEGIN
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(displayidentifier) = lower(stateDisplayidentifier));   
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(att_sch_displayidentifier));   
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');   
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(abbreviatedname)  = lower(subject_abbrName) LIMIT 1);
   SELECT INTO old_teacherId (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE uso.organizationid = att_sch_id AND lower(uniquecommonidentifier) = lower(old_teacher_uniqueCommonId) LIMIT 1); 
   SELECT INTO new_teacherId (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE uso.organizationid = att_sch_id AND lower(uniquecommonidentifier) = lower(new_teacher_uniqueCommonId) LIMIT 1); 
   
   IF((SELECT count(*) FROM roster r WHERE lower(r.coursesectionname) = lower(old_roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                          AND currentschoolyear = schoolyear AND teacherid = old_teacherId)) <= 0 THEN

     RAISE NOTICE 'No rosters found with roster name: %, subject: %, attendanceschool: %, teacher: %, and school year: %  ', old_roster_name, subject_abbrName, att_sch_displayidentifier,
           old_teacher_uniqueCommonId, schoolyear;

   ELSE
   FOR rosterRecord IN (SELECT r.* FROM roster r WHERE lower(r.coursesectionname) = lower(old_roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                          AND currentschoolyear = schoolyear AND teacherid = old_teacherId)
     LOOP

UPDATE roster set coursesectionname= new_roster_name, teacherid = new_teacherId, modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId 
            WHERE id = rosterRecord.id;

INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ROSTER', rosterRecord.id, ceteSysAdminUserId, now(),
'TEACHER_CHANGE', ('{"rosterId":' ||  rosterRecord.id || ',"oldEducatorId":' ||  old_teacherId || ',"newEducatorId":'  || new_teacherId || '}')::json);            

RAISE NOTICE 'Roster with id %, changed the educator % from to new educator %', rosterRecord.id, old_teacher_uniqueCommonId, new_teacher_uniqueCommonId;

     END LOOP;
   END IF;
END;
$$;


ALTER FUNCTION public.changeeductorandrosternameonrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: changeeductoronrosterwithcourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION changeeductoronrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
           DECLARE
           state_Id BIGINT;
           att_sch_id BIGINT;
           ceteSysAdminUserId BIGINT;
           contentArea_Id BIGINT;
           subject_Id BIGINT;
           old_teacherId BIGINT;
           new_teacherId BIGINT;
           rosterRecord RECORD;
           course_Id BIGINT;
           error_msg TEXT;

         BEGIN
            error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||' State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE
           SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
           SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
           SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
           SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(trim(abbreviatedname))  = lower(trim(subject_abbrName)) AND activeflag is true  LIMIT 1);
           SELECT INTO old_teacherId (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid  = att_sch_id AND case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(old_teacher_uniqueCommonId)) LIMIT 1);
           SELECT INTO new_teacherId (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid  = att_sch_id AND case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(new_teacher_uniqueCommonId)) LIMIT 1);
           SELECT INTO course_Id (SELECT id FROM gradecourse WHERE lower(trim(abbreviatedname)) = lower(trim(course_Abbrname)) AND activeflag is true  and course is true LIMIT 1);
         IF(subject_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', subject_abbrName;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(subject_abbrName,'NULL');

     ELSE
              IF(course_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', course_Abbrname;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(course_Abbrname,'NULL');

     ELSE
     IF(new_teacherId is null) THEN

         RAISE NOTICE 'NEW Teacher % is not found in the organization %', new_teacher_uniqueCommonId, att_sch_displayidentifier;

         error_msg := '<error>' || 'NEW Teacher:' || COALESCE(new_teacher_uniqueCommonId,'NULL')|| ';  not found in the organization:' || COALESCE(att_sch_displayidentifier,'NULL');

     ELSE
           IF((SELECT count(*) FROM roster r WHERE r.activeflag is true AND  lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id AND r.statecoursesid = course_Id
                                  AND currentschoolyear = schoolyear AND teacherid = old_teacherId)) <= 0 THEN

             RAISE NOTICE 'No rosters found with roster name: %, subject: %, course: %, attendanceschool: %, teacher: %, and school year: %  ', roster_name, subject_abbrName, course_Abbrname, att_sch_displayidentifier,
                   old_teacher_uniqueCommonId, schoolyear;

             error_msg := '<error>' || 'No rosters found with roster name:' || COALESCE(roster_name,'NULL') || ';subject:' || COALESCE(subject_abbrName,'NULL') || ';course:' || COALESCE(course_Abbrname,'NULL') || ';attendanceschool:' || COALESCE(att_sch_displayidentifier,'NULL')  ||';teacher:' || COALESCE(old_teacher_uniqueCommonId,'NULL')  ||';and school year:' || CAST(COALESCE(schoolyear,0) AS TEXT);

           ELSE
           FOR rosterRecord IN (SELECT r.* FROM roster r WHERE r.activeflag is true AND  lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id AND r.statecoursesid = course_Id
                                  AND currentschoolyear = schoolyear AND teacherid = old_teacherId)
             LOOP

          UPDATE roster set teacherid = new_teacherId, modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId
                      WHERE id = rosterRecord.id;

          INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ROSTER', rosterRecord.id, ceteSysAdminUserId, now(),
            'TEACHER_CHANGE', ('{"rosterId":' ||  rosterRecord.id || ',"oldEducatorId":' ||  old_teacherId || ',"newEducatorId":'  || new_teacherId || '}')::json);

          RAISE NOTICE 'Roster with id %, changed the educator % from to new educator %', rosterRecord.id, old_teacher_uniqueCommonId, new_teacher_uniqueCommonId;

          error_msg := '<success>' || 'Roster with id :'|| CAST(COALESCE(rosterRecord.id,0) AS TEXT)  || ';changed the educator from:' || COALESCE(old_teacher_uniqueCommonId,'NULL') || ';to new educator :' || COALESCE(new_teacher_uniqueCommonId,'NULL');

             END LOOP;
           END IF;
           END IF;
           END IF;
           END IF;
           END IF;
        RETURN error_msg;
        END;
        $$;


ALTER FUNCTION public.changeeductoronrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: changeeductoronrosterwithnocourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION changeeductoronrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
           DECLARE
           state_Id BIGINT;
           att_sch_id BIGINT;
           ceteSysAdminUserId BIGINT;
           contentArea_Id BIGINT;
           subject_Id BIGINT;
           old_teacherId BIGINT;
           new_teacherId BIGINT;
           rosterRecord RECORD;
           error_msg TEXT;

         BEGIN
   error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||' State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE         
           SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
           SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
           SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
           SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(trim(abbreviatedname))  = lower(trim(subject_abbrName)) AND activeflag is true  LIMIT 1);
           SELECT INTO old_teacherId (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid  = att_sch_id AND case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(old_teacher_uniqueCommonId)) LIMIT 1);
           SELECT INTO new_teacherId (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid  = att_sch_id AND case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(new_teacher_uniqueCommonId)) LIMIT 1);
             IF(subject_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', subject_abbrName;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(subject_abbrName,'NULL');

     ELSE
     IF(new_teacherId is null) THEN

         RAISE NOTICE 'NEW Teacher % is not found in the organization %', new_teacher_uniqueCommonId, att_sch_displayidentifier;

         error_msg := '<error>' || 'NEW Teacher:' || COALESCE(new_teacher_uniqueCommonId,'NULL')|| ';  not found in the organization:' || COALESCE(att_sch_displayidentifier,'NULL');

     ELSE
           IF((SELECT count(*) FROM roster r WHERE r.activeflag is true AND  lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                                  AND currentschoolyear = schoolyear AND teacherid = old_teacherId)) <= 0 THEN

             RAISE NOTICE 'No rosters found with roster name: %, subject: %, attendanceschool: %, teacher: %, and school year: %  ', roster_name, subject_abbrName, att_sch_displayidentifier,
                   old_teacher_uniqueCommonId, schoolyear;

             error_msg := '<error>' || 'No rosters found with roster name:' || COALESCE(roster_name,'NULL') || ';subject:' || COALESCE(subject_abbrName,'NULL') || ';attendanceschool:' || COALESCE(att_sch_displayidentifier,'NULL')||';teacher:' || COALESCE(old_teacher_uniqueCommonId,'NULL') || ';and school year:' || CAST(COALESCE(schoolyear,0) AS TEXT);

           ELSE
           FOR rosterRecord IN (SELECT r.* FROM roster r WHERE r.activeflag is true AND lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                                  AND currentschoolyear = schoolyear AND teacherid = old_teacherId)
             LOOP

          UPDATE roster set teacherid = new_teacherId, modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId
                      WHERE id = rosterRecord.id;

                INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ROSTER', rosterRecord.id, ceteSysAdminUserId, now(),
            'TEACHER_CHANGE', ('{"rosterId":' ||  rosterRecord.id || ',"oldEducatorId":' ||  old_teacherId || ',"newEducatorId":'  || new_teacherId || '}')::json);

          RAISE NOTICE 'Roster with id %, changed the educator from  % to new educator %', rosterRecord.id, old_teacher_uniqueCommonId, new_teacher_uniqueCommonId;
          error_msg = '<success>'||'Roster with id:' || CAST(COALESCE(rosterRecord.id,0) AS TEXT) || ';changed the educator from:'||COALESCE(old_teacher_uniqueCommonId,'NULL')||';to new educator:'||COALESCE(new_teacher_uniqueCommonId,'NULL');
             END LOOP;
           END IF;
           END IF;
           END IF;
           END IF;
        RETURN error_msg;
        END;
        $$;


ALTER FUNCTION public.changeeductoronrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: changerosternamewithcourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION changerosternamewithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
   DECLARE
   state_Id BIGINT;
   att_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   subject_Id BIGINT;
   teacher_Id BIGINT;
   rosterRecord RECORD;
   course_Id BIGINT;
   
 BEGIN
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(displayidentifier) = lower(stateDisplayidentifier));   
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(att_sch_displayidentifier));   
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');   
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(abbreviatedname)  = lower(subject_abbrName) LIMIT 1);
   SELECT INTO teacher_Id (select DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id where uso.organizationid = att_sch_id and lower(uniquecommonidentifier) = lower(teacher_uniqueCommonId) LIMIT 1); 
   SELECT INTO course_Id (SELECT id FROM gradecourse WHERE lower(abbreviatedname) = lower(course_Abbrname) and course is true LIMIT 1);
   
   IF((SELECT count(*) FROM roster r WHERE lower(r.coursesectionname) = lower(old_roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id AND r.statecoursesid = course_Id
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id)) <= 0 THEN

     RAISE NOTICE 'No rosters found with roster name: %, subject: %, course: %, attendanceschool: %, teacher: %, and school year: %  ', old_roster_name, subject_abbrName, course_Abbrname, att_sch_displayidentifier,
           teacher_uniqueCommonId, schoolyear;

   ELSE
   FOR rosterRecord IN (SELECT r.* FROM roster r WHERE lower(r.coursesectionname) = lower(old_roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                          AND r.statecoursesid = course_Id AND currentschoolyear = schoolyear AND teacherid = teacher_Id)
     LOOP

UPDATE roster set coursesectionname = new_roster_name, modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId 
            WHERE id = rosterRecord.id;

RAISE NOTICE 'Roster with id % name changed to %', rosterRecord.id, new_roster_name;

     END LOOP;
   END IF;
END;
$$;


ALTER FUNCTION public.changerosternamewithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: changerosternamewithnocourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION changerosternamewithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
   DECLARE
   state_Id BIGINT;
   att_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   subject_Id BIGINT;
   teacher_Id BIGINT;
   rosterRecord RECORD;
   
 BEGIN
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(displayidentifier) = lower(stateDisplayidentifier));   
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(att_sch_displayidentifier));   
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');   
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(abbreviatedname)  = lower(subject_abbrName) LIMIT 1);
   SELECT INTO teacher_Id (select DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id where uso.organizationid = att_sch_id and lower(uniquecommonidentifier) = lower(teacher_uniqueCommonId) LIMIT 1); 

   IF((SELECT count(*) FROM roster r WHERE lower(r.coursesectionname) = lower(old_roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id)) <= 0 THEN

     RAISE NOTICE 'No rosters found with roster name: %, subject: %, attendanceschool: %, teacher: %, and school year: %  ', old_roster_name, subject_abbrName, att_sch_displayidentifier,
           teacher_uniqueCommonId, schoolyear;

   ELSE
   FOR rosterRecord IN (SELECT r.* FROM roster r WHERE lower(r.coursesectionname) = lower(old_roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id)
     LOOP

UPDATE roster set coursesectionname = new_roster_name, modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId 
            WHERE id = rosterRecord.id;

RAISE NOTICE 'Roster with id % name changed to %', rosterRecord.id, new_roster_name;

     END LOOP;
   END IF;
END;
$$;


ALTER FUNCTION public.changerosternamewithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: changesubjectonrosterwithnocourse(character varying, character varying, character varying, character varying, character varying, bigint, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION changesubjectonrosterwithnocourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
   DECLARE
   state_Id BIGINT;
   att_sch_id BIGINT;   
   ceteSysAdminUserId BIGINT;   
   old_subject_Id BIGINT;
   new_subject_Id BIGINT;
   teacher_Id BIGINT;   
   rosterRecord RECORD;
   studentsTestsRecords RECORD;     
   enrl_Id BIGINT;
   rosterUnEnrolledStuTestSecsStatus BIGINT;
   rosterUnEnrolledStuTestsStatus BIGINT; 
   pendingStuTestsStatus BIGINT;
   
 BEGIN
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(displayidentifier) = lower(stateDisplayidentifier));   
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(att_sch_displayidentifier));   
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');   
   SELECT INTO old_subject_Id (SELECT id FROM contentarea WHERE lower(abbreviatedname)  = lower(old_subject_abbrName) LIMIT 1);
   SELECT INTO new_subject_Id (SELECT id FROM contentarea WHERE lower(abbreviatedname)  = lower(new_subject_abbrName) LIMIT 1);
   SELECT INTO teacher_Id (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE uso.organizationid = att_sch_id AND lower(uniquecommonidentifier) = lower(teacher_uniqueCommonId) LIMIT 1);
   SELECT INTO pendingStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'pending');
   SELECT INTO rosterUnEnrolledStuTestSecsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO rosterUnEnrolledStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'rosterunenrolled');
   
   IF((SELECT count(*) FROM roster r WHERE lower(r.coursesectionname) = lower(roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = old_subject_Id
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id)) <= 0 THEN

     RAISE NOTICE 'No rosters found with roster name: %, subject: %, attendanceschool: %, teacher: %, and school year: %  ', roster_name, old_subject_abbrName, att_sch_displayidentifier,
          teacher_uniqueCommonId, schoolyear;

   ELSE
      FOR rosterRecord IN(SELECT r.* FROM roster r WHERE lower(r.coursesectionname) = lower(roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = old_subject_Id 
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id)
       LOOP
       
           UPDATE roster SET statesubjectareaid = new_subject_Id, modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = rosterRecord.id;

           INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ROSTER', rosterRecord.id, ceteSysAdminUserId, now(),
'SUBJECT_COURSE_CHANGE', ('{"rosterId":' || rosterRecord.id || ',"oldSubjectId":' || old_subject_Id || ',"newSubjectAreaId":' || new_subject_Id || '}')::json);
           
        FOR studentsTestsRecords IN(SELECT st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid 
                FROM studentstests st JOIN testsession ts ON st.testsessionid = ts.id JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid 
 WHERE st.activeflag=true AND ts.rosterid = rosterRecord.id AND (otw.effectivedate <= now() AND now() <= otw.expirydate))
        LOOP

            PERFORM inActivateStuTestsTrackerITITestsessions(studentTestsId := studentsTestsRecords.id, inActiveStuTestSecStatusId := rosterUnEnrolledStuTestSecsStatus, 
            inActiveStuTestStatusId := rosterUnEnrolledStuTestsStatus, testsession_Id := studentsTestsRecords.testsessionid, student_Id :=studentsTestsRecords.studentid);

        END LOOP;
 UPDATE ititestsessionhistory SET activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId, status = rosterUnEnrolledStuTestsStatus
     WHERE studentenrlrosterid IN (SELECT id FROM enrollmentsrosters WHERE rosterid = rosterRecord.id)
             AND status = pendingStuTestsStatus AND activeflag IS true;
      END LOOP;
   END IF;
END;
$$;


ALTER FUNCTION public.changesubjectonrosterwithnocourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: changesuborcourseonrosterwithcourse(character varying, character varying, character varying, character varying, character varying, character varying, character varying, bigint, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION changesuborcourseonrosterwithcourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, old_course_abbrname character varying, new_course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
   DECLARE
   state_Id BIGINT;
   att_sch_id BIGINT;   
   ceteSysAdminUserId BIGINT;   
   old_subject_Id BIGINT;
   new_subject_Id BIGINT;
   teacher_Id BIGINT;   
   rosterRecord RECORD;
   old_course_Id BIGINT;
   new_course_id BIGINT;
   studentsTestsRecords RECORD;     
   enrl_Id BIGINT;
   rosterUnEnrolledStuTestSecsStatus BIGINT;
   rosterUnEnrolledStuTestsStatus BIGINT; 
   pendingStuTestsStatus BIGINT;
   
 BEGIN
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(displayidentifier) = lower(stateDisplayidentifier));   
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(att_sch_displayidentifier));   
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');   
   SELECT INTO old_subject_Id (SELECT id FROM contentarea WHERE lower(abbreviatedname)  = lower(old_subject_abbrName) LIMIT 1);
   SELECT INTO new_subject_Id (SELECT id FROM contentarea WHERE lower(abbreviatedname)  = lower(new_subject_abbrName) LIMIT 1);
   SELECT INTO teacher_Id (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE uso.organizationid = att_sch_id AND lower(uniquecommonidentifier) = lower(teacher_uniqueCommonId) LIMIT 1);
   SELECT INTO pendingStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'pending');
   SELECT INTO rosterUnEnrolledStuTestSecsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO rosterUnEnrolledStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO old_course_Id (SELECT id FROM gradecourse WHERE lower(abbreviatedname) = lower(old_course_abbrName) and course is true LIMIT 1);
   SELECT INTO new_course_id (SELECT id FROM gradecourse WHERE lower(abbreviatedname) = lower(new_course_abbrName) and course is true LIMIT 1);
   
   IF((SELECT count(*) FROM roster r WHERE lower(r.coursesectionname) = lower(roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = old_subject_Id
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id AND r.statecoursesid = old_course_Id)) <= 0 THEN

     RAISE NOTICE 'No rosters found with roster name: %, subject: %, course %, attendanceschool: %, teacher: %, and school year: %  ', roster_name, old_subject_abbrName, att_sch_displayidentifier,
          teacher_uniqueCommonId, schoolyear;

   ELSE
      FOR rosterRecord IN(SELECT r.* FROM roster r WHERE lower(r.coursesectionname) = lower(roster_name) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = old_subject_Id 
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id AND r.statecoursesid = old_course_Id)
       LOOP
       
           UPDATE roster SET statesubjectareaid = new_subject_Id, statecoursesid =new_course_id, statecoursecode = new_course_abbrName,  modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = rosterRecord.id;

           INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ROSTER', rosterRecord.id, ceteSysAdminUserId, now(),
'SUBJECT_COURSE_CHANGE', ('{"rosterId":' || rosterRecord.id || ',"oldSubjectId":' || old_subject_Id || ',"newSubjectAreaId":' || new_subject_Id || ',"oldCourseId":' || old_course_Id
         || ',"newCourseId":' || new_course_id ||'}')::json);
           
        FOR studentsTestsRecords IN(SELECT st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid 
                FROM studentstests st JOIN testsession ts ON st.testsessionid = ts.id JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid 
 WHERE st.activeflag=true AND ts.rosterid = rosterRecord.id AND (otw.effectivedate <= now() AND now() <= otw.expirydate))
        LOOP

            PERFORM inActivateStuTestsTrackerITITestsessions(studentTestsId := studentsTestsRecords.id, inActiveStuTestSecStatusId := rosterUnEnrolledStuTestSecsStatus, 
            inActiveStuTestStatusId := rosterUnEnrolledStuTestsStatus, testsession_Id := studentsTestsRecords.testsessionid, student_Id :=studentsTestsRecords.studentid);

        END LOOP;
 UPDATE ititestsessionhistory SET activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId, status = rosterUnEnrolledStuTestsStatus
     WHERE studentenrlrosterid IN (SELECT id FROM enrollmentsrosters WHERE rosterid = rosterRecord.id)
             AND status = pendingStuTestsStatus AND activeflag IS true;
      END LOOP;
   END IF;
END;
$$;


ALTER FUNCTION public.changesuborcourseonrosterwithcourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, old_course_abbrname character varying, new_course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: check_student_pnp_and_stage4_test_availability(text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION check_student_pnp_and_stage4_test_availability(studentidentifier text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE       
       signedselected text;
       aslselectedvalue text;
       temprecord record;
       studenttestrecord record;
       brailleselected text;
BEGIN 
      
              
                
--RAISE NOTICE 'statestudentIdentifier: %', studentidentifier;

select st.id, st.status,st.createddate 
from studentstests st
join student s ON st.studentid = s.id and s.statestudentidentifier in(studentidentifier) and s.stateid = 51
join testsession ts ON ts.id = st.testsessionid and ts.stageid = 5 
join testcollection tc ON tc.id = ts.testcollectionid and tc.contentareaid = 3 where st.activeflag is true order by st.studentid, ts.stageid
limit 1 
INTO studenttestrecord;

IF studenttestrecord IS NOT NULL THEN
RAISE INFO 'stage_4 test was assigned to student with status ''%'', studenttestid ''%'' createddate ''%'' ',studenttestrecord.status, 
studenttestrecord.id, studenttestrecord.createddate;
ELSE
select spav.selectedvalue INTO signedselected
from profileitemattributenameattributecontainer pianac
join profileitemattribute pia on pianac.attributenameid = pia.id and pia.attributename = 'assignedSupport'
join profileitemattributecontainer piac on pianac.attributecontainerid = piac.id  
left join studentprofileitemattributevalue spav on pianac.id = spav.profileitemattributenameattributecontainerid 
and spav.studentid in(select id from student where statestudentidentifier = studentidentifier and stateid=51)
where piac.attributecontainer in('Signing');

select spav.selectedvalue INTO brailleselected
from profileitemattributenameattributecontainer pianac
join profileitemattribute pia on pianac.attributenameid = pia.id and pia.attributename = 'assignedSupport'
join profileitemattributecontainer piac on pianac.attributecontainerid = piac.id  
left join studentprofileitemattributevalue spav on pianac.id = spav.profileitemattributenameattributecontainerid 
and spav.studentid in(select id from student where statestudentidentifier = studentidentifier and stateid=51)
where piac.attributecontainer in('braille');

select selectedvalue INTO aslselectedvalue
from profileitemattributenameattributecontainer pianac
join profileitemattribute pia  on pianac.attributenameid = pia.id 
left join studentprofileitemattributevalue spav on pianac.id = spav.profileitemattributenameattributecontainerid 
and spav.studentid in(select id from student where 
statestudentidentifier = studentidentifier and stateid = 51)where  pia.attributename in ('SigningType');


IF(signedselected IS NOT NULL AND signedselected <> '' AND signedselected = 'true' AND aslselectedvalue IS NOT NULL AND aslselectedvalue <> '' AND aslselectedvalue = 'asl') THEN

RAISE INFO 'student has ASL PNP setting ''%''', studentidentifier;

ELSIF brailleselected IS NOT NULL THEN

RAISE INFO 'student has Braille PNP setting ''%''', studentidentifier;
ELSE
RAISE INFO 'stage_4 test was not assigned to student ''%'' please verify student record',studentidentifier;
END IF;
END IF;
 
             
       END;
       $$;


ALTER FUNCTION public.check_student_pnp_and_stage4_test_availability(studentidentifier text) OWNER TO aart;

--
-- Name: clearresponseparameters(bigint, bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION clearresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint) RETURNS integer
    LANGUAGE plpgsql
    AS $$
  BEGIN
UPDATE studentsresponseparameters SET avalue = null, bvalue = null, b2value = null, formulacode = null, score = null, modifieddate=now() 
WHERE studentstestsectionsid = in_studentTestSectionId and taskvariantid = in_taskId;
RETURN 1;
  END;
$$;


ALTER FUNCTION public.clearresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint) OWNER TO aart;

--
-- Name: contracting_organization_id(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION contracting_organization_id(childid bigint) RETURNS bigint
    LANGUAGE sql
    AS $_$
        WITH RECURSIVE organization_parent_tree_relation(organizationid, parentorganizationid) AS (
          SELECT organizationid, parentorganizationid FROM organizationrelation WHERE organizationid = $1
          UNION
          SELECT
            organizationrelation.organizationid, organizationrelation.parentorganizationid
          FROM organizationrelation, organization_parent_tree_relation as parentorganization_parent_tree_relation
          WHERE organizationrelation.organizationid = parentorganization_parent_tree_relation.parentorganizationid)
        SELECT org.id        
         FROM organization org,organization_parent_tree_relation where
          org.activeflag=true and org.id=organization_parent_tree_relation.parentorganizationid and org.contractingorganization is true;
        $_$;


ALTER FUNCTION public.contracting_organization_id(childid bigint) OWNER TO aart;

--
-- Name: convert_to_cpassorg(text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION convert_to_cpassorg(in_orgdisplayidentifer text) RETURNS void
    LANGUAGE plpgsql
    AS $$ 

DECLARE
                ORGRECORD RECORD;
                ORGRELRECORD RECORD;
                USRORGRRECORD RECORD;
                ROSTERRECORD RECORD;
                ENROLLMENTRECORD RECORD;
                currentStateOrgId BIGINT;
                newStateOrgId BIGINT;
                cetesysadminid BIGINT;
                cPassAssessmntPrgid BIGINT;
                
BEGIN
                RAISE NOTICE 'STARTING converting cPass students to a NEW CONTRACTING ORGANIZATION..%', in_orgdisplayidentifer;
                SELECT INTO cetesysadminid (SELECT id FROM aartuser WHERE username = 'cetesysadmin');
                SELECT INTO currentStateOrgId (select id from organization where displayidentifier=in_orgdisplayidentifer and contractingorganization is true and activeflag is true);
                SELECT INTO cPassAssessmntPrgid (select id from assessmentprogram where abbreviatedname='CPASS' and activeflag is true);
                
                RAISE NOTICE 'currentStateOrgId: %', currentStateOrgId;
                RAISE NOTICE 'cetesysadminid: %', cetesysadminid;
                RAISE NOTICE 'cPassAssessmntPrgid: %', cPassAssessmntPrgid;

                RAISE NOTICE 'VERIFYING IF CURRENT organization is a valid organization in EP.. ';
                IF(currentStateOrgId > 0) THEN
                                RAISE NOTICE 'VALID displayIdentifier found-- Continuing';
                ELSE
                                RAISE NOTICE 'INVALID displayIdentifier found-- Exiting the process..';
                                RETURN;
                END IF;

                RAISE NOTICE 'VERIFYING IF CURRENT organization has cPass as assessmentprogram.. ';
                IF((select count(*) from orgassessmentprogram where organizationid=currentStateOrgId and assessmentprogramid=cPassAssessmntPrgid) > 0) THEN
                
                                RAISE NOTICE 'Found CPASS assessment program-- Continuing';
                                
                                RAISE NOTICE 'INSERTING NEW CONTRACTING ORGANIZATION.. ';
                                INSERT INTO organization(
                                                    organizationname, displayidentifier, organizationtypeid, 
                                                    welcomemessage, createddate, activeflag, createduser, modifieduser, 
                                                    modifieddate, buildinguniqueness, schoolstartdate, schoolenddate, 
                                                    contractingorganization, expirepasswords, expirationdatetype, 
                                                    pooltype)
                                    (
                                                select organizationname || '-cPass' || in_orgdisplayidentifer,displayidentifier || '-cPass' || in_orgdisplayidentifer, 
                                                organizationtypeid, welcomemessage, now(), true, 
                                                cetesysadminid, cetesysadminid, now(), buildinguniqueness, schoolstartdate, 
                                                schoolenddate, contractingorganization, expirepasswords, expirationdatetype, pooltype  
                                                from organization where id=currentStateOrgId
                                    );         

                                SELECT INTO newStateOrgId (select id from organization where displayidentifier=(in_orgdisplayidentifer ||'-cPass' || in_orgdisplayidentifer) and contractingorganization is true and activeflag is true);
                                RAISE NOTICE 'newStateOrgId: %', newStateOrgId;

                                RAISE NOTICE 'REMOVING CPASS ASSESSMENT PROGRAM FROM EXISTING ORGANIZATION..';
                                DELETE from orgassessmentprogram where assessmentprogramid=cPassAssessmntPrgid and organizationid=currentStateOrgId and activeflag is true;

                                RAISE NOTICE 'ADDING CPASS ASSESSMENT PROGRAM TO NEW CONTRACTING ORGANIZATION..';
                                INSERT INTO orgassessmentprogram(
                                                    organizationid, assessmentprogramid, createddate, createduser, activeflag, modifieddate, modifieduser)
                                    VALUES (newStateOrgId, cPassAssessmntPrgid, now(), cetesysadminid, true, now(), cetesysadminid);

                                RAISE NOTICE 'SETTING UP ORG HIERARCHY FOR NEW ORGANIZATION..';
                                INSERT INTO organizationhierarchy (organizationid, organizationtypeid) (
                                                select (select id from organization where id=newStateOrgId), organizationtypeid from organizationhierarchy where organizationid=currentStateOrgId
                                );

                                RAISE NOTICE 'CREATING ALL NEW ORGANIZATIONs UNDER CONTRACTING ORGANIZATION..';
                                FOR ORGRECORD IN
                                                select * from organization_children(currentStateOrgId) order by organizationtypeid       
                                LOOP     
                                                RAISE NOTICE 'Creating new Org: %, %', ORGRECORD.id, ORGRECORD.organizationname;
                                                
                                                INSERT INTO organization(
                                                                    organizationname, displayidentifier, organizationtypeid, welcomemessage, createddate, activeflag, 
                                                                    createduser, modifieduser, modifieddate, buildinguniqueness, schoolstartdate, schoolenddate, 
                                                                    contractingorganization, expirepasswords, expirationdatetype, pooltype)
                                                    (
                                                                select organizationname || '-cPass' || in_orgdisplayidentifer, displayidentifier || '-cPass' || in_orgdisplayidentifer, 
                                                                organizationtypeid, welcomemessage, now(), true, 
                                                                cetesysadminid, cetesysadminid, now(), buildinguniqueness, schoolstartdate, schoolenddate, 
                                                                contractingorganization, expirepasswords, expirationdatetype, pooltype  from organization where id=ORGRECORD.id
                                                    );         
                                END LOOP;

                                RAISE NOTICE 'SETTING UP ORG RELATIONS OF ALL ORGS UNDER NEW CONTRACTING ORGANIZATION..';

                                INSERT INTO organizationrelation(
                                                                    organizationid, parentorganizationid, createddate, activeflag, 
                                                                    createduser, modifieduser, modifieddate)
                                                    VALUES (newStateOrgId, 
                                                                    (select id from organization where displayidentifier='CETE' and organizationtypeid=1 and activeflag is true), 
                                                                    now(), true, cetesysadminid, cetesysadminid, now());       
                                                                    
                                FOR ORGRELRECORD IN                
                                                select orgrel.organizationid, orgrel.parentorganizationid,
                                                                childorg.displayidentifier as childdisplayid, parentorg.displayidentifier as partnedisplayid 
                                                from organizationrelation orgrel
                                                join organization childorg on childorg.id = orgrel.organizationid
                                                join organization parentorg on parentorg.id = orgrel.parentorganizationid
                                                where orgrel.organizationid in (select id from organization_children(currentStateOrgId) order by organizationtypeid)        
                                LOOP     
                                                RAISE NOTICE 'Creating Org relations of : %, %, %, %', ORGRELRECORD.organizationid, ORGRELRECORD.parentorganizationid, ORGRELRECORD.childdisplayid, ORGRELRECORD.partnedisplayid;

                                                INSERT INTO organizationrelation(
                                                                    organizationid, parentorganizationid, createddate, activeflag, 
                                                                    createduser, modifieduser, modifieddate)
                                                    VALUES ((select id from organization where displayidentifier=ORGRELRECORD.childdisplayid || '-cPass' || in_orgdisplayidentifer), 
                                                                    (select id from organization where displayidentifier=ORGRELRECORD.partnedisplayid || '-cPass' || in_orgdisplayidentifer), 
                                                                    now(), true, cetesysadminid, cetesysadminid, now());            
                                END LOOP;          

                                RAISE NOTICE 'UPDATING TEACHER ORGS TO NEW CONTRACTING ORGANIZATION..';
                                FOR USRORGRRECORD IN
                                                select uo.*,org.displayidentifier from usersorganizations uo
                                                join organization org on org.id = uo.organizationid
                                                where uo.aartuserid in (
                                                                select distinct r.teacherid from enrollment en
                                                                join student st on st.id = en.studentid 
                                                                join enrollmentsrosters enrlr on enrlr.enrollmentid = en.id
                                                                join roster r on r.id = enrlr.rosterid
                                                                where st.assessmentprogramid is null 
                                                                and en.attendanceschoolid in (select id from organization_children(currentStateOrgId) union select currentStateOrgId)
                                                ) and uo.organizationid in (select id from organization_children(currentStateOrgId) where organizationtypeid=7)   
                                LOOP     
                                                RAISE NOTICE 'Updating user org table of user: %, %', USRORGRRECORD.aartuserid, USRORGRRECORD.organizationid;
                                                                                
                                                UPDATE usersorganizations 
                                                SET organizationid=(select id from organization 
                                                                where displayidentifier=USRORGRRECORD.displayidentifier || '-cPass' || in_orgdisplayidentifer)
                                                WHERE id=USRORGRRECORD.id;                               
                                END LOOP;

                                RAISE NOTICE 'UPDATING ROSTERS TO NEW CONTRACTING ORGANIZATION..';
                                FOR ROSTERRECORD IN
                                                select distinct r.id, org.displayidentifier from enrollment en
                                                join student st on st.id = en.studentid
                                                join enrollmentsrosters enrlr on enrlr.enrollmentid = en.id
                                                join roster r on r.id = enrlr.rosterid
                                                join organization org on r.attendanceschoolid = org.id
                                                where st.assessmentprogramid is null 
                                                and r.attendanceschoolid in (select id from organization_children(currentStateOrgId) union select currentStateOrgId)
                                LOOP     
                                                RAISE NOTICE 'Updating Roster attendenceschool Id: %, %', ROSTERRECORD.id, ROSTERRECORD.displayidentifier;
                                                
                                                UPDATE roster
                                                SET attendanceschoolid=(select id from organization 
                                                                where displayidentifier=ROSTERRECORD.displayidentifier || '-cPass' || in_orgdisplayidentifer)
                                                WHERE id=ROSTERRECORD.id;
                                END LOOP;

                                RAISE NOTICE 'UPDATING ENROLLMENTS TO NEW CONTRACTING ORGANIZATION..';
                                FOR ENROLLMENTRECORD IN
                                                select distinct en.id, org.displayidentifier from enrollment en
                                                join student st on st.id = en.studentid 
                                                join organization org on en.attendanceschoolid = org.id
                                                where st.assessmentprogramid is null 
                                                and en.attendanceschoolid in (select id from organization_children(currentStateOrgId) union select currentStateOrgId)
                                LOOP     
                                                RAISE NOTICE 'Updating Enrollment attendenceschool Id: %, %', ENROLLMENTRECORD.id, ENROLLMENTRECORD.displayidentifier;

                                                UPDATE enrollment
                                                SET attendanceschoolid=(select id from organization 
                                                                where displayidentifier=ENROLLMENTRECORD.displayidentifier || '-cPass' || in_orgdisplayidentifer)
                                                WHERE id=ENROLLMENTRECORD.id;
                                END LOOP;

                                RAISE NOTICE 'UPDATING NEW ORGANIZATIONS name and displayidentifier to remove -cPass at the end..';
                                -- UPDATE org name AND org display identifier to truncate -cPass             
                                UPDATE organization SET organizationname=trim(trailing ('%-cPass' || in_orgdisplayidentifer) from organizationname), 
                                                displayidentifier=trim(trailing ('%-cPass' || in_orgdisplayidentifer) from displayidentifier)
                                WHERE id IN (select id from organization where displayidentifier ilike ('%-cPass' || in_orgdisplayidentifer) and contractingorganization is not true);

                                UPDATE organization SET organizationname=trim(trailing in_orgdisplayidentifer from organizationname), 
                                                displayidentifier=trim(trailing in_orgdisplayidentifer from displayidentifier)
                                WHERE id=newStateOrgId;
                                
                                RAISE NOTICE 'FINISHED converting cPass organization with display identifer % to its OWN NEW ORGANIZATION..', in_orgdisplayidentifer;           
                                
                ELSE
                                RAISE NOTICE 'Not Found CPASS assessment program -- Exiting the process';
                END IF;

END;
$$;


ALTER FUNCTION public.convert_to_cpassorg(in_orgdisplayidentifer text) OWNER TO aart;

--
-- Name: correct_student_enrollment(text, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $$
DECLARE
	current_school_record RECORD;
	future_school_record RECORD;
	no_match_record RECORD;
	number_updated_enrollment INTEGER;
	number_updated_studentstestsections INTEGER;
	number_updated_students INTEGER;
	future_school_id BIGINT;
	current_school_id BIGINT;
	future_school_count BIGINT;
	test_session_id BIGINT;
	state_id BIGINT;
	future_school_curentEnrollment_id BIGINT;

BEGIN
        SELECT id FROM organization WHERE displayidentifier = 'KS' INTO state_id;
                
		SELECT schoolid FROM organizationtreedetail
  		WHERE schooldisplayidentifier =_current_school AND stateid = state_id
		INTO current_school_id;

		SELECT schoolid FROM organizationtreedetail
  		WHERE schooldisplayidentifier =_future_school AND stateid = state_id
		INTO future_school_id;

		SELECT count(st.*) as count
		FROM studentstests st
		JOIN enrollment en ON en.id = st.enrollmentid
		JOIN testcollection tc ON tc.id = st.testcollectionid
		JOIN organization attsch ON attsch.id = en.attendanceschoolid
		JOIN organization aypsch ON aypsch.id = en.aypschoolid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN student stu ON stu.id = en.studentid
		JOIN testsession ts ON ts.id = st.testsessionid
		JOIN category c ON c.id = st.status
		WHERE stu.statestudentidentifier = _state_student_identifier
	  	AND stu.stateid = state_id
	  	AND en.currentschoolyear = _schoolyear
	  	AND ca.abbreviatedname = _subject
	  	AND attsch.displayidentifier = _future_school
        AND ts.operationaltestwindowid IN (10131,10132,10133)
		INTO future_school_count;

        SELECT en.id 
        FROM enrollment en 
        JOIN student stu on stu.id = en.studentid and en.attendanceschoolid = future_school_id and stu.stateid = state_id and currentschoolyear = _schoolyear LIMIT 1 
        INTO future_school_curentEnrollment_id;
                
		FOR current_school_record IN (
		SELECT stu.statestudentidentifier,
	       en.id enrollmentid,
	       en.activeflag,
	       st.id AS studentstestid,
	       st.testsessionid,
	       st.testcollectionid as testcollectionid,
	       st.testid as testid,
	       st.enrollmentid,
	       c.categorycode as status,
	       ts.stageid as stageid,
	       ts.gradecourseid as gradecourseid,
	       st.activeflag,
	       attsch.displayidentifier AS attSchBldNum,
	       ca.abbreviatedname AS contentareaname,
	       ts.name AS testsessionname
		FROM studentstests st
		JOIN enrollment en ON en.id = st.enrollmentid
		JOIN testcollection tc ON tc.id = st.testcollectionid
		JOIN organization attsch ON attsch.id = en.attendanceschoolid
		JOIN organization aypsch ON aypsch.id = en.aypschoolid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN student stu ON stu.id = en.studentid
		JOIN testsession ts ON ts.id = st.testsessionid
		JOIN category c ON c.id = st.status
		WHERE stu.statestudentidentifier = _state_student_identifier
	  	AND stu.stateid = state_id
	  	AND en.currentschoolyear = _schoolyear
	  	AND ca.abbreviatedname = _subject
	  	AND attsch.displayidentifier = _current_school
        AND ts.operationaltestwindowid IN (10131,10132,10133)) LOOP

		IF (future_school_count > 0)
			THEN
				FOR future_school_record IN (
					SELECT stu.statestudentidentifier,
				       en.id enrollmentid,
				       en.activeflag,
				       st.id AS studentstestid,
				       st.testsessionid,
				       st.testcollectionid as testcollectionid,
				       st.testid as testid,
				       st.enrollmentid,
				       c.categorycode as status,
				       ts.stageid as stageid,
				       ts.gradecourseid as gradecourseid,
				       st.activeflag,
				       attsch.displayidentifier AS attSchBldNum,
				       ca.abbreviatedname AS contentareaname,
				       ts.name AS testsessionname
					FROM studentstests st
					JOIN enrollment en ON en.id = st.enrollmentid
					JOIN testcollection tc ON tc.id = st.testcollectionid
					JOIN organization attsch ON attsch.id = en.attendanceschoolid
					JOIN organization aypsch ON aypsch.id = en.aypschoolid
					JOIN contentarea ca ON ca.id = tc.contentareaid
					JOIN student stu ON stu.id = en.studentid
					JOIN testsession ts ON ts.id = st.testsessionid
					JOIN category c ON c.id = st.status
					WHERE stu.statestudentidentifier = _state_student_identifier
				  	AND stu.stateid = state_id				    	
				  	AND en.currentschoolyear = _schoolyear
				  	AND ca.abbreviatedname = _subject
				  	AND attsch.displayidentifier = _future_school
			        AND ts.operationaltestwindowid IN (10131,10132,10133)) LOOP

			        IF ((current_school_record.statestudentidentifier = future_school_record.statestudentidentifier) AND 
			        	(current_school_record.stageid = future_school_record.stageid) AND 
			        	(current_school_record.contentareaname = future_school_record.contentareaname) AND
			        	(current_school_record.gradecourseid = future_school_record.gradecourseid)
			           )
			            THEN
			            RAISE NOTICE 'Matching record found for student %',current_school_record.statestudentidentifier;
							IF ((current_school_record.status = 'complete') AND (future_school_record.status = 'inprogress'))
			                	THEN        
			                    	RAISE NOTICE 'Test status is inprogress in school % for statestudentidentifier %',future_school_record.attSchBldNum,current_school_record.statestudentidentifier;

			            	ELSIF ((current_school_record.status = 'complete') AND (future_school_record.status = 'unused'))
			                	THEN
			                        	RAISE NOTICE 'Moving student % from % to %',future_school_record.statestudentidentifier,current_school_record.attSchBldNum,future_school_record.attSchBldNum;

			                        	RAISE NOTICE 'Updating enrollment and testsessionid in studentstests table for student %',future_school_record.statestudentidentifier;
			                         	WITH updated_studentstests_enrollment_rows AS (
			                                        UPDATE studentstests
			                                        SET enrollmentid = future_school_record.enrollmentid, testsessionid = future_school_record.testsessionid,
			                                        modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
			                                        modifieddate = NOW()
			                                        WHERE id = current_school_record.studentstestid
			                         	RETURNING 1
			                         	)
			                        	SELECT count(*) FROM updated_studentstests_enrollment_rows INTO number_updated_enrollment;
			                        	RAISE NOTICE 'Deactivated % rows in studentstests table',number_updated_enrollment;



			                        	RAISE NOTICE 'Updating studentstestsections table for student %',future_school_record.statestudentidentifier;
			                        	WITH updated_studentstestsections_rows AS (
			                                        UPDATE studentstestsections
			                                        SET activeflag = FALSE,
			                                        modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
			                                        modifieddate = NOW()
			                                        WHERE studentstestid = future_school_record.studentstestid
			                        	 RETURNING 1
			                         	)
			                       		 
			                       		SELECT count(*) FROM updated_studentstestsections_rows INTO number_updated_studentstestsections;
			                        	RAISE NOTICE 'Deactivated % rows in studentstestsections table',number_updated_studentstestsections;

			                        	RAISE NOTICE 'Updating studentstests table for student %',future_school_record.statestudentidentifier;
			                        	WITH updated_studentstests_rows AS (
			                                        UPDATE studentstests
			                                        SET activeflag = FALSE,
			                                        modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
			                                        modifieddate = NOW()
			                                        WHERE id = future_school_record.studentstestid
			                         	RETURNING 1
			                         	)

			                        	SELECT count(*) FROM updated_studentstests_rows INTO number_updated_students;
			                        	RAISE NOTICE 'Deactivated % rows in studentstests table',number_updated_students;
			            	END IF;
	        		END IF;
	        	END LOOP;
		END IF;
        END LOOP;
END;
$$;


ALTER FUNCTION public.correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer) OWNER TO aart;

--
-- Name: correct_student_enrollment(text, text, text, text, integer, integer); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer, _operationaltestwindowid integer) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $$
DECLARE
current_school_record RECORD;
future_school_record RECORD;
no_match_record RECORD;
number_updated_enrollment INTEGER;
number_updated_studentstestsections INTEGER;
number_updated_students INTEGER;
future_school_id BIGINT;
current_school_id BIGINT;
future_school_count BIGINT;
test_session_id BIGINT;
state_id BIGINT;
future_school_curentEnrollment_id BIGINT;

BEGIN
        SELECT id FROM organization WHERE displayidentifier = 'KS' INTO state_id;
                
SELECT schoolid FROM organizationtreedetail
  WHERE schooldisplayidentifier =_current_school AND stateid = state_id
INTO current_school_id;

SELECT schoolid FROM organizationtreedetail
  WHERE schooldisplayidentifier =_future_school AND stateid = state_id
INTO future_school_id;

SELECT count(st.*) as count
FROM studentstests st
JOIN enrollment en ON en.id = st.enrollmentid
JOIN testcollection tc ON tc.id = st.testcollectionid
JOIN organization attsch ON attsch.id = en.attendanceschoolid
JOIN organization aypsch ON aypsch.id = en.aypschoolid
JOIN contentarea ca ON ca.id = tc.contentareaid
JOIN student stu ON stu.id = en.studentid
JOIN testsession ts ON ts.id = st.testsessionid
JOIN category c ON c.id = st.status
WHERE stu.statestudentidentifier = _state_student_identifier
  AND stu.stateid = state_id
  AND en.currentschoolyear = _schoolyear
  AND ca.abbreviatedname = _subject
  AND attsch.displayidentifier = _future_school
        AND ts.operationaltestwindowid IN (10131,10132,10133)
INTO future_school_count;

        SELECT en.id 
        FROM enrollment en 
        JOIN student stu on stu.id = en.studentid and en.attendanceschoolid = future_school_id and stu.stateid = state_id and currentschoolyear = _schoolyear LIMIT 1 
        INTO future_school_curentEnrollment_id;
                
FOR current_school_record IN (
SELECT stu.statestudentidentifier,
       en.id enrollmentid,
       en.activeflag,
       st.id AS studentstestid,
       st.testsessionid,
       st.testcollectionid as testcollectionid,
       st.testid as testid,
       st.enrollmentid,
       c.categorycode as status,
       ts.stageid as stageid,
       ts.gradecourseid as gradecourseid,
       st.activeflag,
       attsch.displayidentifier AS attSchBldNum,
       ca.abbreviatedname AS contentareaname,
       ts.name AS testsessionname
FROM studentstests st
JOIN enrollment en ON en.id = st.enrollmentid
JOIN testcollection tc ON tc.id = st.testcollectionid
JOIN organization attsch ON attsch.id = en.attendanceschoolid
JOIN organization aypsch ON aypsch.id = en.aypschoolid
JOIN contentarea ca ON ca.id = tc.contentareaid
JOIN student stu ON stu.id = en.studentid
JOIN testsession ts ON ts.id = st.testsessionid
JOIN category c ON c.id = st.status
WHERE stu.statestudentidentifier = _state_student_identifier
  AND stu.stateid = state_id
  AND en.currentschoolyear = _schoolyear
  AND ca.abbreviatedname = _subject
  AND attsch.displayidentifier = _current_school
        AND ts.operationaltestwindowid IN (10131,10132,10133)) LOOP

IF (future_school_count > 0)
THEN
FOR future_school_record IN (
SELECT stu.statestudentidentifier,
       en.id enrollmentid,
       en.activeflag,
       st.id AS studentstestid,
       st.testsessionid,
       st.testcollectionid as testcollectionid,
       st.testid as testid,
       st.enrollmentid,
       c.categorycode as status,
       ts.stageid as stageid,
       ts.gradecourseid as gradecourseid,
       st.activeflag,
       attsch.displayidentifier AS attSchBldNum,
       ca.abbreviatedname AS contentareaname,
       ts.name AS testsessionname
FROM studentstests st
JOIN enrollment en ON en.id = st.enrollmentid
JOIN testcollection tc ON tc.id = st.testcollectionid
JOIN organization attsch ON attsch.id = en.attendanceschoolid
JOIN organization aypsch ON aypsch.id = en.aypschoolid
JOIN contentarea ca ON ca.id = tc.contentareaid
JOIN student stu ON stu.id = en.studentid
JOIN testsession ts ON ts.id = st.testsessionid
JOIN category c ON c.id = st.status
WHERE stu.statestudentidentifier = _state_student_identifier
  AND stu.stateid = state_id    
  AND en.currentschoolyear = _schoolyear
  AND ca.abbreviatedname = _subject
  AND attsch.displayidentifier = _future_school
        AND ts.operationaltestwindowid IN (10131,10132,10133)) LOOP

        IF ((current_school_record.statestudentidentifier = future_school_record.statestudentidentifier) AND 
        (current_school_record.stageid = future_school_record.stageid) AND 
        (current_school_record.contentareaname = future_school_record.contentareaname) AND
        (current_school_record.gradecourseid = future_school_record.gradecourseid)
           )
            THEN
            RAISE NOTICE 'Matching record found for student %',current_school_record.statestudentidentifier;
IF ((current_school_record.status = 'complete') AND (future_school_record.status = 'inprogress'))
                THEN        
                    RAISE NOTICE 'Test status is inprogress in school % for statestudentidentifier %',future_school_record.attSchBldNum,current_school_record.statestudentidentifier;

            ELSIF ((current_school_record.status = 'complete') AND (future_school_record.status = 'unused'))
                THEN
                        RAISE NOTICE 'Moving student % from % to %',future_school_record.statestudentidentifier,current_school_record.attSchBldNum,future_school_record.attSchBldNum;

                        RAISE NOTICE 'Updating enrollment and testsessionid in studentstests table for student %',future_school_record.statestudentidentifier;
                         WITH updated_studentstests_enrollment_rows AS (
                                        UPDATE studentstests
                                        SET enrollmentid = future_school_record.enrollmentid, testsessionid = future_school_record.testsessionid,
                                        modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
                                        modifieddate = NOW()
                                        WHERE id = current_school_record.studentstestid
                         RETURNING 1
                         )
                        SELECT count(*) FROM updated_studentstests_enrollment_rows INTO number_updated_enrollment;
                        RAISE NOTICE 'Deactivated % rows in studentstests table',number_updated_enrollment;



                        RAISE NOTICE 'Updating studentstestsections table for student %',future_school_record.statestudentidentifier;
                        WITH updated_studentstestsections_rows AS (
                                        UPDATE studentstestsections
                                        SET activeflag = FALSE,
                                        modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
                                        modifieddate = NOW()
                                        WHERE studentstestid = future_school_record.studentstestid
                         RETURNING 1
                         )
                        
                       SELECT count(*) FROM updated_studentstestsections_rows INTO number_updated_studentstestsections;
                        RAISE NOTICE 'Deactivated % rows in studentstestsections table',number_updated_studentstestsections;

                        RAISE NOTICE 'Updating studentstests table for student %',future_school_record.statestudentidentifier;
                        WITH updated_studentstests_rows AS (
                                        UPDATE studentstests
                                        SET activeflag = FALSE,
                                        modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
                                        modifieddate = NOW()
                                        WHERE id = future_school_record.studentstestid
                         RETURNING 1
                         )

                        SELECT count(*) FROM updated_studentstests_rows INTO number_updated_students;
                        RAISE NOTICE 'Deactivated % rows in studentstests table',number_updated_students;
            END IF;
        END IF;
        END LOOP;
END IF;
        END LOOP;
END;
$$;


ALTER FUNCTION public.correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer, _operationaltestwindowid integer) OWNER TO aart;

--
-- Name: createnewrosterwithnocourse(character varying[], character varying, character varying, bigint, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION createnewrosterwithnocourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   state_Id BIGINT;
   att_sch_id BIGINT;
   ayp_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   subject_Id BIGINT;
   teacher_Id BIGINT;
   rosterRecord RECORD;
   enrollmentRecord RECORD;
   enrlRecords RECORD;
   enrl_Id BIGINT;
   roster_Id BIGINT;
   error_msg TEXT;
   student_identify TEXT;

 BEGIN
   student_identify:=  state_student_identifiers::TEXT;
   error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(state_student_identifiers,'NULL')||';State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE 
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
   SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin' AND activeflag is true);
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(trim(abbreviatedname))  = lower(trim(subject_abbrName)) AND activeflag is true LIMIT 1);
   SELECT INTO teacher_Id (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid  = att_sch_id AND case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(teacher_uniqueCommonId)) LIMIT 1);
   error_msg := '';
   IF(subject_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', subject_abbrName;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(subject_abbrName,'NULL');

     ELSE
  IF((SELECT count(en.*) FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear  AND en.attendanceschoolid = att_sch_id
           AND trim(stu.statestudentidentifier) = ANY(state_student_identifiers)AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true) <= 0) THEN

        RAISE NOTICE 'Student % is not found with  attendance %  in school year %', student_identify, att_sch_displayidentifier, schoolyear;
        error_msg := '<error>'||'Studentid:'||COALESCE(student_identify,'NULL')||'; not found attendance:'||COALESCE(att_sch_displayidentifier,'NULL')||';in school year:'||CAST(COALESCE(schoolyear,0) AS TEXT);
    ELSE
   IF((SELECT count(*) FROM roster r WHERE  r.activeflag is true AND  lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                          AND currentschoolyear = schoolyear AND teacherid = teacher_Id)) <= 0 THEN

     RAISE NOTICE 'No rosters found with roster name: %, subject: %, attendanceschool: %, teacher: %, and school year: %, So creating new roster.  ',
                  roster_name, subject_abbrName, att_sch_displayidentifier, teacher_uniqueCommonId, schoolyear;
    error_msg := '<validation>' || 'No rosters found with roster name:'|| COALESCE(roster_name,'NULL')||';subject:'||COALESCE(subject_abbrName,'NULL')||';attendanceschool:'
                  ||COALESCE(att_sch_displayidentifier,'NULL')||';teacher:'||COALESCE(teacher_uniqueCommonId,'NULL')||';and school year:'||CAST(COALESCE(schoolyear,0) AS TEXT)||
                  ' So creating new roster.';
     IF(teacher_Id is null) THEN

         RAISE NOTICE 'Teacher % is not found in the organization %', teacher_uniqueCommonId, att_sch_displayidentifier;

         error_msg := '<error>' || 'Teacher:' || COALESCE(teacher_uniqueCommonId,'NULL')|| ';  not found in school:' || COALESCE(att_sch_displayidentifier,'NULL');

     ELSE
          INSERT INTO roster(coursesectionname, teacherid, attendanceSchoolId, statesubjectareaid, restrictionid, createddate, createduser, activeflag, modifieddate, modifieduser,
		educatorschooldisplayidentifier, sourcetype, currentSchoolYear, aypSchoolId)
		VALUES(roster_name, teacher_Id, att_sch_id, subject_Id, 1, now(), ceteSysAdminUserId, true, now(), ceteSysAdminUserId,att_sch_displayidentifier,
                'LOCK_DOWN_SCRIPT', schoolyear, ayp_sch_id) RETURNING id INTO roster_Id;

	FOR enrollmentRecord IN(SELECT stu.statestudentidentifier,en.* FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear AND en.attendanceschoolid = att_sch_id
          AND stu.statestudentidentifier = ANY(state_student_identifiers)AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true)
        LOOP

          INSERT INTO enrollmentsrosters(enrollmentid, rosterid, createddate, createduser, activeflag, modifieddate, modifieduser)
                      VALUES (enrollmentRecord.id, roster_Id, now(), ceteSysAdminUserId, true, now(), ceteSysAdminUserId) RETURNING id INTO enrl_Id;

          INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', enrl_Id, ceteSysAdminUserId, now(),
		      'ADD_STUDNET_TO_ROSTER', ('{"rosterId":' || roster_Id || ', "enrollmentId":' ||  enrollmentRecord.id || ',"enrollmentRosterId":' || enrl_Id || '}')::json);

           RAISE NOTICE 'Student % is added to the roster %', enrollmentRecord.statestudentidentifier, roster_name;

            error_msg :=  '<success>' || 'Student:' || COALESCE(enrollmentRecord.statestudentidentifier,'NULL') || ';  added to the roster:' || COALESCE(roster_name,'NULL');

           PERFORM moveCompletedTestsAndResetSTWithNoCourse(student_id := enrollmentRecord.studentid,enrollment_id := enrollmentRecord.id,
                 subjectArea_id := subject_Id, new_roster_id := roster_Id, school_year := schoolyear, attendance_schId := att_sch_id);

        END LOOP;
     END IF;
   ELSE
    FOR enrollmentRecord IN(SELECT stu.statestudentidentifier, en.* FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear AND en.attendanceschoolid = att_sch_id
         AND trim(stu.statestudentidentifier) = ANY(state_student_identifiers)AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true)
     LOOP
        FOR rosterRecord IN(SELECT r.* FROM roster r WHERE r.activeflag is true AND  lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                        AND currentschoolyear = schoolyear AND teacherid = teacher_Id)
	 LOOP
           IF((SELECT count(*) FROM enrollmentsrosters WHERE enrollmentid = enrollmentRecord.id AND rosterid = rosterRecord.id) <= 0) THEN

	       INSERT INTO enrollmentsrosters(enrollmentid, rosterid, createddate, createduser, activeflag, modifieddate, modifieduser)
                      VALUES (enrollmentRecord.id, rosterRecord.id, now(), ceteSysAdminUserId, true, now(), ceteSysAdminUserId) RETURNING id INTO enrl_Id;

               INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', enrl_Id, ceteSysAdminUserId, now(),
		      'ADD_STUDNET_TO_ROSTER', ('{"rosterId":' || rosterRecord.id || ', "enrollmentId":' ||  enrollmentRecord.id || ',"enrollmentRosterId":' || enrl_Id || '}')::json);

	      RAISE NOTICE 'Student % is added to the roster %', enrollmentRecord.statestudentidentifier, roster_name;

	      error_msg :=  '<success>' || 'Student:' || COALESCE(enrollmentRecord.statestudentidentifier,'NULL') || ';  added to the roster:' || COALESCE(roster_name,'NULL');

	      PERFORM moveCompletedTestsAndResetSTWithNoCourse(student_id := enrollmentRecord.studentid,enrollment_id := enrollmentRecord.id, subjectArea_id := subject_Id,
	                 new_roster_id := rosterRecord.id, school_year := schoolyear, attendance_schId := att_sch_id);

	   ELSE
	      FOR enrlRecords IN (SELECT * FROM enrollmentsrosters WHERE enrollmentid = enrollmentRecord.id AND rosterid = rosterRecord.id LIMIT 1)
	        LOOP
                  UPDATE enrollmentsrosters SET activeflag = true, modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = enrlRecords.id;

	          INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', enrlRecords.id, ceteSysAdminUserId, now(),
		      'ADD_STUDNET_TO_ROSTER', ('{"rosterId":' || enrlRecords.rosterid || ', "enrollmentId":' ||  enrlRecords.enrollmentid || ',"enrollmentRosterId":' || enrlRecords.id || '}')::json);

                 error_msg :=  '<success>' || 'enrollmentid:' || CAST(COALESCE(enrlRecords.enrollmentid,0) AS TEXT)  || ';  added to the roster:' || COALESCE(roster_name,'NULL');

		 PERFORM moveCompletedTestsAndResetSTWithNoCourse(student_id := enrollmentRecord.studentid,enrollment_id := enrollmentRecord.id, subjectArea_id := subject_Id,
		             new_roster_id := rosterRecord.id, school_year := schoolyear, attendance_schId := att_sch_id);

	      END LOOP;
	   END IF;
        END LOOP;
     END LOOP;
   END IF;
   END IF;
   END IF;
   END IF;
RETURN error_msg;
END;
$$;


ALTER FUNCTION public.createnewrosterwithnocourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: createnewrosterwithsubandcourse(character varying[], character varying, character varying, bigint, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION createnewrosterwithsubandcourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   state_Id BIGINT;
   att_sch_id BIGINT;
   ayp_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   subject_Id BIGINT;
   teacher_Id BIGINT;
   rosterRecord RECORD;
   enrollmentRecord RECORD;
   enrlRecords RECORD;
   enrl_Id BIGINT;
   roster_Id BIGINT;
   course_Id BIGINT;
   error_msg TEXT;
   student_identify TEXT;

 BEGIN
   student_identify:=  state_student_identifiers::TEXT;
    error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(state_student_identifiers,'NULL')||';State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
   SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin' AND activeflag is true );
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(trim(abbreviatedname))  = lower(trim(subject_abbrName)) AND activeflag is true LIMIT 1);
   SELECT INTO teacher_Id (SELECT DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid  = att_sch_id AND case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(teacher_uniqueCommonId)) LIMIT 1);
   SELECT INTO course_Id (SELECT id FROM gradecourse WHERE lower(trim(abbreviatedname)) = lower(trim(course_abbrName)) and activeflag is true LIMIT 1);
   error_msg := '';
      IF(subject_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', subject_abbrName;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(subject_abbrName,'NULL');

     ELSE
        IF(course_Id is null) THEN

         RAISE NOTICE 'course_Id % is invalid', course_abbrName;

         error_msg := '<error>' || 'invalid value on course_abbrName:' || COALESCE(course_abbrName,'NULL');

     ELSE   
  IF((SELECT count(en.*) FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear  AND en.attendanceschoolid = att_sch_id
           AND stu.statestudentidentifier = ANY(state_student_identifiers)AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true) <= 0) THEN

        RAISE NOTICE 'Student % is not found with attendance %  in school year %', student_identify, att_sch_displayidentifier, schoolyear;
        error_msg := '<error>'||'Studentid:'||COALESCE(student_identify,'NULL')||'; not found attendance:'||COALESCE(att_sch_displayidentifier,'NULL')||';in school year:'||CAST(COALESCE(schoolyear,0) AS TEXT);
    ELSE
   IF((SELECT count(*) FROM roster r WHERE r.activeflag is true AND  lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                       AND r.statecoursesid = course_Id AND currentschoolyear = schoolyear AND teacherid = teacher_Id)) <= 0 THEN

     RAISE NOTICE 'No rosters found with roster name: %, subject: %, course: %, attendanceschool: %, teacher: %, and school year: %, So creating new roster.  ',
                  roster_name, subject_abbrName, course_abbrName, att_sch_displayidentifier, teacher_uniqueCommonId, schoolyear;
     error_msg := '<validation>' || 'No rosters found with roster name:'|| COALESCE(roster_name,'NULL')||';subject:' ||COALESCE(subject_abbrName,'NULL')||';course:'||COALESCE(course_abbrName,'NULL')||';attendanceschool:'
                                ||COALESCE(att_sch_displayidentifier,'NULL')||';teacher:'||COALESCE(teacher_uniqueCommonId,'NULL')||';and school year:'||CAST(COALESCE(schoolyear,0) AS TEXT)||
                                ' So creating new roster.';

     IF(teacher_Id is null) THEN

         RAISE NOTICE 'Teacher % is not found in the organization %', teacher_uniqueCommonId, att_sch_displayidentifier;

         error_msg := '<error>' || 'Teacher:' || COALESCE(teacher_uniqueCommonId,'NULL')|| ';  not found in the organization:' || COALESCE(att_sch_displayidentifier,'NULL');

     ELSE
       INSERT INTO roster(coursesectionname, teacherid, attendanceSchoolId, statesubjectareaid, restrictionid, createddate, createduser, activeflag, modifieddate, modifieduser,
		educatorschooldisplayidentifier, sourcetype, currentSchoolYear, aypSchoolId, statecoursecode, statecoursesid)
	  VALUES(roster_name, teacher_Id, att_sch_id, subject_Id, 1, now(), ceteSysAdminUserId, true, now(), ceteSysAdminUserId,att_sch_displayidentifier,
                'LOCK_DOWN_SCRIPT', schoolyear, ayp_sch_id, course_abbrName, course_Id) RETURNING id INTO roster_Id;

       FOR enrollmentRecord IN(SELECT stu.statestudentidentifier,en.* FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear AND en.attendanceschoolid = att_sch_id
          AND trim(stu.statestudentidentifier) = ANY(state_student_identifiers)AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true)
       LOOP

          INSERT INTO enrollmentsrosters(enrollmentid, rosterid, createddate, createduser, activeflag, modifieddate, modifieduser)
                      VALUES (enrollmentRecord.id, roster_Id, now(), ceteSysAdminUserId, true, now(), ceteSysAdminUserId) RETURNING id INTO enrl_Id;

          INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', enrl_Id, ceteSysAdminUserId, now(),
		      'ADD_STUDNET_TO_ROSTER', ('{"rosterId":' || roster_Id || ', "enrollmentId":' ||  enrollmentRecord.id || ',"enrollmentRosterId":' || enrl_Id || '}')::json);

          RAISE NOTICE 'Student % is added to the roster %', enrollmentRecord.statestudentidentifier, roster_name;

          error_msg :=  '<success>' || 'Student:' || COALESCE(enrollmentRecord.statestudentidentifier,'NULL') || ';  added to the roster:' || COALESCE(roster_name,'NULL');

          PERFORM moveCompletedTestsAndResetSTWithCourse(student_id := enrollmentRecord.studentid,enrollment_id := enrollmentRecord.id, subjectArea_id := subject_Id,
                 course_Id := course_Id, new_roster_id := roster_Id, school_year := schoolyear, attendance_schId := att_sch_id);

       END LOOP;
    END IF;

   ELSE
    FOR enrollmentRecord IN(SELECT stu.statestudentidentifier, en.* FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear  AND en.attendanceschoolid = att_sch_id
         AND trim(stu.statestudentidentifier) = ANY(state_student_identifiers)AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true)
     LOOP
        FOR rosterRecord IN(SELECT r.* FROM roster r WHERE r.activeflag is true AND  lower(trim(r.coursesectionname)) = lower(trim(roster_name)) AND attendanceschoolid = att_sch_id AND r.statesubjectareaid = subject_Id
                   AND r.statecoursesid = course_Id AND currentschoolyear = schoolyear AND teacherid = teacher_Id)
	 LOOP
           IF((SELECT count(*) FROM enrollmentsrosters WHERE enrollmentid = enrollmentRecord.id AND rosterid = rosterRecord.id) <= 0) THEN

	       INSERT INTO enrollmentsrosters(enrollmentid, rosterid, createddate, createduser, activeflag, modifieddate, modifieduser)
                      VALUES (enrollmentRecord.id, rosterRecord.id, now(), ceteSysAdminUserId, true, now(), ceteSysAdminUserId) RETURNING id INTO enrl_Id;

               INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', enrl_Id, ceteSysAdminUserId, now(),
		      'ADD_STUDNET_TO_ROSTER', ('{"rosterId":' || rosterRecord.id || ', "enrollmentId":' ||  enrollmentRecord.id || ',"enrollmentRosterId":' || enrl_Id || '}')::json);

	      RAISE NOTICE 'Student % is added to the roster %', enrollmentRecord.statestudentidentifier, roster_name;

        error_msg :=  '<success>' || 'Student:' || COALESCE(enrollmentRecord.statestudentidentifier,'NULL') || ';  added to the roster:' || COALESCE(roster_name,'NULL');


	      PERFORM moveCompletedTestsAndResetSTWithCourse(student_id := enrollmentRecord.studentid,enrollment_id := enrollmentRecord.id, subjectArea_id := subject_Id,
	               course_Id := course_Id, new_roster_id := roster_Id, school_year := schoolyear, attendance_schId := att_sch_id);


	   ELSE
	      FOR enrlRecords IN (SELECT * FROM enrollmentsrosters WHERE enrollmentid = enrollmentRecord.id AND rosterid = rosterRecord.id LIMIT 1)
	        LOOP
                  UPDATE enrollmentsrosters SET activeflag = true, modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = enrlRecords.id;

	          INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', enrlRecords.id, ceteSysAdminUserId, now(),
		      'ADD_STUDNET_TO_ROSTER', ('{"rosterId":' || enrlRecords.rosterid || ', "enrollmentId":' ||  enrlRecords.enrollmentid || ',"enrollmentRosterId":' || enrlRecords.id || '}')::json);

      error_msg :=  '<success>' || 'enrollmentid:' || CAST(COALESCE(enrlRecords.enrollmentid,0) AS TEXT)  || ';  added to the roster:' || COALESCE(roster_name,'NULL');

		 PERFORM moveCompletedTestsAndResetSTWithCourse(student_id := enrollmentRecord.studentid,enrollment_id := enrollmentRecord.id, subjectArea_id := subject_Id,
	               course_Id := course_Id, new_roster_id := roster_Id, school_year := schoolyear, attendance_schId := att_sch_id);

	      END LOOP;
	   END IF;
        END LOOP;
     END LOOP;
   END IF;
   END IF;
   END IF;
   END IF;
   END IF;
RETURN error_msg;
END;
$$;


ALTER FUNCTION public.createnewrosterwithsubandcourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: enrollments_count(text, bigint, bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION enrollments_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "EnrollCount" bigint) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
DECLARE
	selectstr text;
	wherestr text;
	result record;
BEGIN
	IF (_assessmentprogram = NULL OR _currentschoolyear = NULL) THEN
		RAISE EXCEPTION 'Please provide assessment program name and current scheool year';
	END IF;
		
	selectstr := 'SELECT (SELECT displayidentifier AS State FROM organization WHERE id =o.stateid),
				(SELECT abbreviatedname AS gradecourse FROM gradecourse WHERE id = en.currentGradeLevel),
				(SELECT abbreviatedname AS subject FROM contentarea WHERE id = cttsa.contentareaid),
				COUNT(DISTINCT en.id)  AS enrollmentcount 
			FROM enrollment en INNER JOIN student st ON st.id=en.studentid
				INNER JOIN enrollmenttesttypesubjectarea ets ON ets.enrollmentid=en.id
				INNER JOIN testtypesubjectarea ttsa ON ttsa.testtypeid=ets.testtypeid AND ttsa.subjectareaid=ets.subjectareaid 
				INNER JOIN contentareatesttypesubjectarea cttsa ON cttsa.testtypesubjectareaid=ttsa.id
				INNER JOIN organizationtreedetail o ON o.schoolid=en.attendanceschoolid ';
	wherestr := ' WHERE en.activeflag is true AND ets.activeflag is true
			AND (en.exitwithdrawaldate is null OR (en.exitwithdrawaldate < en.schoolentrydate)) and '''|| _assessmentprogram ||''' in (
				SELECT ap.abbreviatedname
				FROM assessmentprogram ap
					INNER JOIN studentassessmentprogram sap ON (sap.studentid = st.id and ap.id = sap.assessmentprogramid)
				WHERE sap.activeflag = true
	      	) and en.currentschoolyear = ' || _currentschoolyear;

	IF (_stataeid is not NULL) THEN
		wherestr := wherestr || ' AND o.stateid = ' ||_stataeid;
	END IF;
	IF (_contentareaid is not NULL) THEN
		wherestr := wherestr || ' AND cttsa.contentareaid = ' || _contentareaid;
	END IF;
	IF (_gradelevel is not NULL) THEN
		wherestr := wherestr || ' AND en.currentGradeLevel = ' || _gradelevel;
	END IF;
	
	selectstr := selectstr || wherestr || ' group by  o.stateid, cttsa.contentareaid, en.currentGradeLevel'
		|| ' order by state, gradecourse, subject';
	FOR result IN EXECUTE  selectstr LOOP
		RETURN QUERY SELECT result.State::text, result.gradecourse::text, result.subject::text, result.enrollmentcount::bigint;
	END LOOP;
END;
$$;


ALTER FUNCTION public.enrollments_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "EnrollCount" bigint) OWNER TO aart;

--
-- Name: exitstudent(character varying, character varying, character varying, numeric, date, bigint, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION exitstudent(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, exitreason numeric, exitdate date, schoolyear bigint, statedisplayidentifier character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
     studentEnrollemntRecord RECORD;
     stuTestsRecordsInprgsPenUnusedStatus RECORD;
     state_Id BIGINT;
     ayp_sch_id BIGINT;
     att_sch_id BIGINT;
     exitStuTestSecsStatus BIGINT;
     exitStuTestsStatus BIGINT;
     inProgressStuTestsStatus BIGINT;
     pendingStuTestsStatus BIGINT;
     unusedStuTestsStatus BIGINT;
     ceteSysAdminUserId BIGINT;
     error_msg TEXT;
     exitDate_cdt timestamp with time zone;
   BEGIN
   error_msg :='';
   exitDate_cdt:=((exitDate::timestamp) AT TIME ZONE 'CDT');
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)) or lower(trim(org.tree_schooldisplayidentifier))=lower(trim(ayp_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(statestudent_identifier,'NULL')||';State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL')||';OR AYP School:'||COALESCE(ayp_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE   
  	SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
  	SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
  	SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
  	SELECT INTO exitStuTestSecsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'exitclearunenrolled');
  	SELECT INTO exitStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'exitclearunenrolled');
  	SELECT INTO inProgressStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'inprogress');
  	SELECT INTO pendingStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'pending');
  	SELECT INTO unusedStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'unused');
  	SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
  	error_msg := '';
   IF((SELECT count(en.*) FROM enrollment en JOIN student stu ON stu.id = en.studentid AND en.currentschoolyear = schoolyear AND en.aypschoolid = ayp_sch_id AND en.attendanceschoolid = att_sch_id
           AND trim(stu.statestudentidentifier) = trim(statestudent_identifier) AND stu.stateid = state_Id) <= 0) THEN

        RAISE NOTICE 'Student % is not found with ayp %, attendance %  in school year %', statestudent_identifier, ayp_sch_displayidentifier, att_sch_displayidentifier, schoolyear;
        error_msg := '<error>'||'Studentid:'||COALESCE(statestudent_identifier,'NULL')||';  not found with ayp:'||COALESCE(ayp_sch_displayidentifier,'NULL')||';attendance:'||COALESCE(att_sch_displayidentifier,'NULL')||';in school year:'||CAST(COALESCE(schoolyear,0) AS TEXT);
    ELSE 	   
      FOR studentEnrollemntRecord IN (SELECT stu.statestudentidentifier,stu.stateid, en.* FROM student stu JOIN enrollment en ON en.studentid = stu.id
  					WHERE lower(trim(stu.statestudentidentifier)) = lower(trim(statestudent_identifier))
  					AND stu.stateid = state_Id and en.currentschoolyear = schoolyear
  					AND en.aypschoolid = ayp_sch_id and en.attendanceschoolid = att_sch_id)
       LOOP
           IF (studentEnrollemntRecord.schoolentrydate <= exitDate_cdt) THEN
             UPDATE enrollment SET exitwithdrawaldate = exitDate_cdt, activeflag = false, exitwithdrawaltype = exitReason, modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = studentEnrollemntRecord.id;

             RAISE NOTICE 'Updated the enrollment record with id: %', studentEnrollemntRecord.id;
             error_msg := '<success> Updated the enrollment record with id:'|| studentEnrollemntRecord.id;

            INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT', studentEnrollemntRecord.id, ceteSysAdminUserId, now(),
  		'EXIT_STUDENT', ('{"studentId":'|| studentEnrollemntRecord.studentid || ',"stateId":' ||  studentEnrollemntRecord.stateid
  				|| ',"stateStudentIdentifier":"' || studentEnrollemntRecord.statestudentidentifier
  				|| '","aypSchool":' || studentEnrollemntRecord.aypschoolid || ',"attendanceSchoolId":'|| studentEnrollemntRecord.attendanceschoolid
  				|| ',"exitWithdrawalDate":"' || exitDate || '","exitReason":"' || exitReason ||  '"}')::json);



            FOR stuTestsRecordsInprgsPenUnusedStatus IN (SELECT  st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
                  FROM studentstests st JOIN testsession ts on st.testsessionid = ts.id  and st.activeflag=true  and ts.activeflag=true JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
                   WHERE st.activeflag=true AND st.enrollmentid = studentEnrollemntRecord.id AND (otw.effectivedate <= now() AND now() <= otw.expirydate)
                   AND st.status in (inProgressStuTestsStatus, pendingStuTestsStatus,unusedStuTestsStatus)) LOOP

  		PERFORM inActivateStuTestsTrackerITITestsessions(studentTestsId := stuTestsRecordsInprgsPenUnusedStatus.id , inActiveStuTestSecStatusId := exitStuTestSecsStatus,
  		      inActiveStuTestStatusId := exitStuTestsStatus, testsession_Id := stuTestsRecordsInprgsPenUnusedStatus.testsessionid, student_Id := stuTestsRecordsInprgsPenUnusedStatus.studentid);


            END LOOP;
            UPDATE ititestsessionhistory SET activeflag=false,modifieddate=now(),modifieduser=ceteSysAdminUserId,status=exitStuTestsStatus
  		       WHERE studentenrlrosterid IN (SELECT id FROM enrollmentsrosters WHERE enrollmentid = studentEnrollemntRecord.id)
                         AND status = (SELECT cat.id FROM category cat, categorytype ct WHERE ct.id = cat.categorytypeid AND cat.categorycode='pending' AND ct.typecode = 'STUDENT_TEST_STATUS')
                         AND activeflag IS true;
           ELSE
             RAISE NOTICE 'Exit withdrawal date(%) is less than the school entry date(%)', exitDate, studentEnrollemntRecord.schoolentrydate;
             error_msg := '<error>' || 'Exit withdrawal date:' ||  cast(coalesce(exitDate,'01/01/1900') as text) ||';  less than the school entry date:' || cast(coalesce(studentEnrollemntRecord.schoolentrydate,'01/01/1900') as text) ;
         END IF;
     END LOOP;
     END IF;
     END IF;
     RETURN error_msg;
     END;
  $$;


ALTER FUNCTION public.exitstudent(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, exitreason numeric, exitdate date, schoolyear bigint, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: explode_array(anyarray); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION explode_array(in_array anyarray) RETURNS SETOF anyelement
    LANGUAGE sql IMMUTABLE
    AS $_$
    select ($1)[s] from generate_series(1,array_upper($1, 1)) as s;
$_$;


ALTER FUNCTION public.explode_array(in_array anyarray) OWNER TO aart;

--
-- Name: generate_student_password(); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION generate_student_password() RETURNS text
    LANGUAGE plpgsql STRICT
    AS $$
DECLARE
	MAX_PASSWORD_LENGTH INTEGER := 5;
	password TEXT;
	chars_needed INTEGER;
	i INTEGER;
BEGIN
	SELECT word
	FROM studentpassword
	WHERE char_length(word) <= MAX_PASSWORD_LENGTH
	ORDER BY random()
	LIMIT 1
	INTO password;

	SELECT MAX_PASSWORD_LENGTH - char_length(password) INTO chars_needed;
	
	IF chars_needed > 0 THEN
		SELECT concat(
			password,
			(select get_random_number(
				(select (10 ^ (chars_needed - 1))::INTEGER), -- lowest number with # digits = chars_needed
				(select (10 ^ chars_needed)::INTEGER)))) -- lowest number with # digits = chars_needed + 1
		INTO password;
	END IF;
	
	RETURN password;
END;
$$;


ALTER FUNCTION public.generate_student_password() OWNER TO aart;

--
-- Name: get_adaptive_subsections(bigint, bigint, bigint, integer, integer, integer, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION get_adaptive_subsections(_testid bigint, _testpartid bigint, _testsectioncontainerid bigint, _thetaindex integer, _selectednumberofsubsections integer, _administratednumberofsubsections integer, _studentstestid bigint) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
DECLARE
    ref refcursor;  
BEGIN
  
  --RAISE INFO 'testid %, testpartid %, _testsectioncontainerid %, _thetaindex %, _selectednumberofsubsections %, _administratednumberofsubsections %,  _studentstestid %',_testid, _testpartid, _testsectioncontainerid, _thetaindex, _selectednumberofsubsections, _administratednumberofsubsections,  _studentstestid;  
                
  OPEN ref FOR SELECT *
		FROM
		  (SELECT availablesubsections.*
		   FROM
		     (SELECT tsc.id AS testsectioncontainerid,
			     ts.id AS sectionid,
			     tss.testsectioncontainerthetanodeid,
			     tv.id AS taskvariantid
		      FROM test t
		      JOIN testpart tp ON tp.testid=t.id
		      JOIN testsectioncontainer tsc ON tsc.id=tp.testsectioncontainerid
		      JOIN testsection ts ON ts.testsectioncontainerid = tsc.id
		      JOIN testselectionstatistic tss ON tss.testsectionid = ts.id
		      JOIN testsectioncontainerthetanode tstn ON tstn.id= tss.testsectioncontainerthetanodeid
		      JOIN testsectionstaskvariants tstv ON tstv.testsectionid = ts.id
		      JOIN taskvariant tv ON tv.id = tstv.taskvariantid
		      WHERE t.id = _testid
			AND tp.id = _testpartid
			AND tsc.id = _testsectioncontainerid
			AND tstn.index = _thetaindex
			AND tv.id NOT IN
			  (SELECT itv.id
			   FROM studentsadaptivetestsections sat
			   JOIN testsectionstaskvariants itstv ON itstv.testsectionid = sat.testsectionid
			   JOIN taskvariant itv ON itv.id = itstv.taskvariantid
			   WHERE sat.studentstestid=_studentstestid)
		      GROUP BY tsc.id ,
			       ts.id,
			       tv.id,
			       tss.testsectioncontainerthetanodeid) availablesubsections
		   JOIN testselectionstatistic tss ON tss.testsectionid = availablesubsections.sectionid
		   AND tss.testsectioncontainerthetanodeid = availablesubsections.testsectioncontainerthetanodeid
		   ORDER BY selectionstatisticvalue DESC LIMIT _selectednumberofsubsections) selectedsubsections
		ORDER BY random() LIMIT _administratednumberofsubsections;

     RETURN ref; 
 
END;
$$;


ALTER FUNCTION public.get_adaptive_subsections(_testid bigint, _testpartid bigint, _testsectioncontainerid bigint, _thetaindex integer, _selectednumberofsubsections integer, _administratednumberofsubsections integer, _studentstestid bigint) OWNER TO aart;

--
-- Name: get_adaptive_test(bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION get_adaptive_test(_testid bigint, _studentstestid bigint) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    subsectioncursor refcursor;
    studentadaptiveteststatusrec record; 
    adaptiveTestRecord record;    
    testcontainterthetatanoderec record;    
    testsectioncontainerid bigint;
    subsectionid bigint; 
    testsectioncontainerthetanodeid bigint;
    taskvariantid bigint;
    testpartnumber integer;
    thetavalue integer;
    thetaindex integer;
    testinprogress boolean;
    temptestsectioncontainernumber integer; 
    initialthetanodevaluesarray integer ARRAY;
    initialthetanodevaluesstring text;
    testcontainterconstructrec record;
BEGIN
  testpartnumber := 0;
  testinprogress := false; 
  temptestsectioncontainernumber := -1;
  FOR studentadaptiveteststatusrec IN select * from studentadaptivetestthetastatus where studentstestid=_studentstestid and testpartcomplete=false order by testpartnumber LIMIT 1
  LOOP   
    testpartnumber := studentadaptiveteststatusrec.testpartnumber;
    testinprogress := true; 
  END LOOP; 
  --RAISE INFO 'testpartnumber %     thetavalue %      testinprogress %', testpartnumber, thetavalue, testinprogress;   
  IF NOT testinprogress THEN     
	  FOR studentadaptiveteststatusrec IN select * from studentadaptivetestthetastatus where studentstestid=_studentstestid and testpartcomplete=true order by testpartnumber desc LIMIT 1
	      LOOP   
		testpartnumber := studentadaptiveteststatusrec.testpartnumber; 
	  END LOOP;
	  testpartnumber := testpartnumber + 1;  
	  FOR adaptiveTestRecord IN     
		     SELECT t.id as testid,
				   tp.id as testpartid,
				   tp.partnumber as testparnumber,
				   tp.selectednumberofsubsections as selectednumberofsubsections,
				   tp.administratednumberofsubsections as administratednumberofsubsections,
				   tsc.id as testsectioncontainerid,
				   tsc.sectionnumber as testsectioncontainernumber,
				   tc.constructnumber as testconstructnumber,
				   tc.thetanodevalue as testsectioncontainerthetanodevalue,
				   tscc.itemdiscriminationparametername,
				   tscc.itemdiscriminationparameterindex,
				   tscc.thetanodevalueindex 
			    FROM test t
			    JOIN testpart tp ON tp.testid=t.id 
			    JOIN testsectioncontainer tsc ON tsc.id=tp.testsectioncontainerid
			    JOIN testconstruct tc ON tc.testid=t.id
			    JOIN testsectioncontainerconstruct tscc ON tscc.testconstructid = tc.id and tscc.testsectioncontainerid = tsc.id
		    WHERE t.id = _testid 
		      AND tp.partnumber = testpartnumber  order by testsectioncontainernumber, thetanodevalueindex
	     LOOP 
	     	      IF temptestsectioncontainernumber <> adaptiveTestRecord.testsectioncontainernumber THEN 
			      temptestsectioncontainernumber := adaptiveTestRecord.testsectioncontainernumber;
			      initialthetanodevaluesstring := '';
			      thetaindex := -1;
			      FOR studentadaptiveteststatusrec IN select * from studentadaptivetestthetastatus sat where sat.studentstestid=_studentstestid and sat.testpartcomplete=true and sat.testsectioncontainernumber = adaptiveTestRecord.testsectioncontainernumber order by testpartnumber desc LIMIT 1
			      LOOP   
				thetaindex := studentadaptiveteststatusrec.interimtheta; 
			      END LOOP; 
			      IF thetaindex < 0 THEN
				      FOR testcontainterconstructrec IN select * from testsectioncontainerconstruct tscct join testconstruct tct on tscct.testconstructid = tct.id where tscct.testsectioncontainerid = adaptiveTestRecord.testsectioncontainerid
				      LOOP   
					--array_append(initialthetanodevaluesstring, testcontainterconstructrec.thetanodevalue); 
					--RAISE INFO 'testcontainterconstructrec.thetanodevalueindex %', testcontainterconstructrec.thetanodevalueindex;
					IF testcontainterconstructrec.thetanodevalueindex = 1 THEN
						initialthetanodevaluesstring := initialthetanodevaluesstring || ' AND ' || 'tsct.value1 = ' || testcontainterconstructrec.thetanodevalue;
					ELSIF testcontainterconstructrec.thetanodevalueindex = 2 THEN
						initialthetanodevaluesstring := initialthetanodevaluesstring || ' AND ' || 'tsct.value2 = ' || testcontainterconstructrec.thetanodevalue;
					ELSIF testcontainterconstructrec.thetanodevalueindex = 3 THEN
						initialthetanodevaluesstring := initialthetanodevaluesstring || ' AND ' || 'tsct.value3 = ' || testcontainterconstructrec.thetanodevalue;
					ELSIF testcontainterconstructrec.thetanodevalueindex = 4 THEN
						initialthetanodevaluesstring := initialthetanodevaluesstring || ' AND ' || 'tsct.value4 = ' || testcontainterconstructrec.thetanodevalue;
					ELSIF testcontainterconstructrec.thetanodevalueindex = 5 THEN
						initialthetanodevaluesstring := initialthetanodevaluesstring || ' AND ' || 'tsct.value5 = ' || testcontainterconstructrec.thetanodevalue;
					ELSIF testcontainterconstructrec.thetanodevalueindex = 6 THEN
						initialthetanodevaluesstring := initialthetanodevaluesstring || ' AND' || 'tsct.value6 = ' || testcontainterconstructrec.thetanodevalue;
					END IF;
				      END LOOP; 
				      --RAISE INFO 'initialthetanodevaluesstring %', initialthetanodevaluesstring;
				      FOR testcontainterthetatanoderec IN EXECUTE 'select * from testsectioncontainerthetanode tsct where tsct.testsectioncontainerid = ' || adaptiveTestRecord.testsectioncontainerid || ' ' || initialthetanodevaluesstring || ' LIMIT 1'
				      LOOP   
					thetaindex := testcontainterthetatanoderec.index; 
				      END LOOP; 
			      END IF;
			     
			      --RAISE INFO 'testid %     testpartid %     testsectioncontainerid %      testcontainerthetaindex %       selectednumberofsubsections %      administratednumberofsubsections %', adaptiveTestRecord.testid, adaptiveTestRecord.testpartid, adaptiveTestRecord.testsectioncontainerid, thetaindex, adaptiveTestRecord.selectednumberofsubsections, adaptiveTestRecord.administratednumberofsubsections;  
			      subsectioncursor = get_adaptive_subsections(adaptiveTestRecord.testid , adaptiveTestRecord.testpartid, adaptiveTestRecord.testsectioncontainerid, thetaindex, adaptiveTestRecord.selectednumberofsubsections, adaptiveTestRecord.administratednumberofsubsections, _studentstestid);  
			      LOOP
				FETCH subsectioncursor INTO testsectioncontainerid, subsectionid, testsectioncontainerthetanodeid, taskvariantid;
				EXIT WHEN NOT FOUND;
				--RAISE INFO 'testsectioncontainerid %   subsectionid % testsectioncontainerthetanodeid %   taskvariantid %', testsectioncontainerid, subsectionid, testsectioncontainerthetanodeid, taskvariantid; 
				EXECUTE 'insert into studentsadaptivetestsections(studentstestid, testpartid, testsectioncontainerid, testsectionid, testsectioncontainerthetanodeid, taskvariantid)values(' || _studentstestid || ',' || adaptiveTestRecord.testpartid  || ',' || testsectioncontainerid  || ',' || subsectionid || ',' || testsectioncontainerthetanodeid || ',' || taskvariantid || ')';
			      END LOOP; 
			      CLOSE subsectioncursor; 
			      EXECUTE 'insert into studentadaptivetestthetastatus(studentstestid, testpartid, testpartnumber, testsectioncontainerid, testsectioncontainernumber, initialtheta, interimtheta, testpartcomplete)values(' || _studentstestid || ',' || adaptiveTestRecord.testpartid  || ',' || testpartnumber  || ',' || adaptiveTestRecord.testsectioncontainerid  || ',' || adaptiveTestRecord.testsectioncontainernumber || ',' || thetaindex ||',0 ,false)';		      
		      END IF;
	     END LOOP; 
     END IF;

     RETURN testpartnumber;
 
END;
$$;


ALTER FUNCTION public.get_adaptive_test(_testid bigint, _studentstestid bigint) OWNER TO aart;

--
-- Name: get_random_number(integer, integer); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION get_random_number(integer, integer) RETURNS integer
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	start_int ALIAS FOR $1;
	end_int ALIAS FOR $2;
BEGIN
	RETURN trunc(random() * (end_int - start_int) + start_int);
END;
$_$;


ALTER FUNCTION public.get_random_number(integer, integer) OWNER TO aart;

--
-- Name: getstudentassessmentprogram(bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION getstudentassessmentprogram(sid bigint, schoolyear bigint) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
	finalid BIGINT;
	apnames text[];
BEGIN
	SELECT array_agg(ap.abbreviatedname) into apnames from assessmentprogram ap
		inner join studentassessmentprogram sap on ap.id = sap.assessmentprogramid
		where sap.studentid = sid
		and ap.activeflag = true
		and sap.activeflag = true;
	
		IF(select 'DLM' = ANY(apnames)) THEN
			finalid = (select id from assessmentprogram where abbreviatedname = 'DLM' and activeflag is true);	
		
		ELSIF(select 'KAP' = ANY(apnames)) THEN
			finalid = (select id from assessmentprogram where abbreviatedname = 'KAP' and activeflag is true);
		
		ELSIF(select 'AMP' = ANY(apnames)) THEN
			finalid = (select id from assessmentprogram where abbreviatedname = 'AMP' and activeflag is true);
			
		ELSIF(select 'CPASS' = ANY(apnames)) THEN
			finalid = (select id from assessmentprogram where abbreviatedname = 'CPASS' and activeflag is true);

		END IF;
		
	-- if we didn't find one, then we can infer one from the student's enrollment
	IF (finalid IS NULL) THEN
		finalid = (select assessmentprogramid from orgassessmentprogram oap join assessmentprogram ap on ap.id = oap.assessmentprogramid 
		where oap.organizationid =(select id from organization_parent((select attendanceschoolid from enrollment e where e.currentschoolyear=schoolyear and e.studentid=sid limit 1)) op where op.organizationtypeid=2)
		and ap.abbreviatedname in ('KAP', 'AMP' , 'CPASS' , 'ARMM') limit 1);
	END IF;
	
	RETURN finalid;
	END;
$$;


ALTER FUNCTION public.getstudentassessmentprogram(sid bigint, schoolyear bigint) OWNER TO aart;

--
-- Name: identify_breached_testforms(text[], text, text, text, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) RETURNS SETOF record
    LANGUAGE plpgsql STRICT
    AS $$
DECLARE
	stdid bigint;
	stcount integer := array_length(_statestudentidentifiers, 1);
	ind integer := 1;
	enrollid bigint;
	testsession_id bigint;
	strecord RECORD;
BEGIN
	-- get testsessionid
	SELECT id INTO testsession_id FROM testsession WHERE name ilike _breachedtestsession and activeflag is true and stageid = (SELECT id FROM stage WHERE code LIKE _stage) and schoolyear = _currentschoolyear;
	
	IF (_statestudentidentifiers IS NOT NULL AND stcount > 0) THEN
		WHILE ind <= stcount LOOP
			 SELECT id INTO stdid FROM student WHERE statestudentidentifier iLIKE _statestudentidentifiers[ind] and activeflag is true;
			 SELECT id INTO enrollid FROM enrollment WHERE studentid = stdid and currentgradelevel in (select id from gradecourse where abbreviatedname ilike _grade) and activeflag is true;
			 FOR strecord IN (SELECT t.externalid as testid, t.testname as testname, tc.externalid as testcollectionid, tc.name as testcollectionname FROM studentstests st
				JOIN testcollection tc ON tc.id = st.testcollectionid
				JOIN test t ON t.id = st.testid WHERE st.studentid = stdid and st.activeflag is true 
				and st.status IN ( SELECT category.id FROM category JOIN public.categorytype ON category.categorytypeid = categorytype.id 
							WHERE categorytype.typecode = 'STUDENT_TEST_STATUS'
							and category.categorycode in('unused','inprogress','complete')
				and testsessionid = testsession_id and enrollmentid = enrollid))
			LOOP
				 RAISE INFO 'StudentIdentifier: % , BreachedFormId: % , BreachedFormName:% ', _statestudentidentifiers[ind], strecord.testid, strecord.testname;
				 RETURN QUERY SELECT _statestudentidentifiers[ind], strecord.testid, strecord.testname::text, strecord.testcollectionid, strecord.testcollectionname::text;
			END LOOP;
			ind = ind + 1;
		END LOOP;
	END IF;
END;
$$;


ALTER FUNCTION public.identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) OWNER TO aart;

--
-- Name: identify_breached_testforms(text[], text, text, text, bigint, text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, _state text, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) RETURNS SETOF record
    LANGUAGE plpgsql STRICT
    AS $$
DECLARE
	stdid bigint;
	stcount integer := array_length(_statestudentidentifiers, 1);
	ind integer := 1;
	enrollid bigint;
	testsession_id bigint;
	strecord RECORD;
BEGIN
	-- get testsessionid
	SELECT ts.id INTO testsession_id FROM testsession ts 
		JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.effectivedate <= now() and otw.expirydate > now() and otw.activeflag is true
		WHERE ts.name ilike _breachedtestsession and ts.activeflag is true and ts.stageid = (SELECT id FROM stage WHERE code LIKE _stage) and ts.schoolyear = _currentschoolyear;
	
	IF (testsession_id IS NULL) THEN
		RAISE NOTICE 'No active testsession found with the given information - please check name, status and active operational test window';
		RETURN;
	END IF;
	
	IF (_statestudentidentifiers IS NOT NULL AND stcount > 0) THEN
		WHILE ind <= stcount LOOP
			 SELECT id INTO stdid FROM student WHERE statestudentidentifier iLIKE _statestudentidentifiers[ind] and activeflag is true and stateid is not null and stateid = (select id from organization where displayidentifier like _state);
			 SELECT id INTO enrollid FROM enrollment WHERE studentid = stdid and currentgradelevel in (select id from gradecourse where abbreviatedname ilike _grade) and activeflag is true;
			 FOR strecord IN (SELECT t.externalid as testid, t.testname as testname, tc.externalid as testcollectionid, tc.name as testcollectionname FROM studentstests st
				JOIN testcollection tc ON tc.id = st.testcollectionid
				JOIN test t ON t.id = st.testid WHERE st.studentid = stdid and st.activeflag is true 
				and st.status IN ( SELECT category.id FROM category JOIN public.categorytype ON category.categorytypeid = categorytype.id 
							WHERE categorytype.typecode = 'STUDENT_TEST_STATUS'
							and category.categorycode in('unused','inprogress','complete')
				and testsessionid = testsession_id and enrollmentid = enrollid))
			LOOP
				 RAISE INFO 'StudentIdentifier: % , BreachedFormId: % , BreachedFormName:% ', _statestudentidentifiers[ind], strecord.testid, strecord.testname;
				 RETURN QUERY SELECT _statestudentidentifiers[ind], strecord.testid, strecord.testname::text, strecord.testcollectionid, strecord.testcollectionname::text;
			END LOOP;
			ind = ind + 1;
		END LOOP;
	END IF;
END;
$$;


ALTER FUNCTION public.identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, _state text, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) OWNER TO aart;

--
-- Name: inactivatestudenttestfromoldschool(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION inactivatestudenttestfromoldschool(old_sch_studentstestid bigint) RETURNS text
    LANGUAGE plpgsql
    AS $$

DECLARE 

DECLARE

cetesysadminid BIGINT;
update_count INTEGER;
msg TEXT;


BEGIN

     SELECT id FROM aartuser WHERE username = 'cetesysadmin' INTO cetesysadminid;

     msg := '';   

     WITH inactivestudentsresponsescount AS(UPDATE studentsresponses SET activeflag = false, modifieddate = now(), modifieduser = cetesysadminid 
           WHERE studentstestsid = old_sch_studentstestid RETURNING 1) SELECT count(*) FROM inactivestudentsresponsescount INTO update_count;

     msg := msg || ' Inactivated studentsreponses count is : ' || update_count;
                               
     WITH inactivestudenttestsectionscount AS(UPDATE studentstestsections SET activeflag = false, modifieddate = now(), modifieduser = cetesysadminid 
          WHERE studentstestid = old_sch_studentstestid RETURNING 1) SELECT count(*) FROM inactivestudenttestsectionscount INTO update_count;

     msg := msg || ' Inactivated studentstestsections count is : ' || update_count;  
                              
     WITH inactivestudentstests AS (UPDATE studentstests SET activeflag = false, modifieddate = now(), modifieduser = cetesysadminid 
          WHERE id = old_sch_studentstestid RETURNING 1) SELECT count(*) FROM inactivestudentstests INTO update_count;

     msg := msg || ' Inactivated studentstests count is : ' || update_count;


RETURN msg;
END;
$$;


ALTER FUNCTION public.inactivatestudenttestfromoldschool(old_sch_studentstestid bigint) OWNER TO aart;

--
-- Name: inactivatestuteststrackerititestsessions(bigint, bigint, bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION inactivatestuteststrackerititestsessions(studenttestsid bigint, inactivestutestsecstatusid bigint, inactivestuteststatusid bigint, testsession_id bigint, student_id bigint) RETURNS void
    LANGUAGE plpgsql
    AS $$
   DECLARE
     ceteSysAdminUserId BIGINT;

BEGIN
  SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
  UPDATE studentstestsections SET activeflag=false,modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId,statusid=inActiveStuTestSecStatusId WHERE studentstestid=studentTestsId;

  RAISE NOTICE 'Updated the studentstestsections records with studentstetsid: %', studentTestsId;

  UPDATE studentstests SET activeflag=false,modifieddate=CURRENT_TIMESTAMP,modifieduser=ceteSysAdminUserId,status=inActiveStuTestSecStatusId WHERE id=studentTestsId;

  RAISE NOTICE 'Updated the studentstests records with id: %', studentTestsId;

  IF ((SELECT count(*) FROM studentstests WHERE testsessionid = testsession_Id) = 1) THEN
UPDATE testsession SET activeflag=false,modifieddate=CURRENT_TIMESTAMP,modifieduser=ceteSysAdminUserId,status=inActiveStuTestSecStatusId WHERE id=testsession_Id;

RAISE NOTICE 'Updated the testsession records with id: %', testsession_Id;
          END IF;

  UPDATE studenttrackerband stb SET testsessionid=null,modifieddate=CURRENT_TIMESTAMP,modifieduser=ceteSysAdminUserId FROM studenttracker st 
       WHERE st.id=stb.studenttrackerid AND st.studentid=student_Id and stb.testsessionid=testsession_Id;
                
       
  UPDATE ititestsessionhistory SET activeflag=false,modifieddate=CURRENT_TIMESTAMP,modifieduser=ceteSysAdminUserId,status=inActiveStuTestSecStatusId
WHERE studentid=student_Id AND testsessionid=testsession_Id;  
        END;

$$;


ALTER FUNCTION public.inactivatestuteststrackerititestsessions(studenttestsid bigint, inactivestutestsecstatusid bigint, inactivestuteststatusid bigint, testsession_id bigint, student_id bigint) OWNER TO aart;

--
-- Name: insert_adaptive_testsection(bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION insert_adaptive_testsection(_testpartid bigint, _studentstestid bigint) RETURNS integer
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF (SELECT id from studentstestsections WHERE testpartid=_testpartid 
		AND studentstestid=_studentstestid AND activeflag=true) IS NULL THEN
		INSERT INTO studentstestsections(studentstestid, testpartid, statusid) 
			VALUES (_studentstestid, _testpartid, (SELECT category.id FROM public.category 
				JOIN public.categorytype ON category.categorytypeid = categorytype.id
				WHERE categorytype.typecode = 'STUDENT_TESTSECTION_STATUS' 
				AND category.categorycode = 'unused'));
	END IF; 
	RETURN 1;
END;
$$;


ALTER FUNCTION public.insert_adaptive_testsection(_testpartid bigint, _studentstestid bigint) OWNER TO aart;

--
-- Name: insert_lockdown_date(text, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION insert_lockdown_date(statedisplayidentifier text, fromdate timestamp with time zone, todate timestamp with time zone) RETURNS void
    LANGUAGE plpgsql
    AS $$ 
DECLARE
    CROW RECORD;
    orgid bigint;
    adminuser bigint;
BEGIN
	orgid:= (select id from organization where displayidentifier=statedisplayidentifier and activeflag is true
			and organizationtypeid=(select id from organizationtype where typecode='ST' and activeflag is true));
	adminuser := (select id from aartuser where email='cete@ku.edu');
	FOR CROW IN (SELECT id FROM groupauthorities where authorityid in (select id from authorities 
		where authority in ( 'PERM_ENRL_UPLOAD', 'PERM_ROSTERRECORD_CREATE', 'PERM_ROSTERRECORD_UPLOAD', 'PERM_ROSTERRECORD_MODIFY', 
		'PERM_EXIT_STUDENT', 'PERM_TRANSFER_STUDENT','PERM_STUDENTRECORD_MODIFY') and activeflag is true) and activeflag is true) LOOP
		INSERT INTO groupauthoritylockdownperiod(organizationid, groupauthorityid, fromdate, todate, createduser, 
					createddate, modifieduser, modifieddate, activeflag)
			VALUES (orgid, CROW.id, fromdate, todate, adminuser, now(), adminuser, now(), true);
	END LOOP;
END;
$$;


ALTER FUNCTION public.insert_lockdown_date(statedisplayidentifier text, fromdate timestamp with time zone, todate timestamp with time zone) OWNER TO aart;

--
-- Name: move_to_newtest(bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION move_to_newtest(epnewtestid bigint, epoldtestid bigint) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE 
studentstests_row record;
studentstestsections_row record;
counter bigint;
BEGIN
counter = 0;
-- This function for fixing KAP tests
-- Logic implementation for - Test taker has registered for the test but has not yet started it. We would like the test taker to get the new, updated form with all items corrected.
FOR studentstests_row IN (SELECT st.* FROM studentstests st JOIN category c ON st.status = c.id 
WHERE testid = epoldtestid AND c.categorycode = 'unused' 
AND categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS'))
LOOP
counter = counter+1;
--Statement to Update studentstests table testid column with newly published test id 
UPDATE studentstests SET testid = epnewtestid WHERE id = studentstests_row.id;

--Statement to Update studentstestsections table
FOR studentstestsections_row IN (SELECT sts.id,oldts.id as oldtsid,newts.id as newtsid 
FROM studentstestsections sts 
JOIN testsection oldts on sts.testsectionid = oldts.id 
JOIN testsection newts on newts.externalid=oldts.externalid 
AND newts.testid=epnewtestid
WHERE studentstestid = studentstests_row.id)
LOOP
UPDATE studentstestsections SET testsectionid = studentstestsections_row.newtsid 
WHERE id = studentstestsections_row.id;
END LOOP;
END LOOP;
RAISE INFO 'UPDATED % studentstests', counter;
RETURN counter;
END;
$$;


ALTER FUNCTION public.move_to_newtest(epnewtestid bigint, epoldtestid bigint) OWNER TO aart;

--
-- Name: moveandinactivatestudentstestsfromoldschooltonewschool(bigint, bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION moveandinactivatestudentstestsfromoldschooltonewschool(correct_enrollmentid bigint, correct_sch_testsessionid bigint, correct_sch_stuentstestid bigint, old_sch_studentstestid bigint) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE

cetesysadminid BIGINT;
update_count INTEGER;
msg TEXT;

BEGIN

    SELECT id FROM aartuser WHERE username = 'cetesysadmin' INTO cetesysadminid;

    msg := '';     

    WITH updateedStudentstestsCount AS(UPDATE studentstests SET enrollmentid = correct_enrollmentid, modifieddate = now(), modifieduser = cetesysadminid, testsessionid = correct_sch_testsessionid
               WHERE id = old_sch_studentstestid RETURNING 1) SELECT count(*) FROM updateedStudentstestsCount INTO update_count;
               
    msg := msg || 'Updated the testsession on  studentstestsid ' || old_sch_studentstestid || ' to ' || correct_sch_testsessionid
                                         || ' Total records updated: ' || update_count || '   ';
                                                    
    WITH studentresponsecount AS(UPDATE studentsresponses SET activeflag = false, modifieddate = now(), modifieduser = cetesysadminid 
             WHERE studentstestsid = correct_sch_stuentstestid RETURNING 1) SELECT count(*) FROM studentresponsecount INTO update_count;

    msg := msg || ' Inactivated the studentsresponses with studentstestsid ' || correct_sch_stuentstestid || ' Total studentsresponses inactivated: ' || update_count || ' ';


    WITH studentstestsectionscount AS(UPDATE studentstestsections SET activeflag = false, modifieddate = now(), modifieduser = cetesysadminid 
           WHERE studentstestid = correct_sch_stuentstestid RETURNING 1) SELECT count(*) FROM studentstestsectionscount INTO update_count;

    msg := msg || ' Inactivated the studentstestsections with studentstestsid ' || correct_sch_stuentstestid || ' Total studentstestsections inactivated: ' || update_count || ' ';
                              
    WITH stuentstestscount AS(UPDATE studentstests SET activeflag = false, modifieddate = now(), modifieduser = cetesysadminid 
          WHERE id = correct_sch_stuentstestid RETURNING 1) SELECT count(*) FROM stuentstestscount INTO update_count;

    msg := msg || ' Inactivated the studentstests with studentstestsid ' || correct_sch_stuentstestid || ' Total studentstests inactivated: ' || update_count || ' ';

RETURN msg;

END;
$$;


ALTER FUNCTION public.moveandinactivatestudentstestsfromoldschooltonewschool(correct_enrollmentid bigint, correct_sch_testsessionid bigint, correct_sch_stuentstestid bigint, old_sch_studentstestid bigint) OWNER TO aart;

--
-- Name: movecompletedtestsandresetstwithcourse(bigint, bigint, bigint, bigint, bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION movecompletedtestsandresetstwithcourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, course_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) RETURNS void
    LANGUAGE plpgsql
    AS $$
   DECLARE
   completed_statusId BIGINT;     
   existingStudentRosters RECORD;
   existingCompletedTestSessions RECORD;
   existingInCompleteAndInProgressTestsessions RECORD;   
   unused_statusId BIGINT;
   inProgress_statusId BIGINT;
   ceteSysAdminUserId BIGINT;
   latest_studentTracker_TestStatus BIGINT;
   roster_unEnrolled_TestStatus BIGINT;
   roster_unEnrolled_TestSecStatus BIGINT;
   studentTest_id BIGINT;
   studentTracker_Record RECORD;
   
 BEGIN
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
   SELECT INTO completed_statusId (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'complete');   
   SELECT INTO unused_statusId(SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'unused');
   SELECT INTO inProgress_statusId(SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'inprogress');
   SELECT INTO roster_unEnrolled_TestStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO roster_unEnrolled_TestSecStatus(SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'rosterunenrolled');
   
   FOR existingStudentRosters IN(SELECT enrl.* FROM enrollmentsrosters enrl JOIN roster r ON r.id = enrl.rosterid WHERE enrl.enrollmentid = enrollment_id and enrl.rosterid != new_roster_id
     and r.attendanceschoolid = attendance_schId AND r.statesubjectareaid = subjectArea_id AND r.currentschoolyear = school_year AND r.statecoursesid = course_Id) LOOP
      
 IF ((SELECT count(st.*) FROM testsession ts JOIN studentstests st ON st.testsessionid = ts.id WHERE st.enrollmentid = enrollment_id AND ts.rosterid = existingStudentRosters.rosterid 
                AND st.status =  completed_statusId AND st.activeflag IS TRUE and ts.source in ('BATCHAUTO', 'MABATCH', 'FIXBATCH')) > 0) 
                   THEN

                  FOR existingCompletedTestSessions IN (SELECT ts.* FROM testsession ts JOIN studentstests st ON st.testsessionid = ts.id WHERE st.enrollmentid = enrollment_id AND ts.rosterid = existingStudentRosters.rosterid
                                   AND st.status =  completed_statusId AND st.activeflag IS TRUE and ts.source in ('BATCHAUTO', 'MABATCH', 'FIXBATCH')) LOOP 
                                      
                         UPDATE testsession SET rosterid = new_roster_id, modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = existingCompletedTestSessions.id;                                                       

                          RAISE NOTICE 'For studentID: %, Completed testsessionId % is moved from rosterId: % to new rosterId: %', student_id, existingCompletedTestSessions.id, existingStudentRosters.rosterid, new_roster_id;
                                                            
                   END LOOP;                                        
           END IF;                 

        select st.id from studentstests st join (select stb.id, stb.testsessionid from studenttrackerband stb join studenttracker stracker on stracker.id = stb.studenttrackerid join testsession ts on ts.id = stb.testsessionid
                          WHERE stracker.studentid = student_id and ts.attendanceschoolid = attendance_schId and stb.activeflag is true and stracker.schoolyear = school_year 
                          and ((stracker.courseid = course_Id  and stracker.contentareaid = subjectArea_id ) or (stracker.courseid = course_Id  and stracker.contentareaid is null))order by stb.id desc limit 1) as strackerDetilas
                on strackerDetilas.testsessionid = st.testsessionid
                and st.activeflag is true and st.studentid = student_id and st.enrollmentid = enrollment_id INTO studentTest_id;

        IF ( studentTest_id is not null) 
        THEN               
          select status from studentstests where id = studentTest_id INTO latest_studentTracker_TestStatus;
                
         
          IF (latest_studentTracker_TestStatus != completed_statusId) THEN                 

            FOR studentTracker_Record IN (SELECT stb.id, stb.testsessionid,stb.studenttrackerid from studenttrackerband stb join studenttracker stracker on stracker.id = stb.studenttrackerid join testsession ts on ts.id = stb.testsessionid
                          WHERE stracker.studentid = student_id and ts.attendanceschoolid = attendance_schId and stb.activeflag is true and stracker.schoolyear = school_year 
                          and ((stracker.courseid = course_Id  and stracker.contentareaid = subjectArea_id ) or (stracker.courseid = course_Id  and stracker.contentareaid is null))order by stb.id desc limit 1)

            LOOP                          
                
              UPDATE studentstestsections set statusid = roster_unEnrolled_TestSecStatus, activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId
                 WHERE studentstestid = studentTest_id; 

              UPDATE studentstests set status= roster_unEnrolled_TestStatus, activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId
                 WHERE id = studentTest_id;

              UPDATE studenttrackerband set activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId where id = studentTracker_Record.id;


               UPDATE studenttracker set status = 'UNTRACKED', modifieddate = now(), modifieduser = ceteSysAdminUserId where id = studentTracker_Record.studenttrackerid;
               
              RAISE NOTICE 'Student Tracker band is updated for studentId: %', student_id;
              
             END LOOP;   
          END IF;
       END IF;
        
   END LOOP;     

 END;
$$;


ALTER FUNCTION public.movecompletedtestsandresetstwithcourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, course_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) OWNER TO aart;

--
-- Name: movecompletedtestsandresetstwithnocourse(bigint, bigint, bigint, bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION movecompletedtestsandresetstwithnocourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) RETURNS void
    LANGUAGE plpgsql
    AS $$
   DECLARE
   completed_statusId BIGINT;     
   existingStudentRosters RECORD;
   existingCompletedTestSessions RECORD;
   existingInCompleteAndInProgressTestsessions RECORD;   
   unused_statusId BIGINT;
   inProgress_statusId BIGINT;
   ceteSysAdminUserId BIGINT;
   latest_studentTracker_TestStatus BIGINT;
   roster_unEnrolled_TestStatus BIGINT;
   roster_unEnrolled_TestSecStatus BIGINT;
   studentTest_id BIGINT;
   studentTracker_Record RECORD;
   
 BEGIN
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
   SELECT INTO completed_statusId (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'complete');   
   SELECT INTO unused_statusId(SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'unused');
   SELECT INTO inProgress_statusId(SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'inprogress');
   SELECT INTO roster_unEnrolled_TestStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO roster_unEnrolled_TestSecStatus(SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'rosterunenrolled');
   
   FOR existingStudentRosters IN(SELECT enrl.* FROM enrollmentsrosters enrl JOIN roster r ON r.id = enrl.rosterid WHERE enrl.enrollmentid = enrollment_id and enrl.rosterid != new_roster_id
     and r.attendanceschoolid = attendance_schId AND r.statesubjectareaid = subjectArea_id AND r.currentschoolyear = school_year) LOOP
      
 IF ((SELECT count(st.*) FROM testsession ts JOIN studentstests st ON st.testsessionid = ts.id WHERE st.enrollmentid = enrollment_id AND ts.rosterid = existingStudentRosters.rosterid 
                AND st.status =  completed_statusId AND st.activeflag IS TRUE and ts.source in ('BATCHAUTO', 'MABATCH', 'FIXBATCH')) > 0) 
                   THEN

                  FOR existingCompletedTestSessions IN (SELECT ts.* FROM testsession ts JOIN studentstests st ON st.testsessionid = ts.id WHERE st.enrollmentid = enrollment_id AND ts.rosterid = existingStudentRosters.rosterid
                                   AND st.status =  completed_statusId AND st.activeflag IS TRUE and ts.source in ('BATCHAUTO', 'MABATCH', 'FIXBATCH')) LOOP 
                                      
                         UPDATE testsession SET rosterid = new_roster_id, modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = existingCompletedTestSessions.id;                                                       

                          RAISE NOTICE 'For studentID: %, Completed testsessionId % is moved from rosterId: % to new rosterId: %', student_id, existingCompletedTestSessions.id, existingStudentRosters.rosterid, new_roster_id;
                                                            
                   END LOOP;                                        
           END IF;                 

        select st.id from studentstests st join (select stb.id, stb.testsessionid from studenttrackerband stb join studenttracker stracker on stracker.id = stb.studenttrackerid join testsession ts on ts.id = stb.testsessionid
                WHERE stracker.studentid = student_id and ts.attendanceschoolid = attendance_schId and stb.activeflag is true and stracker.contentareaid = subjectArea_id and stracker.schoolyear = school_year and stracker.courseid is null order by stb.id desc limit 1) as strackerDetilas
                on strackerDetilas.testsessionid = st.testsessionid
                and st.activeflag is true and st.studentid = student_id and st.enrollmentid = enrollment_id
                INTO studentTest_id;


        IF (studentTest_id is not null) 
        THEN                

           select st.status from studentstests st join (select stb.id, stb.testsessionid from studenttrackerband stb join studenttracker stracker on stracker.id = stb.studenttrackerid join testsession ts on ts.id = stb.testsessionid
                WHERE stracker.studentid = student_id and ts.attendanceschoolid = attendance_schId and stb.activeflag is true and stracker.contentareaid = subjectArea_id and stracker.schoolyear = school_year and stracker.courseid is null order by stb.id desc limit 1) as strackerDetilas
                on strackerDetilas.testsessionid = st.testsessionid
                and st.activeflag is true and st.studentid = student_id and st.enrollmentid = enrollment_id
                INTO latest_studentTracker_TestStatus; 
         
          IF (latest_studentTracker_TestStatus != completed_statusId) THEN

           FOR studentTracker_Record IN (select stb.id, stb.testsessionid,stb.studenttrackerid from studenttrackerband stb join studenttracker stracker on stracker.id = stb.studenttrackerid join testsession ts on ts.id = stb.testsessionid
                WHERE stracker.studentid = student_id and ts.attendanceschoolid = attendance_schId and stb.activeflag is true and stracker.contentareaid = subjectArea_id and stracker.schoolyear = school_year and stracker.courseid is null order by stb.id desc limit 1)

             LOOP
           
               UPDATE studentstestsections set statusid = roster_unEnrolled_TestSecStatus, activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId
                  WHERE studentstestid = studentTest_id;


               UPDATE studentstests set status= roster_unEnrolled_TestStatus, activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId
                  WHERE id = studentTest_id;       

               UPDATE studenttrackerband set activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId where id = studentTracker_Record.id;


               UPDATE studenttracker set status = 'UNTRACKED', modifieddate = now(), modifieduser = ceteSysAdminUserId where id = studentTracker_Record.studenttrackerid;


                RAISE NOTICE 'Student Tracker band is updated for studentId: %', student_id;     
                
             END LOOP;
          END IF;

       END IF;
        
   END LOOP;     

 END;
$$;


ALTER FUNCTION public.movecompletedtestsandresetstwithnocourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) OWNER TO aart;

--
-- Name: movectsfromrosterwithcourse(character varying, character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION movectsfromrosterwithcourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, course_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ 
 DECLARE   
   state_Id BIGINT;
   old_ayp_sch_id BIGINT;
   old_att_sch_id BIGINT;   
   new_ayp_sch_id BIGINT;
   new_att_sch_id BIGINT;
   old_teacherId BIGINT;   
   new_teacher_id BIGINT;
   ceteSysAdminUserId BIGINT;
   subject_id BIGINT; 
   completed_statusId BIGINT;
   old_studentsEnrollemntsRostersRecord RECORD;
   new_studentsEnrollemntsRostersRecord RECORD;
   completedStuTestsRecords RECORD;
   course_Id BIGINT;
   
 BEGIN         
SELECT INTO state_Id (SELECT id FROM organization WHERE lower(displayidentifier) = lower(stateDisplayidentifier));
SELECT INTO old_ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(old_aypSch));
SELECT INTO old_att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(old_attSch));
        SELECT INTO new_ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(new_aypSch));
SELECT INTO new_att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(new_attSch));
SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
       SELECT INTO subject_id (SELECT id FROM contentarea WHERE lower(abbreviatedname)  = lower(sub_abbrName) LIMIT 1);
        SELECT INTO completed_statusId (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'complete');   
        SELECT INTO old_teacherId (select DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id where uso.organizationid = old_att_sch_id and lower(uniquecommonidentifier) = lower(old_roster_teacherIdentifier) LIMIT 1); 
        SELECT INTO new_teacher_id (select DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id where uso.organizationid = new_att_sch_id and lower(uniquecommonidentifier) = lower(new_roster_teacherIdentifier) LIMIT 1); 
        SELECT INTO course_Id (SELECT id FROM gradecourse WHERE lower(abbreviatedname) = lower(course_abbrName) and course is true LIMIT 1);
        
        FOR old_studentsEnrollemntsRostersRecord IN (SELECT stu.statestudentidentifier, stu.id as studentId, en.id as enrollmentid, enrl.id as enrlRosterId, enrl.rosterId as rosterId 
           FROM student stu JOIN enrollment en on stu.id = en.studentid JOIN enrollmentsrosters enrl on enrl.enrollmentid = en.id 
           WHERE lower(stu.statestudentidentifier) = lower(statestudent_identifier) AND
           enrl.rosterid IN (SELECT r.id FROM roster r
               WHERE r.statecoursesid = course_Id AND r.teacherid = old_teacherId AND r.statesubjectareaid = subject_Id AND r.attendanceschoolid = old_att_sch_id AND currentschoolyear = schoolyear AND lower(r.coursesectionname) = lower(old_roster_name))
               AND en.attendanceschoolid = old_att_sch_id AND en.aypschoolid = old_ayp_sch_id AND en.currentschoolyear = schoolyear AND stu.stateid = state_Id)
       LOOP
          
          
          FOR new_studentsEnrollemntsRostersRecord IN (SELECT stu.statestudentidentifier, stu.id as studentId, en.id as enrollmentid, enrl.id as enrlRosterId, enrl.rosterId as rosterId 
           FROM student stu JOIN enrollment en on stu.id = en.studentid JOIN enrollmentsrosters enrl on enrl.enrollmentid = en.id 
           WHERE lower(stu.statestudentidentifier) = lower(statestudent_identifier) AND
           enrl.rosterid IN (SELECT r.id FROM roster r
               WHERE r.statecoursesid = course_Id AND r.teacherid = new_teacher_id AND r.statesubjectareaid = subject_Id AND r.attendanceschoolid = new_att_sch_id AND currentschoolyear = schoolyear AND lower(r.coursesectionname) = lower(new_roster_name))
               AND en.attendanceschoolid = new_att_sch_id AND en.aypschoolid = new_ayp_sch_id AND en.currentschoolyear = schoolyear AND stu.stateid = state_Id)
          LOOP             
             
             FOR completedStuTestsRecords IN(SELECT st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid 
 FROM studentstests st JOIN testsession ts ON st.testsessionid = ts.id --JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid 
 WHERE st.activeflag=true AND ts.rosterid = old_studentsEnrollemntsRostersRecord.rosterId
                 AND st.enrollmentid = old_studentsEnrollemntsRostersRecord.enrollmentid -- AND (otw.effectivedate <= now() AND now() <= otw.expirydate)
                 AND st.status = completed_statusId)
             LOOP                
                
                UPDATE studentstests SET enrollmentid = new_studentsEnrollemntsRostersRecord.enrollmentid, modifieddate = now(),
                           modifieduser = ceteSysAdminUserId WHERE id = completedStuTestsRecords.id;

                RAISE NOTICE 'Studentstests % is updated with new enrollmentid %', completedStuTestsRecords.id, new_studentsEnrollemntsRostersRecord.enrollmentid;
                 
                IF((SELECT count(distinct enrollmentid) FROM studentstests WHERE testsessionid = completedStuTestsRecords.testsessionid) = 1)  

                THEN
                
                   UPDATE testsession SET rosterid = new_studentsEnrollemntsRostersRecord.rosterId, attendanceschoolid = new_att_sch_id,
modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = completedStuTestsRecords.testsessionid;

                   RAISE NOTICE 'Testsession % is updated with new rosterid %', completedStuTestsRecords.testsessionid, new_studentsEnrollemntsRostersRecord.rosterId;
                   
   UPDATE ititestsessionhistory SET rosterid = new_studentsEnrollemntsRostersRecord.rosterId, studentenrlrosterid = new_studentsEnrollemntsRostersRecord.enrlRosterId,
          modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE testsessionid = completedStuTestsRecords.testsessionid;  

   RAISE NOTICE 'ITI plan with testsession % is updated with new rosterid %', completedStuTestsRecords.testsessionid, new_studentsEnrollemntsRostersRecord.rosterId;                               

                END IF;
                                                
             END LOOP;
             
          END LOOP;

       END LOOP;
       
   END;
$$;


ALTER FUNCTION public.movectsfromrosterwithcourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, course_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: movectsfromrosterwithnocourse(character varying, character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION movectsfromrosterwithnocourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ 
 DECLARE   
   state_Id BIGINT;
   old_ayp_sch_id BIGINT;
   old_att_sch_id BIGINT;   
   new_ayp_sch_id BIGINT;
   new_att_sch_id BIGINT;
   old_teacherId BIGINT;   
   new_teacher_id BIGINT;
   ceteSysAdminUserId BIGINT;
   subject_id BIGINT; 
   completed_statusId BIGINT;
   old_studentsEnrollemntsRostersRecord RECORD;
   new_studentsEnrollemntsRostersRecord RECORD;
   completedStuTestsRecords RECORD;
   
 BEGIN         
SELECT INTO state_Id (SELECT id FROM organization WHERE lower(displayidentifier) = lower(stateDisplayidentifier));
SELECT INTO old_ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(old_aypSch));
SELECT INTO old_att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(old_attSch));
        SELECT INTO new_ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(new_aypSch));
SELECT INTO new_att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(new_attSch));
SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
       SELECT INTO subject_id (SELECT id FROM contentarea WHERE lower(abbreviatedname)  = lower(sub_abbrName) LIMIT 1);
        SELECT INTO completed_statusId (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'complete');   
        SELECT INTO old_teacherId (select DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id where uso.organizationid = old_att_sch_id and lower(uniquecommonidentifier) = lower(old_roster_teacherIdentifier) LIMIT 1); 
        SELECT INTO new_teacher_id (select DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id where uso.organizationid = new_att_sch_id and lower(uniquecommonidentifier) = lower(new_roster_teacherIdentifier) LIMIT 1); 
        
        FOR old_studentsEnrollemntsRostersRecord IN (SELECT stu.statestudentidentifier, stu.id as studentId, en.id as enrollmentid, enrl.id as enrlRosterId, enrl.rosterId as rosterId 
           FROM student stu JOIN enrollment en on stu.id = en.studentid JOIN enrollmentsrosters enrl on enrl.enrollmentid = en.id 
           WHERE lower(stu.statestudentidentifier) = lower(statestudent_identifier) AND
           enrl.rosterid IN (SELECT r.id FROM roster r
               WHERE r.teacherid = old_teacherId AND r.statesubjectareaid = subject_Id AND r.attendanceschoolid = old_att_sch_id AND currentschoolyear = schoolyear AND lower(r.coursesectionname) = lower(old_roster_name))
               AND en.attendanceschoolid = old_att_sch_id AND en.aypschoolid = old_ayp_sch_id AND en.currentschoolyear = schoolyear AND stu.stateid = state_Id)
       LOOP
          
          
          FOR new_studentsEnrollemntsRostersRecord IN (SELECT stu.statestudentidentifier, stu.id as studentId, en.id as enrollmentid, enrl.id as enrlRosterId, enrl.rosterId as rosterId 
           FROM student stu JOIN enrollment en on stu.id = en.studentid JOIN enrollmentsrosters enrl on enrl.enrollmentid = en.id 
           WHERE lower(stu.statestudentidentifier) = lower(statestudent_identifier) AND
           enrl.rosterid IN (SELECT r.id FROM roster r
               WHERE r.teacherid = new_teacher_id AND r.statesubjectareaid = subject_Id AND r.attendanceschoolid = new_att_sch_id AND currentschoolyear = schoolyear AND lower(r.coursesectionname) = lower(new_roster_name))
               AND en.attendanceschoolid = new_att_sch_id AND en.aypschoolid = new_ayp_sch_id AND en.currentschoolyear = schoolyear AND stu.stateid = state_Id)
          LOOP             
             
             FOR completedStuTestsRecords IN(SELECT st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid 
 FROM studentstests st JOIN testsession ts ON st.testsessionid = ts.id --JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid 
 WHERE st.activeflag=true AND ts.rosterid = old_studentsEnrollemntsRostersRecord.rosterId
                 AND st.enrollmentid = old_studentsEnrollemntsRostersRecord.enrollmentid -- AND (otw.effectivedate <= now() AND now() <= otw.expirydate)
                 AND st.status = completed_statusId)
             LOOP                
                
                UPDATE studentstests SET enrollmentid = new_studentsEnrollemntsRostersRecord.enrollmentid, modifieddate = now(),
                           modifieduser = ceteSysAdminUserId WHERE id = completedStuTestsRecords.id;

                RAISE NOTICE 'Studentstests % is updated with new enrollmentid %', completedStuTestsRecords.id, new_studentsEnrollemntsRostersRecord.enrollmentid;
                 
                IF((SELECT count(distinct enrollmentid) FROM studentstests WHERE testsessionid = completedStuTestsRecords.testsessionid) = 1)  

                THEN
                
                   UPDATE testsession SET rosterid = new_studentsEnrollemntsRostersRecord.rosterId, attendanceschoolid = new_att_sch_id,
modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = completedStuTestsRecords.testsessionid;

                   RAISE NOTICE 'Testsession % is updated with new rosterid %', completedStuTestsRecords.testsessionid, new_studentsEnrollemntsRostersRecord.rosterId;
                   
   UPDATE ititestsessionhistory SET rosterid = new_studentsEnrollemntsRostersRecord.rosterId, studentenrlrosterid = new_studentsEnrollemntsRostersRecord.enrlRosterId,
          modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE testsessionid = completedStuTestsRecords.testsessionid;  

   RAISE NOTICE 'ITI plan with testsession % is updated with new rosterid %', completedStuTestsRecords.testsessionid, new_studentsEnrollemntsRostersRecord.rosterId;                               

                END IF;
                                                
             END LOOP;
             
          END LOOP;

       END LOOP;
       
   END;
$$;


ALTER FUNCTION public.movectsfromrosterwithnocourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: non_empty_id(bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION non_empty_id(i bigint, j bigint) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
        BEGIN
  			if(i is not null) THEN
   				return i;
  			else    
   				RETURN j;
  			end if;
        END;
	$$;


ALTER FUNCTION public.non_empty_id(i bigint, j bigint) OWNER TO aart;

--
-- Name: nvl(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION nvl(i bigint) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
        BEGIN
  			if(i > -1) THEN
   				return i;
  			else    
   				RETURN 0;
  			end if;
        END;
	$$;


ALTER FUNCTION public.nvl(i bigint) OWNER TO aart;

--
-- Name: nvltest(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION nvltest(testsessionid bigint) RETURNS text
    LANGUAGE plpgsql
    AS $$
        BEGIN
  			if(testSessionId is not null) THEN
   				return 'Enrolled Students';
  			else    
   				RETURN 'Other Students';
  			end if;
        END;
	$$;


ALTER FUNCTION public.nvltest(testsessionid bigint) OWNER TO aart;

--
-- Name: organization_child_tree(bigint, integer); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION organization_child_tree(parentid bigint, currentlevel integer) RETURNS TABLE(id bigint, organizationname character varying, displayidentifier character varying, organizationtypeid bigint, welcomemessage character varying, relatedorganizationid bigint, isparent boolean, currentlevel integer)
    LANGUAGE sql
    AS $_$
        WITH RECURSIVE organization_child_tree_relation(organizationid, parentorganizationid,currentlevel) AS (
        SELECT organizationid, parentorganizationid,($2+1) as currentLevel FROM organizationrelation WHERE parentorganizationid = $1
          UNION
          SELECT
            organizationrelation.organizationid, organizationrelation.parentorganizationid,
            (parentorganization_child_tree_relation.currentLevel + 1) as currentlevel
          FROM organizationrelation, organization_child_tree_relation as parentorganization_child_tree_relation
          WHERE organizationrelation.parentorganizationid = parentorganization_child_tree_relation.organizationid)
          SELECT org.id, org.organizationname, org.displayidentifier, org.organizationtypeid, org.welcomemessage,
           organization_child_tree_relation.parentorganizationid,true as isparent,
          organization_child_tree_relation.currentLevel as currentLevel
           from organization org,organization_child_tree_relation where org.activeflag = true and org.id=organization_child_tree_relation.organizationid;
        $_$;


ALTER FUNCTION public.organization_child_tree(parentid bigint, currentlevel integer) OWNER TO aart;

--
-- Name: organization_children(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION organization_children(parentid bigint) RETURNS TABLE(id bigint, organizationname character varying, displayidentifier character varying, organizationtypeid bigint, welcomemessage character varying, contractingorganization boolean, schoolstartdate timestamp with time zone, schoolenddate timestamp with time zone, expirepasswords boolean, expirationdatetype bigint)
    LANGUAGE sql
    AS $_$
        WITH RECURSIVE organization_relation(organizationid, parentorganizationid) AS (
        SELECT organizationid, parentorganizationid FROM organizationrelation WHERE parentorganizationid = $1
          UNION
          SELECT
            organizationrelation.organizationid, organizationrelation.parentorganizationid
          FROM organizationrelation, organization_relation as parentorganization_relation
          WHERE organizationrelation.parentorganizationid = parentorganization_relation.organizationid)
          SELECT o.id, o.organizationname, o.displayidentifier, o.organizationtypeid, o.welcomemessage, o.contractingorganization, o.schoolstartdate, o.schoolenddate, o.expirepasswords,  o.expirationdatetype
          from organization o where o.activeflag = true and o.id in (Select organizationid FROM organization_relation);
        $_$;


ALTER FUNCTION public.organization_children(parentid bigint) OWNER TO aart;

--
-- Name: organization_children_oftype(bigint, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION organization_children_oftype(parentid bigint, typecode character varying) RETURNS TABLE(id bigint, organizationname character varying, displayidentifier character varying, organizationtypeid bigint, welcomemessage character varying, contractingorganization boolean, schoolstartdate timestamp with time zone, schoolenddate timestamp with time zone, expirepasswords boolean, expirationdatetype bigint)
    LANGUAGE sql
    AS $_$
        WITH RECURSIVE organization_relation(organizationid, parentorganizationid) AS (
        SELECT organizationid, parentorganizationid FROM organizationrelation WHERE parentorganizationid = $1
          UNION
          SELECT
            organizationrelation.organizationid, organizationrelation.parentorganizationid
          FROM organizationrelation, organization_relation as parentorganization_relation
          WHERE organizationrelation.parentorganizationid = parentorganization_relation.organizationid)
          SELECT o.id, o.organizationname, o.displayidentifier, o.organizationtypeid, o.welcomemessage, o.contractingorganization, o.schoolstartdate, o.schoolenddate, o.expirepasswords,  o.expirationdatetype 
          from organization o JOIN organizationtype as orgtype ON o.organizationtypeid = orgtype.id
		WHERE orgtype.typecode = 'SCH' and o.id in (Select organizationid FROM organization_relation);
        $_$;


ALTER FUNCTION public.organization_children_oftype(parentid bigint, typecode character varying) OWNER TO aart;

--
-- Name: organization_parent(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION organization_parent(childid bigint, OUT id bigint, OUT organizationname character varying, OUT displayidentifier character varying, OUT organizationtypeid bigint, OUT welcomemessage character varying, OUT buildinguniqueness bigint, OUT schoolstartdate timestamp with time zone, OUT schoolenddate timestamp with time zone, OUT contractingorganization boolean, OUT expirepasswords boolean, OUT expirationdatetype bigint) RETURNS SETOF record
    LANGUAGE sql
    AS $_$
 
WITH RECURSIVE organization_relation(organizationid, parentorganizationid) AS (
          SELECT organizationid, parentorganizationid FROM organizationrelation WHERE organizationid = $1
          UNION
          SELECT
            organizationrelation.organizationid, organizationrelation.parentorganizationid
          FROM organizationrelation, organization_relation AS parentorganization_relation
          WHERE organizationrelation.organizationid = parentorganization_relation.parentorganizationid)
        SELECT id, organizationname, displayidentifier, organizationtypeid, welcomemessage, buildinguniqueness, schoolstartdate, schoolenddate, contractingorganization, expirepasswords, expirationdatetype
        FROM organization WHERE activeflag = true and id IN (SELECT parentorganizationid FROM organization_relation);
 
$_$;


ALTER FUNCTION public.organization_parent(childid bigint, OUT id bigint, OUT organizationname character varying, OUT displayidentifier character varying, OUT organizationtypeid bigint, OUT welcomemessage character varying, OUT buildinguniqueness bigint, OUT schoolstartdate timestamp with time zone, OUT schoolenddate timestamp with time zone, OUT contractingorganization boolean, OUT expirepasswords boolean, OUT expirationdatetype bigint) OWNER TO aart;

--
-- Name: organization_parent_tree(bigint, integer); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION organization_parent_tree(childid bigint, currentlevel integer) RETURNS TABLE(id bigint, organizationname character varying, displayidentifier character varying, organizationtypeid bigint, welcomemessage character varying, relatedorganizationid bigint, isparent boolean, currentlevel integer)
    LANGUAGE sql
    AS $_$
        WITH RECURSIVE organization_parent_tree_relation(organizationid, parentorganizationid,currentlevel) AS (
          SELECT organizationid, parentorganizationid,($2 - 1) as currentLevel FROM organizationrelation WHERE organizationid = $1
          UNION
          SELECT
            organizationrelation.organizationid, organizationrelation.parentorganizationid,
            (parentorganization_parent_tree_relation.currentLevel - 1) as currentlevel
          FROM organizationrelation, organization_parent_tree_relation as parentorganization_parent_tree_relation
          WHERE organizationrelation.organizationid = parentorganization_parent_tree_relation.parentorganizationid)
        SELECT id, organizationname, displayidentifier, organizationtypeid, welcomemessage,
           organization_parent_tree_relation.organizationid,false as isparent,
          organization_parent_tree_relation.currentLevel as currentLevel       
         FROM organization org,organization_parent_tree_relation where
          org.activeflag=true and org.id=organization_parent_tree_relation.parentorganizationid;
        $_$;


ALTER FUNCTION public.organization_parent_tree(childid bigint, currentlevel integer) OWNER TO aart;

--
-- Name: organization_school_year(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION organization_school_year(orgid bigint) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    school_year integer;
BEGIN
	school_year:= null;
	select cast(extract(year from schoolenddate) as integer) into school_year from organization where id=orgid and contractingorganization=true;
	IF (school_year is null) THEN
		select cast(extract(year from schoolenddate) as integer) into school_year  
			from organization where id in (select id from organization_parent_tree(orgid, 7))
			and contractingorganization=true;
	END IF;
	return school_year;	
	END;
$$;


ALTER FUNCTION public.organization_school_year(orgid bigint) OWNER TO aart;

--
-- Name: pdaddorupdateresponse(bigint, bigint, bigint, bigint, bigint, bigint, text, numeric); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION pdaddorupdateresponse(in_userid bigint, in_testid bigint, in_testsectionid bigint, in_usertestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) RETURNS integer
    LANGUAGE plpgsql
    AS $$
  BEGIN
	update usertestresponse set userid = in_userId,testid = in_testid, testsectionid = in_testSectionId,foilid = in_foilid,
	      response = in_response, score = in_score, modifieddate = now(), activeflag = true
	    where usertestsectionid =in_userTestSectionId and taskvariantid = in_taskId;
      
	IF NOT FOUND THEN
		insert into usertestresponse (usertestsectionid, taskvariantid, userid,  testid, testsectionid, foilid, 
			response, score, createddate, modifieddate, activeflag)
			values (in_userTestSectionId, in_taskid, in_userId,in_testId, in_testSectionId, in_foilId, in_response,in_score,now(), now(),true);
	END IF;	
	RETURN 1;
  EXCEPTION WHEN OTHERS THEN
    RETURN 0;    
  END;
$$;


ALTER FUNCTION public.pdaddorupdateresponse(in_userid bigint, in_testid bigint, in_testsectionid bigint, in_usertestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) OWNER TO aart;

--
-- Name: pdenrolltomodule(bigint, bigint, bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION pdenrolltomodule(in_moduleid bigint, in_userid bigint, in_enrolledstatusid bigint, in_stateid bigint, in_createduserid bigint) RETURNS integer
    LANGUAGE plpgsql
    AS $$
  BEGIN
	update usermodule set modifieduser = in_createduserid, modifieddate = now()
	    where userid = in_userId and moduleid = in_moduleid and activeflag is true and stateid = in_stateid
	    and in_enrolledstatusid in (
		    SELECT c.id FROM category c, categorytype ct WHERE c.categorytypeid = ct.id 
		    AND c.categorycode IN ('ENROLLED','INPROGRESS','COMPLETED') AND ct.typecode='USER_MODULE_STATUS'
	    );
      
	IF NOT FOUND THEN
		insert into usermodule (id, userid, moduleid, 
		      enrollmentstatusid, createddate, modifieddate, createduser, modifieduser, activeflag, stateid
		      )
		    values (nextval('usermodule_id_seq'), in_userid, in_moduleid,
		      in_enrolledstatusid, now(), now(), in_createduserid, in_createduserid, true, in_stateid);
	END IF;	
	RETURN 1;
  EXCEPTION WHEN OTHERS THEN
    RETURN 0;    
  END;
$$;


ALTER FUNCTION public.pdenrolltomodule(in_moduleid bigint, in_userid bigint, in_enrolledstatusid bigint, in_stateid bigint, in_createduserid bigint) OWNER TO aart;

--
-- Name: pdupdatesectionstatusandgetstatus(bigint, bigint, text, text, text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION pdupdatesectionstatusandgetstatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
  DECLARE
    completecount integer;
    iscomplete boolean;
  BEGIN
	iscomplete := false;
	IF in_categorycode = 'inprogress' THEN
		update public.usertestsection set statusid = (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id where categorytype.typecode = 'STUDENT_TESTSECTION_STATUS'
				and category.categorycode = in_categorycode), 
			scores = in_sectionscore, modifieddate=now(), startdatetime = now() where usertestid = in_studenttestid and testsectionid = in_testsectionid; 
	ELSE
		update public.usertestsection set statusid = (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id where categorytype.typecode = 'STUDENT_TESTSECTION_STATUS'
					and category.categorycode = in_categorycode), 
			scores = in_sectionscore, modifieddate=now(), enddatetime = now() where usertestid = in_studenttestid and testsectionid = in_testsectionid; 
	END IF;

	SELECT count(1) into completecount FROM usertestsection AS sts
		JOIN category On category.id = sts.statusid 
		JOIN public.categorytype ON category.categorytypeid = categorytype.id 
		where categorytype.typecode ='STUDENT_TESTSECTION_STATUS'
			and category.categorycode != 'complete'
			and  sts.usertestid = in_studenttestid;

	IF completecount = 0 THEN
		iscomplete := true;
		update public.usertest set status = (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id 
				where categorytype.typecode = 'STUDENT_TEST_STATUS' and category.categorycode = 'complete'),
			scores = in_testscore, modifieddate=now(), enddatetime = now() where id = in_studenttestid;
	ELSIF in_testscore IS NOT NULL THEN
		update public.usertest set scores = in_testscore, modifieddate=now() where id = in_studenttestid;
	END IF;
	RETURN iscomplete;
  END;
$$;


ALTER FUNCTION public.pdupdatesectionstatusandgetstatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text) OWNER TO aart;

--
-- Name: populatestudentpnpjson(); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION populatestudentpnpjson() RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	student RECORD;
	studentPNPJson RECORD;
	jsonText text;
	pnpAttribute text;
BEGIN
	RAISE NOTICE 'Populating student pnp json text...';
	delete from studentpnpjson;
	
    FOR student IN SELECT distinct spiav.studentid 
	FROM profileitemattribute pia 
	INNER JOIN profileItemAttributenameAttributeContainer pianc ON pia.id=pianc.attributenameid 
	INNER JOIN profileitemattributecontainer piac ON pianc.attributecontainerid = piac.id 
	INNER JOIN studentprofileitemattributevalue spiav ON pianc.id = spiav.profileitemattributenameattributecontainerid
	ORDER BY spiav.studentid 
    LOOP
        RAISE NOTICE ' Populating student pnp for % ...', student.studentId;
	jsonText = '[';
	pnpAttribute = '';
        for studentPNPJson in SELECT lower(pia.attributename) as attrname, piac.id as attrcontainerid, 
		lower(piac.attributecontainer) as attrcontainer, lower(spiav.selectedvalue) as attrvalue
		FROM profileitemattribute pia 
		INNER JOIN profileItemAttributenameAttributeContainer pianc ON pia.id=pianc.attributenameid 
		INNER JOIN profileitemattributecontainer piac ON pianc.attributecontainerid = piac.id 
		INNER JOIN studentprofileitemattributevalue spiav ON pianc.id = spiav.profileitemattributenameattributecontainerid 
		where spiav.studentid = student.studentId
        loop
		pnpAttribute = pnpAttribute || '{';
		pnpAttribute = pnpAttribute || '"attrName"' || ':"' || studentPNPJson.attrname || '",';
		pnpAttribute = pnpAttribute || '"attrContainerId"' || ':' || studentPNPJson.attrcontainerid || ',';
		pnpAttribute = pnpAttribute || '"attrContainer"' || ':"' || studentPNPJson.attrcontainer || '",';
		pnpAttribute = pnpAttribute || '"attrValue"' || ':"' || studentPNPJson.attrvalue || '"';
		pnpAttribute = pnpAttribute || '},';
        end loop;
	jsonText = jsonText || trim( trailing ',' from pnpAttribute);
        jsonText = jsonText || ']';
        -- RAISE NOTICE '%', jsonText;
        EXECUTE 'INSERT INTO studentpnpjson (studentid, jsontext) values($1, $2)' using student.studentId, jsonText;
    END LOOP;
    RAISE NOTICE 'Done Populating student pnp json text...';
    RETURN 1;
END;
$_$;


ALTER FUNCTION public.populatestudentpnpjson() OWNER TO aart;

--
-- Name: publish_republishing_test(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION publish_republishing_test(publishedtestid bigint) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE 
returnmessage character varying(20) = 'Unsuccessful';
BEGIN
returnmessage = 'Successful';
RETURN returnmessage;
END;
$$;


ALTER FUNCTION public.publish_republishing_test(publishedtestid bigint) OWNER TO aart;

--
-- Name: qctest(boolean, boolean); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION qctest(highstake boolean, qccomplete boolean) RETURNS text
    LANGUAGE plpgsql
    AS $$
        BEGIN
  			if(highstake is false and qccomplete is true) THEN
   				return 'ON';
  			else    
   				RETURN 'OFF';   				
  			end if;	
        END;
	$$;


ALTER FUNCTION public.qctest(highstake boolean, qccomplete boolean) OWNER TO aart;

--
-- Name: randomizestudenttest(text, text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION randomizestudenttest(in_username text, in_testtypename text) RETURNS TABLE(assessmentprogramid bigint, assessmentprogramname character varying, testingprogramid bigint, testingprogramname character varying, contentarea character varying, gradecourse character varying, testname character varying, testformatcode character varying, studentstestsid bigint, studentid bigint, testid bigint, testcollectionid bigint, status character varying, testsessionid bigint, activeflag boolean, ticketno character varying, windowopen boolean, createduser integer, modifieduser integer, modifieddate timestamp without time zone, createddate timestamp without time zone, gracetimedoutsectioncount bigint, schooldisplayidentifier character varying)
    LANGUAGE plpgsql
    AS $$
  DECLARE
    studenttestid bigint;
    randomized_testid bigint;
    randomized_testname text;
    status_id bigint;
    timedout_status_id bigint;
    reactivated_status_id bigint;
    inprogress_status_id bigint;
    test_unused_status_id bigint;
    test_inprogress_status_id bigint;
    deployed_status_id bigint;
    test_testsections RECORD;
    studenttestsection RECORD;
    studenttest RECORD;
    grace_period bigint;
    current_millis decimal;
    student_id bigint;
  BEGIN
                select id into student_id from student where username=in_username;
                select into status_id category.id from public.category JOIN public.categorytype ON category.categorytypeid = categorytype.id
                                  where categorytype.typecode = 'STUDENT_TESTSECTION_STATUS'
                                  and category.categorycode = 'unused'; 
                select into timedout_status_id category.id from public.category JOIN public.categorytype ON category.categorytypeid = categorytype.id
                                  where categorytype.typecode = 'STUDENT_TESTSECTION_STATUS'
                                  and category.categorycode = 'inprogresstimedout';
                select into reactivated_status_id category.id from public.category JOIN public.categorytype ON category.categorytypeid = categorytype.id
                                  where categorytype.typecode = 'STUDENT_TESTSECTION_STATUS'
                                  and category.categorycode = 'reactivated';
                select into inprogress_status_id category.id from public.category JOIN public.categorytype ON category.categorytypeid = categorytype.id
                                  where categorytype.typecode = 'STUDENT_TESTSECTION_STATUS'
                                  and category.categorycode = 'inprogress';
                SELECT c.id into test_unused_status_id FROM category c, categorytype ct WHERE c.categorytypeid = ct.id
        AND c.categorycode = 'unused'
        AND ct.typecode='STUDENT_TEST_STATUS';
    SELECT c.id into test_inprogress_status_id FROM category c, categorytype ct WHERE c.categorytypeid = ct.id
        AND c.categorycode = 'inprogress'
        AND ct.typecode='STUDENT_TEST_STATUS';
    select category.id into deployed_status_id from category, categorytype
                where category.categorytypeid = categorytype.id and categorytype.typecode = 'TESTSTATUS' and category.categorycode = 'DEPLOYED';
                                                                  
  FOR studenttestid IN (select sts.id from studentstests sts where sts.testid is null
                                                                and sts.studentid = student_id and sts.activeflag is true
                                                                and sts.status IN (test_unused_status_id, test_inprogress_status_id))
  LOOP
    select into randomized_testid, randomized_testname  test.id, test.testname
                from (select * from studentstests stt join testcollection tc on tc.id = stt.testcollectionid where stt.id = studenttestid ) studenttesttestcollection
                join testcollectionstests tct on tct.testcollectionid = studenttesttestcollection.testcollectionid
                join test on test.id = tct.testid
                where not exists (select distinct st.testid from studentstests st where st.studentid = studenttesttestcollection.studentid 
          and st.testcollectionid = studenttesttestcollection.testcollectionid and st.testid = test.id
          and st.status IN (test_unused_status_id, test_inprogress_status_id))
                and test.status = deployed_status_id
                and test.qccomplete = true ORDER BY random() LIMIT 1;
                IF randomized_testid is not null THEN
      update public.studentstests set testid = randomized_testid where id = studenttestid;
 
      FOR test_testsections IN (select testsection.id from public.testsection where testsection.testid = randomized_testid)
                        LOOP
        insert into public.studentstestsections(studentstestid, testsectionid, statusid) values(studenttestid, test_testsections.id, status_id);
      END LOOP;
                END IF;
    END LOOP;
    --get all tests, check grace period timeout and update status
    FOR studenttest IN (SELECT st.id, st.studentid, st.testid,st.testcollectionid,ts.operationaltestwindowid,
                            (select count(id) from studentstestsections where studentstestid = st.id and statusid = timedout_status_id) as gracestatuscount
                          FROM studentstests st 
                          INNER JOIN test t ON st.testid = t.id
                          INNER JOIN student s ON st.studentid = s.id
                          INNER JOIN testsession ts on ts.id=st.testsessionid
                          INNER JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid
                          WHERE st.status IN (test_unused_status_id, test_inprogress_status_id)
                            AND st.activeflag = true
                            AND ((otw.effectivedate <= CURRENT_TIMESTAMP AND otw.expirydate >= CURRENT_TIMESTAMP AND otw.suspendwindow IS false) 
                            OR (otw.effectivedate <= CURRENT_TIMESTAMP AND ts.windowexpirydate >= CURRENT_TIMESTAMP))
                            AND s.id = student_id order by st.id)
    LOOP
                SELECT graceperiod into grace_period FROM operationaltestwindowsessionrule otwsr, category sessionrule,categorytype catType
                                WHERE otwsr.sessionruleid = sessionrule.id AND sessionrule.categorytypeid=cattype.id
                                AND sessionrule.categorycode='GRACE_PERIOD' AND cattype.typecode='SESSION_RULES'
                                AND otwsr.operationaltestwindowid = studenttest.operationaltestwindowid and otwsr.activeflag=true;
                IF grace_period IS NOT NULL and studenttest.gracestatuscount = 0 THEN
      FOR studenttestsection IN (select sts.id, sts.statusid, (EXTRACT(EPOCH FROM sts.modifieddate)+(grace_period*60)) as sectionmodifiedmillis from studentstestsections sts where sts.studentstestid=studenttest.id
                                                                                                AND sts.statusid=inprogress_status_id)
      LOOP
        SELECT EXTRACT(EPOCH FROM current_timestamp) INTO current_millis;
        IF (studenttestsection.sectionmodifiedmillis < current_millis) THEN
          update public.studentstestsections set statusid = timedout_status_id, modifieddate=now() where id = studenttestsection.id;
        END IF;
      END LOOP;
                END IF;
    END LOOP;     
 
    --return all tests
    IF in_testtypename ilike 'Practice'  THEN
  RETURN QUERY SELECT ap.id AS assessmentprogramId,
  cast('Practice' as character varying) AS assessmentprogramname,
  tp.id AS testingprogramid, tp.programname AS testingprogramname,
  ca.name as contentarea,
  case when tc.gradebandid is not null then (select gb.name from gradeband gb where gb.id=tc.gradebandid) else (select gc.name from gradecourse gc where gc.id=tc.gradecourseid) end as gradecourse,
  t.testname, t.testformatcode,
  st.id as studentstestsid, st.studentid,
  st.testid, st.testcollectionid,
  category.categorycode, st.testsessionid,
  st.activeflag, st.ticketno,true as windowOpen,
  st.createduser, st.modifieduser,
  st.modifieddate, st.createddate,
  (select count(id) from studentstestsections where studentstestid = st.id and statusid = timedout_status_id) as gracetimedoutsectioncount,
  attsch.displayidentifier as schooldisplayidentifier
  FROM studentstests st INNER JOIN test t ON st.testid = t.id
      INNER JOIN assessmentstestcollections atc ON st.testcollectionid = atc.testcollectionid
      INNER JOIN assessment a ON atc.assessmentid = a.id
      INNER JOIN testingprogram tp ON a.testingprogramid=tp.id
      INNER JOIN assessmentprogram ap ON tp.assessmentprogramid=ap.id
      INNER JOIN testsession ts on ts.id=st.testsessionid
      INNER JOIN testcollection tc on tc.id = st.testcollectionid
      INNER JOIN contentarea ca on ca.id = tc.contentareaid
      INNER JOIN category ON category.id = st.status
      INNER JOIN enrollment en ON en.id = st.enrollmentid
      INNER JOIN organization attsch ON attsch.id = en.attendanceschoolid
      INNER JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid
  WHERE st.status IN (test_unused_status_id, test_inprogress_status_id)
      AND st.activeflag = true 
      AND ((otw.effectivedate <= CURRENT_TIMESTAMP AND otw.expirydate >= CURRENT_TIMESTAMP AND otw.suspendwindow IS false ) 
        OR (t.qccomplete IS false and otw.effectivedate IS NULL AND otw.expirydate IS NULL)
        OR (otw.effectivedate <= CURRENT_TIMESTAMP AND ts.windowexpirydate >= CURRENT_TIMESTAMP))
      AND st.studentid = student_id AND tp.programabbr = 'P'
      order by ap.programname, st.createddate, t.testname;
    ELSE
  RETURN QUERY SELECT ap.id AS assessmentprogramId,
  ap.programname AS assessmentprogramname,
  tp.id AS testingprogramid, tp.programname AS testingprogramname,
  ca.name as contentarea,
  case when tc.gradebandid is not null then (select gb.name from gradeband gb where gb.id=tc.gradebandid) else (select gc.name from gradecourse gc where gc.id=tc.gradecourseid) end as gradecourse,
  t.testname, t.testformatcode,
  st.id as studentstestsid, st.studentid,
  st.testid, st.testcollectionid, 
  category.categorycode,
  st.testsessionid,
  st.activeflag, st.ticketno,true as windowOpen,
  st.createduser, st.modifieduser,
  st.modifieddate, st.createddate,
  (select count(id) from studentstestsections where studentstestid = st.id and statusid = timedout_status_id) as gracetimedoutsectioncount,
  attsch.displayidentifier as schooldisplayidentifier
  FROM studentstests st INNER JOIN test t ON st.testid = t.id
      INNER JOIN assessmentstestcollections atc ON st.testcollectionid = atc.testcollectionid
      INNER JOIN assessment a ON atc.assessmentid = a.id
      INNER JOIN testingprogram tp ON a.testingprogramid=tp.id
      INNER JOIN assessmentprogram ap ON tp.assessmentprogramid=ap.id
      INNER JOIN testsession ts on ts.id=st.testsessionid
      INNER JOIN testcollection tc on tc.id = st.testcollectionid
      INNER JOIN contentarea ca on ca.id = tc.contentareaid
      INNER JOIN category ON category.id = st.status
      INNER JOIN enrollment en ON en.id = st.enrollmentid
      INNER JOIN organization attsch ON attsch.id = en.attendanceschoolid
      LEFT OUTER JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid
  WHERE st.status IN (test_unused_status_id, test_inprogress_status_id)
      AND st.activeflag = true AND tp.programabbr != 'P'
      AND ((otw.effectivedate <= CURRENT_TIMESTAMP AND otw.expirydate >= CURRENT_TIMESTAMP AND otw.suspendwindow IS false) 
        OR (t.qccomplete IS false and otw.effectivedate IS NULL AND otw.expirydate IS NULL)
        OR (otw.effectivedate <= CURRENT_TIMESTAMP AND ts.windowexpirydate >= CURRENT_TIMESTAMP))
      AND st.studentid = student_id
     order by ap.programname, st.createddate, t.testname;
    END IF;
END;
$$;


ALTER FUNCTION public.randomizestudenttest(in_username text, in_testtypename text) OWNER TO aart;

--
-- Name: reactivate_student_assessment_program(bigint, text, integer); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION reactivate_student_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $$
DECLARE
enrollment_record RECORD;
assessmentprogram_record RECORD;
number_updated INTEGER;
BEGIN
SELECT *
FROM assessmentprogram
WHERE abbreviatedname = _assessmentprogramabbr AND activeflag = TRUE
LIMIT 1
INTO assessmentprogram_record;

IF assessmentprogram_record IS NULL THEN
RAISE NOTICE 'No assessment program ''%'' found', _assessmentprogramabbr;
RETURN;
END IF;

FOR enrollment_record IN (
SELECT *
FROM enrollment enrl
WHERE enrl.studentid = _studentid AND enrl.currentschoolyear = _schoolyear AND enrl.activeflag = TRUE
)
LOOP
RAISE NOTICE 'Processing enrollmentid %', enrollment_record.id;

WITH updated_ettsa_rows AS (
UPDATE enrollmenttesttypesubjectarea
SET activeflag = TRUE,
modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
modifieddate = NOW()
WHERE activeflag = FALSE
AND enrollmentid = enrollment_record.id
AND to_char(modifieddate, 'yyyy-mm-dd') = '2016-03-03'
AND modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin')
AND testtypeid IN (
SELECT tt.id
FROM testtype tt
INNER JOIN assessment a ON tt.assessmentid = a.id AND tt.activeflag = TRUE AND a.activeflag = TRUE
INNER JOIN testingprogram tp ON a.testingprogramid = tp.id AND tp.activeflag = TRUE
WHERE tp.assessmentprogramid = assessmentprogram_record.id
)
RETURNING 1
)
SELECT COUNT(*) FROM updated_ettsa_rows INTO number_updated;
RAISE NOTICE 'Reactivated % rows in enrollmenttesttypesubjectarea', number_updated;
END LOOP;

IF _assessmentprogramabbr = 'DLM' THEN
RAISE NOTICE 'DLM detected. Reactivating First Contact Survey data...';

WITH updated_ssr_rows AS (
UPDATE studentsurveyresponse
SET activeflag = TRUE,
modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
modifieddate = NOW()
WHERE activeflag = FALSE
AND to_char(modifieddate, 'yyyy-mm-dd') = '2016-03-03'
AND modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin')
AND surveyid IN (
SELECT id FROM survey WHERE studentid = _studentid
)
RETURNING 1
)
SELECT COUNT(*) FROM updated_ssr_rows INTO number_updated;
RAISE NOTICE 'Reactivated % rows in studentsurveyresponse', number_updated;

WITH updated_survey_rows AS (
UPDATE survey
SET activeflag = TRUE,
modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
modifieddate = NOW()
WHERE activeflag = FALSE
AND studentid = _studentid
AND to_char(modifieddate, 'yyyy-mm-dd') = '2016-03-03'
AND modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin')
RETURNING 1
)
SELECT COUNT(*) FROM updated_survey_rows INTO number_updated;
RAISE NOTICE 'Reactivated % rows in survey', number_updated;
END IF;

WITH updated_sap_rows AS (
UPDATE studentassessmentprogram
SET activeflag = TRUE
WHERE activeflag = FALSE
AND studentid = _studentid
AND assessmentprogramid = assessmentprogram_record.id
RETURNING 1
)
SELECT COUNT(*) FROM updated_sap_rows INTO number_updated;
RAISE NOTICE 'Reactivated % rows in studentassessmentprogram', number_updated;
END;
$$;


ALTER FUNCTION public.reactivate_student_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) OWNER TO aart;

--
-- Name: reactivate_student_from_assessment_program(bigint, text, integer); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION reactivate_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $$
DECLARE
	enrollment_record RECORD;
	assessmentprogram_record RECORD;
	number_updated INTEGER;
	modified_user INTEGER;
BEGIN
        modified_user := (SELECT id FROM aartuser WHERE username = 'cetesysadmin');
	SELECT *
	FROM assessmentprogram
	WHERE abbreviatedname = _assessmentprogramabbr AND activeflag = TRUE
	LIMIT 1
	INTO assessmentprogram_record;
	
	IF assessmentprogram_record IS NULL THEN
		RAISE NOTICE 'No assessment program ''%'' found', _assessmentprogramabbr;
		RETURN;
	END IF;
	
	FOR enrollment_record IN (
		SELECT *
		FROM enrollment enrl
		WHERE enrl.studentid = _studentid AND enrl.currentschoolyear = _schoolyear AND enrl.activeflag = TRUE
	)
	LOOP
		RAISE NOTICE 'Processing enrollmentid %', enrollment_record.id;
		
		WITH updated_ettsa_rows AS (
			UPDATE enrollmenttesttypesubjectarea
			SET activeflag = TRUE,
			modifieduser = modified_user,
			modifieddate = NOW()
			WHERE activeflag = FALSE
			AND enrollmentid = enrollment_record.id
			AND testtypeid IN (
				SELECT tt.id
				FROM testtype tt
				INNER JOIN assessment a ON tt.assessmentid = a.id AND tt.activeflag = TRUE AND a.activeflag = TRUE
				INNER JOIN testingprogram tp ON a.testingprogramid = tp.id AND tp.activeflag = TRUE
				WHERE tp.assessmentprogramid = assessmentprogram_record.id
			)
			RETURNING 1
		)
		SELECT COUNT(*) FROM updated_ettsa_rows INTO number_updated;
		RAISE NOTICE 'Reactivated % rows in enrollmenttesttypesubjectarea', number_updated;
	END LOOP;
	
	
	IF _assessmentprogramabbr = 'DLM' THEN
		RAISE NOTICE 'DLM detected. Reactivating First Contact Survey data...';

		WITH updated_ssr_rows AS (
			UPDATE studentsurveyresponse
			SET activeflag = TRUE,
			modifieduser = modified_user,
			modifieddate = NOW()
			WHERE activeflag = FALSE
			AND surveyid IN (
				SELECT id FROM survey WHERE studentid = _studentid
				order by id desc limit 1
			)
			RETURNING 1
		)
		SELECT COUNT(*) FROM updated_ssr_rows INTO number_updated;
		RAISE NOTICE 'Reactivated % rows in studentsurveyresponse', number_updated;

		WITH updated_survey_rows AS (
			UPDATE survey
			SET activeflag = TRUE,
			modifieduser = modified_user,
			modifieddate = NOW()
			WHERE activeflag = FALSE
			AND studentid = _studentid
			AND id IN (
				SELECT id FROM survey WHERE studentid = _studentid
				order by id desc limit 1
			)
			RETURNING 1
		)
		SELECT COUNT(*) FROM updated_survey_rows INTO number_updated;
		RAISE NOTICE 'Reactivated % rows in survey', number_updated;
	END IF;

	WITH updated_sap_rows AS (
		UPDATE studentassessmentprogram
		SET activeflag = TRUE
		WHERE activeflag = FALSE
		AND studentid = _studentid
		AND assessmentprogramid = assessmentprogram_record.id
		RETURNING 1
	)
	SELECT COUNT(*) FROM updated_sap_rows INTO number_updated;
	RAISE NOTICE 'Reactivated % rows in studentassessmentprogram', number_updated;
	
END;
$$;


ALTER FUNCTION public.reactivate_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) OWNER TO aart;

--
-- Name: refresh_organization_detail(); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION refresh_organization_detail() RETURNS void
    LANGUAGE plpgsql
    AS $$
	DECLARE 
		storgtypeid bigint;
		dtorgtyoeid bigint;
		schorgtypeid bigint;
		schid bigint;
		dtorgrecord record;
		storgrecord record;
	BEGIN
  		SELECT INTO storgtypeid (select id from organizationtype where typecode='ST' and activeflag is true);
  		SELECT INTO dtorgtyoeid (select id from organizationtype where typecode='DT' and activeflag is true);
  		SELECT INTO schorgtypeid (select id from organizationtype where typecode='SCH' and activeflag is true);
  		
		DELETE from organizationtreedetail;
		
  		FOR schid IN (select id from organization where organizationtypeid=schorgtypeid and activeflag = true)
		  LOOP
		  select id,organizationname,displayidentifier into dtorgrecord from organization_parent(schid) where organizationtypeid=dtorgtyoeid limit 1;
		  select id,organizationname,displayidentifier into storgrecord from organization_parent(schid) where organizationtypeid=storgtypeid limit 1;
		  INSERT INTO organizationtreedetail(schoolid, schoolname, schooldisplayidentifier, districtid, districtname, 
			districtdisplayidentifier, stateid, statename, statedisplayidentifier)
		     select org1.id as schoolid,organizationname as schoolname,
		       displayidentifier as schooldisplayidentifier,
		       (dtorgrecord.id) districtid,
		       (dtorgrecord.organizationname) districtname,
		       (dtorgrecord.displayidentifier) districtdisplayidentifier,
		       (storgrecord.id) stateid,
		       (storgrecord.organizationname) statename,
		       (storgrecord.displayidentifier) statedisplayidentifier
		   from organization org1
		   where id=schid and activeflag = true;
		END LOOP; 
        END;
	$$;


ALTER FUNCTION public.refresh_organization_detail() OWNER TO aart;

--
-- Name: remove_student_from_assessment_program(bigint, text, integer); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION remove_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $$
DECLARE
	enrollment_record RECORD;
	assessmentprogram_record RECORD;
	number_updated INTEGER;
BEGIN
	SELECT *
	FROM assessmentprogram
	WHERE abbreviatedname = _assessmentprogramabbr AND activeflag = TRUE
	LIMIT 1
	INTO assessmentprogram_record;
	
	IF assessmentprogram_record IS NULL THEN
		RAISE NOTICE 'No assessment program ''%'' found', _assessmentprogramabbr;
		RETURN;
	END IF;
	
	FOR enrollment_record IN (
		SELECT *
		FROM enrollment enrl
		WHERE enrl.studentid = _studentid AND enrl.currentschoolyear = _schoolyear AND enrl.activeflag = TRUE
	)
	LOOP
		RAISE NOTICE 'Processing enrollmentid %', enrollment_record.id;
		
		WITH updated_ettsa_rows AS (
			UPDATE enrollmenttesttypesubjectarea
			SET activeflag = FALSE,
			modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
			modifieddate = NOW()
			WHERE activeflag = TRUE
			AND enrollmentid = enrollment_record.id
			AND testtypeid IN (
				SELECT tt.id
				FROM testtype tt
				INNER JOIN assessment a ON tt.assessmentid = a.id AND tt.activeflag = TRUE AND a.activeflag = TRUE
				INNER JOIN testingprogram tp ON a.testingprogramid = tp.id AND tp.activeflag = TRUE
				WHERE tp.assessmentprogramid = assessmentprogram_record.id
			)
			RETURNING 1
		)
		SELECT COUNT(*) FROM updated_ettsa_rows INTO number_updated;
		RAISE NOTICE 'Deactivated % rows in enrollmenttesttypesubjectarea', number_updated;
	END LOOP;
	
	IF _assessmentprogramabbr = 'DLM' THEN
		RAISE NOTICE 'DLM detected. Deactivating First Contact Survey data...';

		WITH updated_ssr_rows AS (
			UPDATE studentsurveyresponse
			SET activeflag = FALSE,
			modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
			modifieddate = NOW()
			WHERE activeflag = TRUE
			AND surveyid IN (
				SELECT id FROM survey WHERE studentid = _studentid
			)
			RETURNING 1
		)
		SELECT COUNT(*) FROM updated_ssr_rows INTO number_updated;
		RAISE NOTICE 'Deactivated % rows in studentsurveyresponse', number_updated;

		WITH updated_survey_rows AS (
			UPDATE survey
			SET activeflag = FALSE,
			modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
			modifieddate = NOW()
			WHERE activeflag = TRUE
			AND studentid = _studentid
			RETURNING 1
		)
		SELECT COUNT(*) FROM updated_survey_rows INTO number_updated;
		RAISE NOTICE 'Deactivated % rows in survey', number_updated;
	END IF;
	
	WITH updated_sap_rows AS (
		UPDATE studentassessmentprogram
		SET activeflag = FALSE
		WHERE activeflag = TRUE
		AND studentid = _studentid
		AND assessmentprogramid = assessmentprogram_record.id
		RETURNING 1
	)
	SELECT COUNT(*) FROM updated_sap_rows INTO number_updated;
	RAISE NOTICE 'Deactivated % rows in studentassessmentprogram', number_updated;
END;
$$;


ALTER FUNCTION public.remove_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) OWNER TO aart;

--
-- Name: remove_student_itiplan(bigint, text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION remove_student_itiplan(in_studentid bigint, in_essentialelement text) RETURNS void
    LANGUAGE plpgsql
    AS $$ 

DECLARE
                                ITIHISTORYRECORDS RECORD;
                                cetesysadminid BIGINT;
                                numberOfITIPlans INT;
BEGIN
                RAISE NOTICE 'STARTING finding itiplans of student..% with essentialelement...%', in_studentid, in_essentialelement;
                SELECT INTO cetesysadminid (SELECT id FROM aartuser WHERE username = 'cetesysadmin');
                SELECT INTO numberOfITIPlans (
                                                select count(distinct itih.id) from ititestsessionhistory itih 
                                                join testsession ts on itih.testsessionid = ts.id
                                                join studentstests stutst on stutst.testsessionid = ts.id
                                                join category c on stutst.status = c.id
                                                where itih.studentid=in_studentid
                                                and itih.essentialelementid in (select id from contentframeworkdetail where contentcode=in_essentialelement and activeflag is true)
                                                and c.categorycode != 'Complete');
                
                RAISE NOTICE 'VERIFYING IF ITI plan(s) exist for student, essential element combinationin EP.. ';
                IF(numberOfITIPlans > 0) THEN
                                RAISE NOTICE 'VALID ITI Plans found-- Continuing';
                ELSE
                                RAISE NOTICE 'VALID ITI Plans NOT found-- Exiting the process..';
                                RETURN;
                END IF;

                RAISE NOTICE 'PROCEDDING TO DELETE THE ITI PLANS.. ';

                                FOR ITIHISTORYRECORDS IN
                                                select distinct itih.id as ititestsessionhistoryid, itih.testsessionid 
                                                from ititestsessionhistory itih 
                                                join testsession ts on itih.testsessionid = ts.id
                                                join studentstests stutst on stutst.testsessionid = ts.id
                                                join category c on stutst.status = c.id
                                                where itih.studentid=in_studentid
                                                and itih.essentialelementid in (select id from contentframeworkdetail where contentcode=in_essentialelement and activeflag is true)
                                                and c.categorycode != 'Complete'
                                LOOP     
                                                RAISE NOTICE 'deleteing itiplan with ititestsessionhistoryid:%, testsessionid:%', ITIHISTORYRECORDS.ititestsessionhistoryid, ITIHISTORYRECORDS.testsessionid;
                                                delete from studentsresponses where studentstestsid in (select id from studentstests where testsessionid=ITIHISTORYRECORDS.testsessionid);
                                                
                                                delete from studentstestsections where studentstestid in (select id from studentstests where testsessionid=ITIHISTORYRECORDS.testsessionid);
                                                  
                                                delete from studentstests  where id in (select id from studentstests where testsessionid=ITIHISTORYRECORDS.testsessionid);
                                                                                                
                                                delete from testsession where id = ITIHISTORYRECORDS.testsessionid;
                                                
                                                update ititestsessionhistory set activeflag = false, 
                                                                modifieddate = now(), modifieduser = cetesysadminid
                                                                where id=ITIHISTORYRECORDS.ititestsessionhistoryid;

                                END LOOP;
END;
$$;


ALTER FUNCTION public.remove_student_itiplan(in_studentid bigint, in_essentialelement text) OWNER TO aart;

--
-- Name: remove_testsession_data(bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION remove_testsession_data(in_testsessionid bigint) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    studenttestids bigint[];
                
BEGIN
                RAISE NOTICE  'Removing data of testsessionId: %', in_testSessionId;
 
                select ARRAY_AGG(id) into studenttestids  from (
                                select id from studentstests where testsessionid = in_testSessionId) stutst;
                               
                RAISE NOTICE  'Found-% studentstests for testsessionId: %', array_length(studenttestids, 1), in_testSessionId;
 
                delete from studentsresponses where studentstestsectionsid in (select id from studentstestsections where studentstestid=ANY(studenttestids));
                delete from studentstestsectionstasksfoils where studentstestsectionsid in (select id from studentstestsections where studentstestid=ANY(studenttestids));
                delete from studentstestsectionstasks where studentstestsectionsid in (select id from studentstestsections where studentstestid=ANY(studenttestids));
                delete from studentstestsections where studentstestid=ANY(studenttestids);
                delete from studentadaptivetestthetastatus where studentstestid=ANY(studenttestids);
                delete from studentadaptivetestfinaltheta where studentstestid=ANY(studenttestids);
                delete from studentsadaptivetestsections where studentstestid=ANY(studenttestids);
                delete from studentspecialcircumstance where studenttestid=ANY(studenttestids);
                delete from studentstests where id=ANY(studenttestids);
 
                delete from testsession where id = in_testSessionId;
                RAISE NOTICE  'Successfull: Removed data of testsessionId: %', in_testSessionId;
END;
$$;


ALTER FUNCTION public.remove_testsession_data(in_testsessionid bigint) OWNER TO aart;

--
-- Name: removeallstudentsfromrosterwithcourse(character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION removeallstudentsfromrosterwithcourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
 DECLARE
   state_Id BIGINT;
   ayp_sch_id BIGINT;
   att_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   rosterUnEnrolledStuTestSecsStatus BIGINT;
   rosterUnEnrolledStuTestsStatus BIGINT;
   inProgressStuTestsStatus BIGINT;
   pendingStuTestsStatus BIGINT;
   unusedStuTestsStatus BIGINT;
   course_Id BIGINT;
   subject_Id BIGINT;
   teacher_Id BIGINT;
   studentsEnrollemntsRostersRecord RECORD;
   stuTestsRecordsInprgsPenUnusedStatus RECORD;
   error_msg TEXT;

 BEGIN
    error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)) or lower(trim(org.tree_schooldisplayidentifier))=lower(trim(ayp_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||' State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL')||';OR AYP School:'||COALESCE(ayp_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
   SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
   SELECT INTO rosterUnEnrolledStuTestSecsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO rosterUnEnrolledStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO inProgressStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'inprogress');
   SELECT INTO pendingStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'pending');
   SELECT INTO unusedStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'unused');
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
   SELECT INTO course_Id (SELECT id FROM gradecourse WHERE lower(trim(abbreviatedname)) = lower(trim(course_Abbrname)) and activeflag is true and course is true LIMIT 1);
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(trim(abbreviatedname))  = lower(trim(subject_abbrName)) and activeflag is true LIMIT 1);
   SELECT INTO teacher_Id (select DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid  = att_sch_id and case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(teacher_uniqueCommonId)) LIMIT 1);
   error_msg := '';
         IF(subject_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', subject_abbrName;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(subject_abbrName,'NULL');

     ELSE
        IF(course_Id is null) THEN

         RAISE NOTICE 'course_Id % is invalid', course_Abbrname;

         error_msg := '<error>' || 'invalid value on course_abbrName:' || COALESCE(course_Abbrname,'NULL');

     ELSE 

   IF((SELECT count(*) FROM roster WHERE r.activeflag is true AND teacherid = teacher_Id AND statecoursesid = course_Id AND statesubjectareaid = subject_Id AND attendanceschoolid = att_sch_id
          AND currentschoolyear = schoolyear AND lower(trim(coursesectionname)) = lower(trim(roster_name))) = 0) THEN

        RAISE NOTICE 'Roster % not found with subject % , course %, teacher %, attendance school % in school year %', roster_name, subject_abbrName, course_Abbrname, teacher_uniqueCommonId,
                      att_sch_displayidentifier, schoolyear;

        error_msg := '<error>' || 'No rosters found with name:' || COALESCE(roster_name,'NULL') || ';subject:' || COALESCE(subject_abbrName,'NULL') || ';course:' || COALESCE(course_Abbrname,'NULL') || ';teacher:' || COALESCE(teacher_uniqueCommonId,'NULL')
                     ||';attendance school:' || COALESCE(att_sch_displayidentifier,'NULL') || ';and school year:' || CAST(COALESCE(schoolyear,0) AS TEXT);

   ELSE
    FOR studentsEnrollemntsRostersRecord IN (SELECT stu.statestudentidentifier, stu.id as studentId, en.id as enrollmentid, enrl.id as enrlRosterId, enrl.rosterId as rosterId
           FROM student stu JOIN enrollment en on stu.id = en.studentid JOIN enrollmentsrosters enrl on enrl.enrollmentid = en.id and enrl.activeflag is true and stu.activeflag is true and en.activeflag is true
           WHERE enrl.rosterid IN (SELECT r.id FROM roster r
               WHERE r.activeflag is true AND r.statecoursesid = course_Id  and r.activeflag is true and r.teacherid = teacher_id AND r.statesubjectareaid = subject_Id AND r.attendanceschoolid = att_sch_id AND currentschoolyear = schoolyear AND lower(trim(r.coursesectionname)) = lower(trim(roster_name)))
               AND en.attendanceschoolid = att_sch_id AND en.aypschoolid = ayp_sch_id AND en.currentschoolyear = schoolyear AND stu.stateid = state_Id AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true)
        LOOP
          UPDATE enrollmentsrosters SET activeflag = false,modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId
                  WHERE enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid AND rosterid = studentsEnrollemntsRostersRecord.rosterId
                      AND id = studentsEnrollemntsRostersRecord.enrlRosterId;

           RAISE NOTICE 'Student(%) with Id : % is removed from the rosterId: %  enrollmentrosterId: % ', studentsEnrollemntsRostersRecord.statestudentidentifier, studentsEnrollemntsRostersRecord.studentId,
                       studentsEnrollemntsRostersRecord.rosterId, studentsEnrollemntsRostersRecord.enrlRosterId;

           error_msg := '<success> Student:'|| COALESCE(studentsEnrollemntsRostersRecord.statestudentidentifier,'NULL') || ';  removed from roster:' || COALESCE(roster_name,'NULL');

           INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', studentsEnrollemntsRostersRecord.enrlRosterId, ceteSysAdminUserId, now(),
		'RM_STUDENT_FROM_ROSTER', ('{"rosterId":' || studentsEnrollemntsRostersRecord.rosterId  || ',"enrollmentId":'
				|| studentsEnrollemntsRostersRecord.enrollmentid || ',"enrollmentRosterId":' || studentsEnrollemntsRostersRecord.enrlRosterId || '}')::json);

           FOR stuTestsRecordsInprgsPenUnusedStatus IN (SELECT st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
                FROM studentstests st JOIN testsession ts ON st.testsessionid = ts.id JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		 WHERE st.activeflag=true  and ts.activeflag=true AND ts.rosterid = studentsEnrollemntsRostersRecord.rosterId 
                AND st.enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid AND (otw.effectivedate <= now() AND now() <= otw.expirydate)
                AND st.status in (inProgressStuTestsStatus, pendingStuTestsStatus, unusedStuTestsStatus))
	    LOOP
	        PERFORM inActivateStuTestsTrackerITITestsessions(studentTestsId := stuTestsRecordsInprgsPenUnusedStatus.id, inActiveStuTestSecStatusId := rosterUnEnrolledStuTestSecsStatus,
	            inActiveStuTestStatusId := rosterUnEnrolledStuTestsStatus, testsession_Id := stuTestsRecordsInprgsPenUnusedStatus.testsessionid, student_Id :=stuTestsRecordsInprgsPenUnusedStatus.studentid);
            END LOOP;
      UPDATE ititestsessionhistory SET activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId, status = rosterUnEnrolledStuTestsStatus
	     WHERE studentenrlrosterid IN (SELECT id FROM enrollmentsrosters WHERE enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid  and rosterid = studentsEnrollemntsRostersRecord.rosterId)
             AND status = pendingStuTestsStatus AND activeflag IS true;
   END LOOP;
END IF;
END IF;
END IF;
END IF;
RETURN error_msg;
END;
$$;


ALTER FUNCTION public.removeallstudentsfromrosterwithcourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) OWNER TO aart;

--
-- Name: removeallstudentsfromrosterwithnocourse(character varying, character varying, character varying, bigint, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION removeallstudentsfromrosterwithnocourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
 DECLARE
   state_Id BIGINT;
   ayp_sch_id BIGINT;
   att_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   rosterUnEnrolledStuTestSecsStatus BIGINT;
   rosterUnEnrolledStuTestsStatus BIGINT;
   inProgressStuTestsStatus BIGINT;
   pendingStuTestsStatus BIGINT;
   unusedStuTestsStatus BIGINT;
   course_Id BIGINT;
   subject_Id BIGINT;
   teacher_Id BIGINT;
   studentsEnrollemntsRostersRecord RECORD;
   stuTestsRecordsInprgsPenUnusedStatus RECORD;
   error_msg TEXT;

 BEGIN
    error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)) or lower(trim(org.tree_schooldisplayidentifier))=lower(trim(ayp_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||' State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL')||';OR AYP School:'||COALESCE(ayp_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
   SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
   SELECT INTO rosterUnEnrolledStuTestSecsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO rosterUnEnrolledStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO inProgressStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'inprogress');
   SELECT INTO pendingStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'pending');
   SELECT INTO unusedStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'unused');
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(trim(abbreviatedname))  = lower(trim(subject_abbrName)) AND activeflag is true LIMIT 1);
   SELECT INTO teacher_Id (select DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid  = att_sch_id and case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(teacher_uniqueCommonId)) LIMIT 1);
   error_msg := '';
      IF(subject_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', subject_abbrName;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(subject_abbrName,'NULL');

     ELSE

   IF((SELECT count(r.*) FROM roster r WHERE r.activeflag is true AND  r.teacherid = teacher_id AND r.statesubjectareaid = subject_Id and r.activeflag is true
         AND r.attendanceschoolid = att_sch_id AND currentschoolyear = schoolyear AND lower(trim(r.coursesectionname)) = lower(trim(roster_name))) = 0) THEN

          RAISE NOTICE 'Roster % not found with subject % , teacher %, attendance school % in school year %', roster_name, subject_abbrName, teacher_uniqueCommonId,
                      att_sch_displayidentifier, schoolyear;

         error_msg := '<error>' || 'No rosters found with name:' || COALESCE(roster_name,'NULL') || ';subject:' || COALESCE(subject_abbrName,'NULL') || ';teacher:' ||
                      COALESCE(teacher_uniqueCommonId,'NULL') || ';attendance school:' || COALESCE(att_sch_displayidentifier,'NULL') || ';and school year:' || CAST(COALESCE(schoolyear,0) AS TEXT);

   ELSE
     FOR studentsEnrollemntsRostersRecord IN (SELECT stu.statestudentidentifier, stu.id as studentId, en.id as enrollmentid, enrl.id as enrlRosterId, enrl.rosterId as rosterId
           FROM student stu JOIN enrollment en on stu.id = en.studentid JOIN enrollmentsrosters enrl on enrl.enrollmentid = en.id and enrl.activeflag is true and stu.activeflag is true and  en.activeflag is true
           WHERE enrl.rosterid IN (SELECT r.id FROM roster r 
               WHERE r.activeflag is true AND  r.teacherid = teacher_id AND   r.activeflag is true and r.statesubjectareaid = subject_Id AND r.attendanceschoolid = att_sch_id AND currentschoolyear = schoolyear AND lower(trim(r.coursesectionname)) = lower(trim(roster_name)))
               AND en.attendanceschoolid = att_sch_id AND en.aypschoolid = ayp_sch_id AND en.currentschoolyear = schoolyear AND stu.stateid = state_Id)
        LOOP
          UPDATE enrollmentsrosters SET activeflag = false,modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId
                  WHERE enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid AND rosterid = studentsEnrollemntsRostersRecord.rosterId
                      AND id = studentsEnrollemntsRostersRecord.enrlRosterId;

           RAISE NOTICE 'Student(%) with Id : % is removed from the rosterId: %  enrollmentrosterId: % ', studentsEnrollemntsRostersRecord.statestudentidentifier, studentsEnrollemntsRostersRecord.studentId,
                       studentsEnrollemntsRostersRecord.rosterId, studentsEnrollemntsRostersRecord.enrlRosterId;

           error_msg := '<success> Student with id :'|| COALESCE(studentsEnrollemntsRostersRecord.statestudentidentifier,'NULL') || ';  removed from roster ' || COALESCE(roster_name,'NULL');

           INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', studentsEnrollemntsRostersRecord.enrlRosterId, ceteSysAdminUserId, now(),
		'RM_STUDENT_FROM_ROSTER', ('{"rosterId":' || studentsEnrollemntsRostersRecord.rosterId  || ',"enrollmentId":'
				|| studentsEnrollemntsRostersRecord.enrollmentid || ',"enrollmentRosterId":' || studentsEnrollemntsRostersRecord.enrlRosterId || '}')::json);

           FOR stuTestsRecordsInprgsPenUnusedStatus IN (SELECT st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
                FROM studentstests st JOIN testsession ts ON st.testsessionid = ts.id and  st.activeflag=true  and ts.activeflag=true JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		 WHERE st.activeflag=true AND ts.rosterid = studentsEnrollemntsRostersRecord.rosterId
                AND st.enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid AND (otw.effectivedate <= now() AND now() <= otw.expirydate)
                AND st.status in (inProgressStuTestsStatus, pendingStuTestsStatus, unusedStuTestsStatus))
	    LOOP
	        PERFORM inActivateStuTestsTrackerITITestsessions(studentTestsId := stuTestsRecordsInprgsPenUnusedStatus.id, inActiveStuTestSecStatusId := rosterUnEnrolledStuTestSecsStatus,
	            inActiveStuTestStatusId := rosterUnEnrolledStuTestsStatus, testsession_Id := stuTestsRecordsInprgsPenUnusedStatus.testsessionid, student_Id :=stuTestsRecordsInprgsPenUnusedStatus.studentid);
            END LOOP;
      UPDATE ititestsessionhistory SET activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId, status = rosterUnEnrolledStuTestsStatus
	     WHERE studentenrlrosterid IN (SELECT id FROM enrollmentsrosters WHERE enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid  and rosterid = studentsEnrollemntsRostersRecord.rosterId)
             AND status = pendingStuTestsStatus AND activeflag IS true;
    END LOOP;
  END IF;
  END IF;
  END IF;
RETURN error_msg;
END;
$$;


ALTER FUNCTION public.removeallstudentsfromrosterwithnocourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) OWNER TO aart;

--
-- Name: removestudentfromrosterwithcourse(character varying, character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION removestudentfromrosterwithcourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
 DECLARE
   state_Id BIGINT;
   ayp_sch_id BIGINT;
   att_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   rosterUnEnrolledStuTestSecsStatus BIGINT;
   rosterUnEnrolledStuTestsStatus BIGINT;
   inProgressStuTestsStatus BIGINT;
   pendingStuTestsStatus BIGINT;
   unusedStuTestsStatus BIGINT;
   course_Id BIGINT;
   subject_Id BIGINT;
   teacher_Id BIGINT;
   studentsEnrollemntsRostersRecord RECORD;
   stuTestsRecordsInprgsPenUnusedStatus RECORD;
   error_msg TEXT;
 BEGIN
    error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)) or lower(trim(org.tree_schooldisplayidentifier))=lower(trim(ayp_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(statestudent_identifier,'NULL')||';State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL')||';OR AYP School:'||COALESCE(ayp_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
   SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
   SELECT INTO rosterUnEnrolledStuTestSecsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO rosterUnEnrolledStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO inProgressStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'inprogress');
   SELECT INTO pendingStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'pending');
   SELECT INTO unusedStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'unused');
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
   SELECT INTO course_Id (SELECT id FROM gradecourse WHERE lower(trim(abbreviatedname)) = lower(trim(course_Abbrname)) and course is true AND activeflag is true  LIMIT 1);
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(trim(abbreviatedname))  = lower(trim(subject_abbrName)) AND activeflag is true  LIMIT 1);
   SELECT INTO teacher_Id (select DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid  = att_sch_id and case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(teacher_uniqueCommonId)) LIMIT 1);
   error_msg :='';
         IF(subject_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', subject_abbrName;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(subject_abbrName,'NULL');

     ELSE
        IF(course_Id is null) THEN

         RAISE NOTICE 'course_Id % is invalid', course_Abbrname;

         error_msg := '<error>' || 'invalid value on course_abbrName:' || COALESCE(course_Abbrname,'NULL');

     ELSE 
  RAISE NOTICE 'Beginning remove student from roster with course';
   IF((SELECT count(stu.*)
           FROM student stu JOIN enrollment en on stu.id = en.studentid JOIN enrollmentsrosters enrl on enrl.enrollmentid = en.id and enrl.activeflag is true and stu.activeflag is true and en.activeflag is true
           WHERE lower(trim(stu.statestudentidentifier)) = lower(trim(statestudent_identifier)) AND
           enrl.rosterid IN (SELECT r.id FROM roster r
               WHERE r.activeflag is true AND  r.statecoursesid = course_Id AND r.teacherid = teacher_id AND r.statesubjectareaid = subject_Id AND r.attendanceschoolid = att_sch_id AND currentschoolyear = schoolyear AND lower(trim(r.coursesectionname)) = lower(trim(roster_name)))
               AND en.attendanceschoolid = att_sch_id AND en.aypschoolid = ayp_sch_id AND en.currentschoolyear = schoolyear AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true )<= 0)THEN
          RAISE NOTICE 'Student % not found in state %, attendace school %', statestudent_identifier,stateDisplayidentifier, att_sch_id;
          error_msg := '<error>' || 'Student not found in roster. Student  :'||coalesce(statestudent_identifier,'NULL')|| ';state:' ||coalesce(stateDisplayidentifier,'NULL')||';attendace school:'||coalesce(att_sch_displayidentifier,'NULL')||';ayp school:'||coalesce(ayp_sch_displayidentifier,'NULL');
          error_msg := error_msg ||';associated with teacher:'||coalesce(teacher_uniqueCommonId,'NULL')|| ';roster name:'||coalesce(roster_name,'NULL')|| ';statesubjectarea:'||coalesce(subject_abbrName,'NULL')||';course_Abbrname:'||coalesce(course_Abbrname,'NULL')||';and roster attendanceschoolid:' ||coalesce(att_sch_displayidentifier,'NULL')||';for current currentschoolyear:'||cast(coalesce(schoolyear,0)as text);
         RAISE NOTICE '%',error_msg;
   ELSE
   FOR studentsEnrollemntsRostersRecord IN (SELECT stu.statestudentidentifier, stu.id as studentId, en.id as enrollmentid, enrl.id as enrlRosterId, enrl.rosterId as rosterId
           FROM student stu JOIN enrollment en on stu.id = en.studentid JOIN enrollmentsrosters enrl on enrl.enrollmentid = en.id and stu.activeflag is true and en.activeflag is true
           WHERE lower(trim(stu.statestudentidentifier)) = lower(trim(statestudent_identifier)) AND
           enrl.rosterid IN (SELECT r.id FROM roster r
               WHERE r.activeflag is true AND  r.statecoursesid = course_Id AND r.teacherid = teacher_id AND r.statesubjectareaid = subject_Id AND r.attendanceschoolid = att_sch_id AND currentschoolyear = schoolyear AND lower(trim(r.coursesectionname)) = lower(trim(roster_name)))
               AND en.attendanceschoolid = att_sch_id AND en.aypschoolid = ayp_sch_id AND en.currentschoolyear = schoolyear AND stu.stateid = state_Id)
        LOOP
          UPDATE enrollmentsrosters SET activeflag = false,modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId
                  WHERE enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid AND rosterid = studentsEnrollemntsRostersRecord.rosterId
                      AND id = studentsEnrollemntsRostersRecord.enrlRosterId;

           RAISE NOTICE 'Student(%) with Id : % is removed from the rosterId: %  enrollmentrosterId: % ', studentsEnrollemntsRostersRecord.statestudentidentifier, studentsEnrollemntsRostersRecord.studentId,
                       studentsEnrollemntsRostersRecord.rosterId, studentsEnrollemntsRostersRecord.enrlRosterId;
           error_msg = '<success>'||'Student:'||COALESCE(studentsEnrollemntsRostersRecord.statestudentidentifier,'NULL')||';  removed from the rosterId:'||CAST(COALESCE(studentsEnrollemntsRostersRecord.rosterId,0)AS TEXT);

           INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', studentsEnrollemntsRostersRecord.enrlRosterId, ceteSysAdminUserId, now(),
    'RM_STUDENT_FROM_ROSTER', ('{"rosterId":' || studentsEnrollemntsRostersRecord.rosterId  || ',"enrollmentId":'
        || studentsEnrollemntsRostersRecord.enrollmentid || ',"enrollmentRosterId":' || studentsEnrollemntsRostersRecord.enrlRosterId || '}')::json);

           FOR stuTestsRecordsInprgsPenUnusedStatus IN (SELECT st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
                FROM studentstests st JOIN testsession ts ON st.testsessionid = ts.id and st.activeflag=true  and ts.activeflag=true JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
     WHERE st.activeflag=true AND ts.rosterid = studentsEnrollemntsRostersRecord.rosterId
                AND st.enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid AND (otw.effectivedate <= now() AND now() <= otw.expirydate)
                AND st.status in (inProgressStuTestsStatus, pendingStuTestsStatus, unusedStuTestsStatus))
      LOOP
          PERFORM inActivateStuTestsTrackerITITestsessions(studentTestsId := stuTestsRecordsInprgsPenUnusedStatus.id, inActiveStuTestSecStatusId := rosterUnEnrolledStuTestSecsStatus,
              inActiveStuTestStatusId := rosterUnEnrolledStuTestsStatus, testsession_Id := stuTestsRecordsInprgsPenUnusedStatus.testsessionid, student_Id :=stuTestsRecordsInprgsPenUnusedStatus.studentid);
            END LOOP;
      UPDATE ititestsessionhistory SET activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId, status = rosterUnEnrolledStuTestsStatus
       WHERE studentenrlrosterid IN (SELECT id FROM enrollmentsrosters WHERE enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid  and rosterid = studentsEnrollemntsRostersRecord.rosterId)
             AND status = pendingStuTestsStatus AND activeflag IS true;
  END LOOP;
  END IF;
  END IF;
  END IF;
  END IF;
  RETURN error_msg;
END;
$$;


ALTER FUNCTION public.removestudentfromrosterwithcourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) OWNER TO aart;

--
-- Name: removestudentfromrosterwithnocourse(character varying, character varying, character varying, character varying, bigint, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION removestudentfromrosterwithnocourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
 DECLARE
   state_Id BIGINT;
   ayp_sch_id BIGINT;
   att_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   contentArea_Id BIGINT;
   rosterUnEnrolledStuTestSecsStatus BIGINT;
   rosterUnEnrolledStuTestsStatus BIGINT;
   inProgressStuTestsStatus BIGINT;
   pendingStuTestsStatus BIGINT;
   unusedStuTestsStatus BIGINT;
   subject_Id BIGINT;
   teacher_Id BIGINT;
   studentsEnrollemntsRostersRecord RECORD;
   stuTestsRecordsInprgsPenUnusedStatus RECORD;
   error_msg TEXT;
 BEGIN
    error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)) or lower(trim(org.tree_schooldisplayidentifier))=lower(trim(ayp_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(statestudent_identifier,'NULL')||';State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL')||';OR AYP School:'||COALESCE(ayp_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE
   SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
   SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
   SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
   SELECT INTO rosterUnEnrolledStuTestSecsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO rosterUnEnrolledStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'rosterunenrolled');
   SELECT INTO inProgressStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'inprogress');
   SELECT INTO pendingStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'pending');
   SELECT INTO unusedStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'unused');
   SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
   SELECT INTO subject_Id (SELECT id FROM contentarea WHERE lower(trim(abbreviatedname))  = lower(trim(subject_abbrName)) AND activeflag is true  LIMIT 1);
   SELECT INTO teacher_Id (select DISTINCT au.id FROM aartuser au JOIN usersorganizations uso ON uso.aartuserid = au.id WHERE au.activeflag is true AND  uso.organizationid  = att_sch_id and case when lower(coalesce(uniquecommonidentifier,''))='' then lower(trim(email)) else  lower(trim(uniquecommonidentifier)) end = lower(trim(teacher_uniqueCommonId)) LIMIT 1);
   error_msg:='';
         IF(subject_Id is null) THEN

         RAISE NOTICE 'subject_Id % is invalid', subject_abbrName;

         error_msg := '<error>' || 'invalid value on subject_abbrName:' || COALESCE(subject_abbrName,'NULL');

     ELSE

   IF((SELECT count(1)
		   FROM student stu JOIN enrollment en on stu.id = en.studentid JOIN enrollmentsrosters enrl on enrl.enrollmentid = en.id and stu.activeflag is true and en.activeflag is true
		   WHERE lower(trim(stu.statestudentidentifier)) = lower(trim(statestudent_identifier)) AND
		   enrl.rosterid IN (SELECT r.id FROM roster r
		       WHERE r.activeflag is true AND  r.teacherid = teacher_id AND r.statesubjectareaid = subject_Id AND r.attendanceschoolid = att_sch_id AND currentschoolyear = schoolyear AND lower(trim(r.coursesectionname)) = lower(trim(roster_name)))
		       AND en.attendanceschoolid = att_sch_id AND en.aypschoolid = ayp_sch_id AND en.currentschoolyear = schoolyear AND stu.stateid = state_Id)<=0)THEN
		  RAISE NOTICE 'Student % not found in state %, attendace school %', statestudent_identifier,stateDisplayidentifier, att_sch_id;
		  error_msg := '<error>' || ' Student not found in roster. Student:'||coalesce(statestudent_identifier,'NULL')|| ';state:' ||coalesce(stateDisplayidentifier,'NULL')||';attendace school:'||coalesce(att_sch_displayidentifier,'NULL')||';ayp school:'||coalesce(ayp_sch_displayidentifier,'NULL');
		  error_msg := error_msg ||';associated with teacher:'||coalesce(teacher_uniqueCommonId,'NULL')|| ';roster name:'||coalesce(roster_name,'NULL')|| ';statesubjectarea:'||coalesce(subject_abbrName,'NULL')||';and roster attendanceschoolid:' ||coalesce(att_sch_displayidentifier,'NULL')||';for current currentschoolyear:'||cast(coalesce(schoolyear,0)as text);
		  RAISE NOTICE '%',error_msg;          
   ELSE
    FOR studentsEnrollemntsRostersRecord IN (SELECT stu.statestudentidentifier, stu.id as studentId, en.id as enrollmentid, enrl.id as enrlRosterId, enrl.rosterId as rosterId
           FROM student stu JOIN enrollment en on stu.id = en.studentid JOIN enrollmentsrosters enrl on enrl.enrollmentid = en.id and enrl.activeflag is true and stu.activeflag is true and en.activeflag is true
           WHERE lower(trim(stu.statestudentidentifier)) = lower(trim(statestudent_identifier)) AND
           enrl.rosterid IN (SELECT r.id FROM roster r
               WHERE r.activeflag is true AND  r.teacherid = teacher_id AND r.statesubjectareaid = subject_Id AND r.attendanceschoolid = att_sch_id AND currentschoolyear = schoolyear AND lower(trim(r.coursesectionname)) = lower(trim(roster_name)))
               AND en.attendanceschoolid = att_sch_id AND en.aypschoolid = ayp_sch_id AND en.currentschoolyear = schoolyear AND stu.stateid = state_Id)
        LOOP
          UPDATE enrollmentsrosters SET activeflag = false,modifieddate=CURRENT_TIMESTAMP, modifieduser = ceteSysAdminUserId
                  WHERE enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid AND rosterid = studentsEnrollemntsRostersRecord.rosterId
                      AND id = studentsEnrollemntsRostersRecord.enrlRosterId;

           RAISE NOTICE 'Student(%) with Id : % is removed from the rosterId: %  enrollmentrosterId: % ', studentsEnrollemntsRostersRecord.statestudentidentifier, studentsEnrollemntsRostersRecord.studentId,
                       studentsEnrollemntsRostersRecord.rosterId, studentsEnrollemntsRostersRecord.enrlRosterId;
           error_msg = '<success>'||'Student:'||COALESCE(studentsEnrollemntsRostersRecord.statestudentidentifier,'NULL')||';  removed from the rosterId:'||CAST(COALESCE(studentsEnrollemntsRostersRecord.rosterId,0) AS TEXT)||';enrollmentrosterId:'||CAST(COALESCE(studentsEnrollemntsRostersRecord.enrlRosterId,0) AS TEXT);

           INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT_ROSTER', studentsEnrollemntsRostersRecord.enrlRosterId, ceteSysAdminUserId, now(),
    'RM_STUDENT_FROM_ROSTER', ('{"rosterId":' || studentsEnrollemntsRostersRecord.rosterId  || ',"enrollmentId":'
        || studentsEnrollemntsRostersRecord.enrollmentid || ',"enrollmentRosterId":' || studentsEnrollemntsRostersRecord.enrlRosterId || '}')::json);

           FOR stuTestsRecordsInprgsPenUnusedStatus IN (SELECT st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
                FROM studentstests st JOIN testsession ts ON st.testsessionid = ts.id  and st.activeflag is true and ts.activeflag is true  --JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
     WHERE st.activeflag=true AND ts.rosterid = studentsEnrollemntsRostersRecord.rosterId
                AND st.enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid --AND (otw.effectivedate <= now() AND now() <= otw.expirydate)
                AND st.status in (inProgressStuTestsStatus, pendingStuTestsStatus, unusedStuTestsStatus))
      LOOP
          PERFORM inActivateStuTestsTrackerITITestsessions(studentTestsId := stuTestsRecordsInprgsPenUnusedStatus.id, inActiveStuTestSecStatusId := rosterUnEnrolledStuTestSecsStatus,
              inActiveStuTestStatusId := rosterUnEnrolledStuTestsStatus, testsession_Id := stuTestsRecordsInprgsPenUnusedStatus.testsessionid, student_Id :=stuTestsRecordsInprgsPenUnusedStatus.studentid);
            END LOOP;
      UPDATE ititestsessionhistory SET activeflag = false, modifieddate = now(), modifieduser = ceteSysAdminUserId, status = rosterUnEnrolledStuTestsStatus
       WHERE studentenrlrosterid IN (SELECT id FROM enrollmentsrosters WHERE enrollmentid = studentsEnrollemntsRostersRecord.enrollmentid  and rosterid = studentsEnrollemntsRostersRecord.rosterId)
             AND status = pendingStuTestsStatus AND activeflag IS true;
  END LOOP;
  END IF;
  END IF;
  END IF;
  RETURN error_msg;
END;
$$;


ALTER FUNCTION public.removestudentfromrosterwithnocourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) OWNER TO aart;

--
-- Name: reportassessmentprogram_fn(text, text, text, text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION reportassessmentprogram_fn(assessmentprogramcode text, reporttypecode text, subjectcode text, authoritycode text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare 
 assessmentprogram_id bigint;
 reportypeid bigint;
 subjectid bigint;
 stateid bigint;
 authority_id bigint;
BEGIN

 Select into assessmentprogram_id (Select id from assessmentprogram where abbreviatedname ilike (assessmentprogramcode) and activeflag is true); 
 Select into reportypeid (Select id from category where categorycode in (reporttypecode) and activeflag is true);
 Select into subjectid (Select id from contentarea where abbreviatedname ilike (subjectcode) and activeflag is true);
 Select into authority_id (select id from authorities where authority ilike (authoritycode) and activeflag is true limit 1);

 FOR stateid IN(Select orgass.organizationid from orgassessmentprogram orgass 
  inner join organization org on org.id = orgass.organizationid 
  where assessmentprogramid in (Select id from assessmentprogram 
  where abbreviatedname ilike (assessmentprogramcode) and activeflag is true) and organizationtypeid = 2 and orgass.activeflag is true 
  and org.activeflag is true)
 LOOP
  INSERT INTO reportassessmentprogram(
  reporttypeid, assessmentprogramid, createdate, modifieddate, 
  readytoview, activeflag, subjectid, stateid,authorityid)
  VALUES ( reportypeid, assessmentprogram_id, current_timestamp, current_timestamp, 
  false,true, subjectid, stateid,authority_id);
 END LOOP;
RETURN 0;
 EXCEPTION 
  WHEN unique_violation THEN
 RAISE NOTICE 'unique key violation constraint';
RETURN 0;
    WHEN OTHERS THEN
RETURN 1;
 END;
 $$;


ALTER FUNCTION public.reportassessmentprogram_fn(assessmentprogramcode text, reporttypecode text, subjectcode text, authoritycode text) OWNER TO aart;

--
-- Name: string_to_integer_array(text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION string_to_integer_array(inputtext text) RETURNS bigint[]
    LANGUAGE plpgsql
    AS $$ 
		DECLARE
	    elems text[];
	    elemsOut bigint[];
	    validInput boolean;
  		BEGIN
		 inputText := trim( both ']' from (trim(both '[' from inputText) ) );
		 Select inputText similar to '(\d+)(,\s*\d+)*' into validInput;		 
		 if (inputText is null) OR (inputText = '0') OR (inputText = '') OR ( validInput is null) OR (validInput is false) then		
		 	return null;
 		 end if;
    	 elems := string_to_array(inputText, ',');
 		 if elems is null then
  		 	 return null;
 		 end if;

    	 FOR i IN array_lower(elems, 1) .. array_upper(elems, 1) LOOP
      		 elemsOut[i]=cast(elems[i] as bigint);
    	 END LOOP;
    	 return elemsOut;
  	  END
	$$;


ALTER FUNCTION public.string_to_integer_array(inputtext text) OWNER TO aart;

--
-- Name: studentstests_count(text, bigint, bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION studentstests_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "StudentCount" bigint) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
DECLARE
	selectstr text;
	wherestr text;
	result record;
BEGIN
	IF (_assessmentprogram = NULL OR _currentschoolyear = NULL) THEN
		RAISE EXCEPTION 'Please provide assessment program name and current scheool year';
	END IF;
		
	selectstr := 'SELECT (SELECT displayidentifier AS State FROM organization WHERE id =o.stateid),
				(SELECT abbreviatedname AS gradecourse FROM gradecourse WHERE id = tc.gradecourseid),
				(SELECT abbreviatedname AS subject FROM contentarea WHERE id = tc.contentareaid),
				COUNT(distinct st.enrollmentid)  AS studentcount 
				FROM testsession ts 
					JOIN studentstests st on st.testsessionid = ts.id
					JOIN testcollection tc on tc.id = st.testcollectionid
					JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
					JOIN enrollment en on en.id = st.enrollmentid
					JOIN organizationtreedetail o on o.schoolid=en.attendanceschoolid ';
	wherestr := ' WHERE ts.source = ''BATCHAUTO'' and otw.effectivedate <= now() and otw.expirydate > now()
				and '''|| _assessmentprogram ||''' in (
					SELECT ap.abbreviatedname
					FROM assessmentprogram ap
						INNER JOIN studentassessmentprogram sap ON (sap.studentid = st.studentid and ap.id = sap.assessmentprogramid)
					WHERE sap.activeflag = true
	      		) and en.currentschoolyear = ' || _currentschoolyear || 'and en.activeflag is true and st.activeflag is true and ts.activeflag is true';

	IF (_stataeid is not NULL) THEN
		wherestr := wherestr || ' AND o.stateid = ' ||_stataeid;
	END IF;
	IF (_contentareaid is not NULL) THEN
		wherestr := wherestr || ' AND tc.contentareaid = ' || _contentareaid;
	END IF;
	IF (_gradelevel is not NULL) THEN
		wherestr := wherestr || ' AND tc.gradecourseid = ' || _gradelevel;
	END IF;
	
	selectstr := selectstr || wherestr || ' group by o.stateid,tc.gradecourseid ,tc.contentareaid'
		|| ' order by state, gradecourse, subject';
	FOR result IN EXECUTE  selectstr LOOP
		RETURN QUERY SELECT result.State::text, result.gradecourse::text, result.subject::text, result.studentcount::bigint;
	END LOOP;
END;
$$;


ALTER FUNCTION public.studentstests_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "StudentCount" bigint) OWNER TO aart;

--
-- Name: transferstudent(character varying, character varying, character varying, numeric, date, bigint, character varying, character varying, character varying, date, date, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION transferstudent(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, exitreason numeric, exitdate date, schoolyear bigint, new_aypsch character varying, new_attsch character varying, new_dist character varying, new_schentrydate date, new_distentrydate date, statedisplayidentifier character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
         DECLARE
           old_studentEnrollemntRecord RECORD;
           old_stuTestsRecordsInprgsPenUnusedStatus RECORD;
           state_Id BIGINT;
           old_ayp_sch_id BIGINT;
           old_att_sch_id BIGINT;
           new_aypSch_id BIGINT;
           new_attSch_id BIGINT;
           new_dist_id BIGINT;
           exitStuTestSecsStatus BIGINT;
           exitStuTestsStatus BIGINT;
           inProgressStuTestsStatus BIGINT;
           pendingStuTestsStatus BIGINT;
           unusedStuTestsStatus BIGINT;
           ceteSysAdminUserId BIGINT;
           new_EnrlId BIGINT;
           newSchEnrlRecord RECORD;
           enrlTestTypeSubjectAreaRecord RECORD;
           error_msg text;
           new_schEntryDate_cdt timestamp with time zone;
           new_DistEntryDate_cdt timestamp with time zone; 
           exitDate_cdt timestamp with time zone;

         BEGIN
            error_msg :='';
            new_schEntryDate_cdt:=((new_schEntryDate::timestamp) AT TIME ZONE 'CDT');
            new_DistEntryDate_cdt:=((new_DistEntryDate::timestamp) AT TIME ZONE 'CDT');
            exitDate_cdt:=((exitDate::timestamp) AT TIME ZONE 'CDT');
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(old_attSch)) or lower(trim(org.tree_schooldisplayidentifier))=lower(trim(old_aypSch)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(statestudent_identifier,'NULL')||';State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND old Attendance school:'||COALESCE(old_attSch,'NULL')||';OR old AYP School:'||COALESCE(old_attSch,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(stateDisplayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(new_attSch)) or lower(trim(org.tree_schooldisplayidentifier))=lower(trim(new_AypSch)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(statestudent_identifier,'NULL')||';State:'||COALESCE(stateDisplayidentifier,'NULL')||';AND new Attendance school:'||COALESCE(new_attSch,'NULL')||';OR new AYP School:'||COALESCE(new_AypSch,'NULL');
       RAISE NOTICE '%',error_msg;
       ELSE
        	SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(stateDisplayidentifier)) AND activeflag is true);
        	SELECT INTO old_ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(old_aypSch)));
        	SELECT INTO old_att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(old_attSch)));
        	SELECT INTO new_aypSch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(new_AypSch)));
        	SELECT INTO new_attSch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(new_attSch)));
        	SELECT INTO new_dist_id (SELECT districtid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(new_attSch)));
        	SELECT INTO exitStuTestSecsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'exitclearunenrolled');
        	SELECT INTO exitStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'exitclearunenrolled');
        	SELECT INTO inProgressStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'inprogress');
        	SELECT INTO pendingStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'pending');
        	SELECT INTO unusedStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'unused');
        	SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
        	error_msg := '';

           IF((SELECT count(stu.*) FROM student stu JOIN enrollment en ON en.studentid = stu.id
        					WHERE lower(trim(stu.statestudentidentifier)) = lower(trim(statestudent_identifier))
        					AND stu.stateid = state_Id and en.currentschoolyear = schoolyear
        					AND en.aypschoolid = old_ayp_sch_id and en.attendanceschoolid = old_att_sch_id) <= 0) THEN
        	RAISE NOTICE 'Student % not found in state %, attendace school %', statestudent_identifier,stateDisplayidentifier, old_attSch;
        	error_msg := '<error>' || 'Student:'||coalesce(statestudent_identifier,'NULL')|| ';not found in state:' ||coalesce(stateDisplayidentifier,'NULL')||';attendace school:'||coalesce(old_attSch,'NULL')||';ayp school:'||coalesce(old_aypSch,'NULL');
                RAISE NOTICE '%',error_msg;
           ELSE
            FOR old_studentEnrollemntRecord IN (SELECT stu.statestudentidentifier,stu.stateid, en.* FROM student stu JOIN enrollment en ON en.studentid = stu.id
        					WHERE lower(trim(stu.statestudentidentifier)) = lower(trim(statestudent_identifier))
        					AND stu.stateid = state_Id and en.currentschoolyear = schoolyear
        					AND en.aypschoolid = old_ayp_sch_id and en.attendanceschoolid = old_att_sch_id)
             LOOP
                 IF (old_studentEnrollemntRecord.schoolentrydate <= exitDate_cdt) THEN
                   UPDATE enrollment SET exitwithdrawaldate = exitDate_cdt, activeflag = false, exitwithdrawaltype = exitReason, modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = old_studentEnrollemntRecord.id;

                   RAISE NOTICE 'Updated the enrollment record with id: %', old_studentEnrollemntRecord.id;

                  INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT', old_studentEnrollemntRecord.id, ceteSysAdminUserId, now(),
        		'EXIT_STUDENT', ('{"studentId":'|| old_studentEnrollemntRecord.studentid || ',"stateId":' ||  old_studentEnrollemntRecord.stateid
        				|| ',"stateStudentIdentifier":"' || old_studentEnrollemntRecord.statestudentidentifier
        				|| '","aypSchool":' || old_studentEnrollemntRecord.aypschoolid || ',"attendanceSchoolId":'|| old_studentEnrollemntRecord.attendanceschoolid
        				|| ',"exitWithdrawalDate":"' || exitDate || '","exitReason":"' || exitReason ||  '"}')::json);

                  IF ((SELECT count(en.*) FROM enrollment en WHERE studentid = old_studentEnrollemntRecord.studentid AND aypschoolid = new_aypSch_id AND attendanceschoolid = new_attSch_id
                              AND currentschoolyear = schoolyear) <= 0)
                    THEN
        		INSERT INTO enrollment(aypschoolidentifier, residencedistrictidentifier, localstudentidentifier,
        			currentgradelevel, currentschoolyear, attendanceschoolid,
        			schoolentrydate, districtentrydate, stateentrydate, exitwithdrawaldate,
        			exitwithdrawaltype, specialcircumstancestransferchoice,
        			giftedstudent, specialedprogramendingdate,
        			qualifiedfor504, studentid, restrictionid, createddate, createduser,
        			activeflag, modifieddate, modifieduser, aypSchoolId, sourcetype)
        		 VALUES (new_AypSch, new_Dist, old_studentEnrollemntRecord.localstudentidentifier,
        		          old_studentEnrollemntRecord.currentgradelevel, schoolyear, new_attSch_id,
        		          new_schEntryDate_cdt, new_DistEntryDate_cdt, old_studentEnrollemntRecord.stateentrydate, null,
        		          0, old_studentEnrollemntRecord.specialcircumstancestransferchoice,
        		          old_studentEnrollemntRecord.giftedstudent, old_studentEnrollemntRecord.specialedprogramendingdate,
        		          old_studentEnrollemntRecord.qualifiedfor504, old_studentEnrollemntRecord.studentid, old_studentEnrollemntRecord.restrictionid, now(), ceteSysAdminUserId,
        		          true, now(), ceteSysAdminUserId, new_aypSch_id, 'STUDENT_TRANSFER_T') RETURNING id INTO new_EnrlId;

        	    INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT', new_EnrlId, ceteSysAdminUserId, now(),
        		'NEW_ENROLLMENT', ('{"studentId":'|| old_studentEnrollemntRecord.studentid || ',"stateId":' ||  old_studentEnrollemntRecord.stateid
        				|| ',"stateStudentIdentifier":"' || old_studentEnrollemntRecord.statestudentidentifier
        				|| '","aypSchool":' || new_aypSch_id || ',"attendanceSchoolId":'|| new_attSch_id
        				|| ',"grade":' || old_studentEnrollemntRecord.currentgradelevel || ',"schoolEntryDate":"' || new_schEntryDate ||  '"}')::json);

                     FOR enrlTestTypeSubjectAreaRecord IN (SELECT * FROM enrollmenttesttypesubjectarea WHERE enrollmentid = old_studentEnrollemntRecord.id AND activeflag = true)
                     LOOP

                         INSERT INTO enrollmenttesttypesubjectarea(activeflag, enrollmentid, testtypeid, subjectareaid, groupingindicator1, groupingindicator2, createddate, createduser, modifieddate, modifieduser)
                               VALUES(true, new_EnrlId, enrlTestTypeSubjectAreaRecord.testtypeid, enrlTestTypeSubjectAreaRecord.subjectareaid, enrlTestTypeSubjectAreaRecord.groupingindicator1, enrlTestTypeSubjectAreaRecord.groupingindicator2,
                                        now(), ceteSysAdminUserId, now(), ceteSysAdminUserId);

                     END LOOP;

        	  ELSE

        	    FOR newSchEnrlRecord IN (SELECT en.* FROM enrollment en WHERE studentid = old_studentEnrollemntRecord.studentid AND aypschoolid = new_aypSch_id AND attendanceschoolid = new_attSch_id
                              AND currentschoolyear = schoolyear LIMIT 1)
                     LOOP

        		UPDATE enrollment SET activeflag = true, schoolentrydate = new_schEntryDate_cdt, districtentrydate = new_DistEntryDate_cdt, exitwithdrawaldate = null,
        		          exitwithdrawaltype = 0, currentgradelevel = old_studentEnrollemntRecord.currentgradelevel, modifieduser = ceteSysAdminUserId,
        		          modifieddate = now() WHERE id = newSchEnrlRecord.id;

        		RAISE NOTICE 'Enrollment % is updated, already transfered school has enrollment for student % in school year %', newSchEnrlRecord.id, old_studentEnrollemntRecord.statestudentidentifier, schoolyear;
                        error_msg := '<success>';
                     FOR enrlTestTypeSubjectAreaRecord IN (SELECT * FROM enrollmenttesttypesubjectarea WHERE enrollmentid = old_studentEnrollemntRecord.id AND activeflag = true)
                     LOOP

                         INSERT INTO enrollmenttesttypesubjectarea(activeflag, enrollmentid, testtypeid, subjectareaid, groupingindicator1, groupingindicator2, createddate, createduser, modifieddate, modifieduser)
                               VALUES(true, newSchEnrlRecord.id, enrlTestTypeSubjectAreaRecord.testtypeid, enrlTestTypeSubjectAreaRecord.subjectareaid, enrlTestTypeSubjectAreaRecord.groupingindicator1, enrlTestTypeSubjectAreaRecord.groupingindicator2,
                                        now(), ceteSysAdminUserId, now(), ceteSysAdminUserId);

                     END LOOP;

                     END LOOP;

                  END IF;

                  FOR old_stuTestsRecordsInprgsPenUnusedStatus IN (SELECT  st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
                        FROM studentstests st JOIN testsession ts on st.testsessionid = ts.id and st.activeflag=true  and ts.activeflag=true JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
                         WHERE st.activeflag=true AND st.enrollmentid = old_studentEnrollemntRecord.id AND (otw.effectivedate <= now() AND now() <= otw.expirydate)
                         AND st.status in (inProgressStuTestsStatus, pendingStuTestsStatus,unusedStuTestsStatus)) LOOP

        		PERFORM inActivateStuTestsTrackerITITestsessions(studentTestsId := old_stuTestsRecordsInprgsPenUnusedStatus.id , inActiveStuTestSecStatusId := exitStuTestSecsStatus,
        		      inActiveStuTestStatusId := exitStuTestsStatus, testsession_Id := old_stuTestsRecordsInprgsPenUnusedStatus.testsessionid, student_Id := old_stuTestsRecordsInprgsPenUnusedStatus.studentid);


                  END LOOP;
                  UPDATE ititestsessionhistory SET activeflag=false,modifieddate=now(),modifieduser=ceteSysAdminUserId,status=exitStuTestsStatus
        		       WHERE studentenrlrosterid IN (SELECT id FROM enrollmentsrosters WHERE enrollmentid = old_studentEnrollemntRecord.id)
                               AND status = (SELECT cat.id FROM category cat, categorytype ct WHERE ct.id = cat.categorytypeid AND cat.categorycode='pending' AND ct.typecode = 'STUDENT_TEST_STATUS')
                               AND activeflag IS true;
                 ELSE
                   RAISE NOTICE 'Exit withdrawal date(%) is less than the school entry date(%)', exitDate, old_studentEnrollemntRecord.schoolentrydate;
                   error_msg := '<error>' || 'Exit withdrawal date:'||  cast(coalesce(exitDate,'01/01/1900') as text) ||';  less than the school entry date:'  ||  cast(coalesce(old_studentEnrollemntRecord.schoolentrydate,'01/01/1900') as text) ;
               END IF;
           END LOOP;
             END IF;
             END IF;
             END IF;
           RETURN error_msg;
           END;
        $$;


ALTER FUNCTION public.transferstudent(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, exitreason numeric, exitdate date, schoolyear bigint, new_aypsch character varying, new_attsch character varying, new_dist character varying, new_schentrydate date, new_distentrydate date, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: update_breached_test(text[], text, text, text, text, text, text, bigint, text, text, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION update_breached_test(_statestudentidentifiers text[], _grade text, _contentarea text, _assessmentprogram text, _stage text, _state text, _breachedtestsession text, _breachedtest bigint, _clearscope text, _orgname text, _currentschoolyear bigint) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	stdtestid bigint;
	stdtestids bigint[];
	stcount integer := array_length(_statestudentidentifiers, 1);
	breachtestsession_id bigint;
	clear_completed_test boolean := false;
	enrollmethod text;
	nextstagetestsession bigint;
	nextstdtestid bigint;
	
BEGIN
	IF(_breachedtestsession is NULL OR _breachedtest is NULL) THEN
		RAISE NOTICE 'Please provide breached testsession and test form';
		RETURN;
	ELSE
		SELECT id INTO _breachedtest FROM test WHERE externalid = _breachedtest AND activeflag IS TRUE limit 1;
		RAISE INFO 'Breached EP testid : %', _breachedtest;
	END IF;
	IF (_grade is NULL OR _contentarea is NULL OR _assessmentprogram is NULL OR _stage is NULL OR _state is NULL OR _currentschoolyear is NULL ) THEN
		RAISE NOTICE 'Please provide all the required input variables - ContenArea, AssessmentProgram, Stage, State and Current School Year';
		RETURN;
	END IF;
	-- get testsessionid, enrollmentmethod
	SELECT tm.methodcode, ts.id INTO enrollmethod, breachtestsession_id FROM testenrollmentmethod tm
		JOIN operationaltestwindow otw ON otw.testenrollmentmethodid = tm.id and otw.activeflag is true and otw.effectivedate <= now() and otw.expirydate > now() and otw.testenrollmentflag is true
		JOIN operationaltestwindowstestcollections otwtc ON otwtc.operationaltestwindowid = otw.id and otwtc.activeflag is true
		JOIN testcollection tc ON tc.id = otwtc.testcollectionid 
		JOIN testsession ts ON ts.testcollectionid = otwtc.testcollectionid and ts.activeflag is true 
		JOIN testcollectionstests tct ON tct.testcollectionid = tc.id and tct.testid = _breachedtest
	WHERE ts.name ilike _breachedtestsession and ts.stageid = (SELECT id FROM stage WHERE code LIKE _stage) and ts.schoolyear = _currentschoolyear and tc.contentareaid = (SELECT ID FROM contentarea WHERE abbreviatedname LIKE _contentarea);
	IF (breachtestsession_id IS NULL) THEN
		RAISE NOTICE 'No testsession found with the given information';
		RETURN;
	END IF;
	IF (_statestudentidentifiers IS NOT NULL AND stcount > 0) THEN
		--if specific student list is provided, completed tests also cleared
		clear_completed_test := true;
		SELECT array_agg(st.id) INTO stdtestids FROM studentstests st
			JOIN student s ON s.id = st.studentid AND s.activeflag = true
			JOIN ENROLLMENT en ON en.studentid = s.id AND en.id = st.enrollmentid AND en.activeflag is true AND en.currentschoolyear = _currentschoolyear
			JOIN organizationtreedetail OT ON OT.schoolid = En.attendanceschoolid 
			--AND OT.statedisplayidentifier = _orgname 
			AND statedisplayidentifier = _state
			WHERE en.currentgradelevel IN (select id from gradecourse where abbreviatedname ilike _grade)
				AND st.activeflag is true 
				AND st.status IN ( SELECT category.id FROM category JOIN public.categorytype ON category.categorytypeid = categorytype.id 
							WHERE categorytype.typecode = 'STUDENT_TEST_STATUS'
							and category.categorycode = ANY(CASE
								WHEN clear_completed_test THEN ARRAY['unused','inprogress','complete']
								ELSE ARRAY['unused','inprogress']
								END))
				AND st.testid = _breachedtest AND testsessionid = breachtestsession_id
				AND s.statestudentidentifier in (SELECT * FROM unnest(_statestudentidentifiers));
		
	ELSE
		IF (_clearscope is NULL OR _orgname is NULL) THEN
			RAISE NOTICE 'Please provide the scope or Studentidentifiers to clear breached tests ';
			RETURN;
		END IF;
		
		IF (_clearscope = 'ST') THEN
			SELECT array_agg(st.id), array_agg(s.statestudentidentifier) INTO stdtestids,_statestudentidentifiers  FROM studentstests st
			JOIN student s ON s.id = st.studentid AND s.activeflag = true
			JOIN ENROLLMENT en ON en.studentid = s.id AND en.id = st.enrollmentid AND en.activeflag is true AND en.currentschoolyear = _currentschoolyear
			JOIN organizationtreedetail OT ON OT.schoolid = En.attendanceschoolid AND OT.statedisplayidentifier = _orgname AND statedisplayidentifier = _state
			WHERE en.currentgradelevel IN (select id from gradecourse where abbreviatedname ilike _grade)
				AND st.activeflag is true 
				AND st.status IN ( SELECT category.id FROM category JOIN public.categorytype ON category.categorytypeid = categorytype.id 
							WHERE categorytype.typecode = 'STUDENT_TEST_STATUS'
							and category.categorycode = ANY(CASE
								WHEN clear_completed_test THEN ARRAY['unused','inprogress','complete']
								ELSE ARRAY['unused','inprogress']
								END))
				AND st.testid = _breachedtest AND testsessionid = breachtestsession_id;
		ELSEIF (_clearscope = 'DT') THEN
			SELECT array_agg(st.id), array_agg(s.statestudentidentifier) INTO stdtestids,_statestudentidentifiers FROM studentstests st
			JOIN student s ON s.id = st.studentid AND s.activeflag = true
			JOIN ENROLLMENT en ON en.studentid = s.id AND en.id = st.enrollmentid AND en.activeflag is true AND en.currentschoolyear = _currentschoolyear
			JOIN organizationtreedetail OT ON OT.schoolid = En.attendanceschoolid AND OT.districtdisplayidentifier = _orgname AND statedisplayidentifier = _state
			WHERE en.currentgradelevel IN (select id from gradecourse where abbreviatedname ilike _grade)
				AND st.activeflag is true 
				AND st.status IN ( SELECT category.id FROM category JOIN public.categorytype ON category.categorytypeid = categorytype.id 
							WHERE categorytype.typecode = 'STUDENT_TEST_STATUS'
							and category.categorycode = ANY(CASE
								WHEN clear_completed_test THEN ARRAY['unused','inprogress','complete']
								ELSE ARRAY['unused','inprogress']
								END))
				AND st.testid = _breachedtest AND testsessionid = breachtestsession_id;
			
		ELSEIF (_clearscope = 'SCH') THEN
			SELECT array_agg(st.id), array_agg(s.statestudentidentifier) INTO stdtestids,_statestudentidentifiers FROM studentstests st
			JOIN student s ON s.id = st.studentid AND s.activeflag = true
			JOIN ENROLLMENT en ON en.studentid = s.id AND en.id = st.enrollmentid AND en.activeflag is true AND en.currentschoolyear = _currentschoolyear
			JOIN organizationtreedetail OT ON OT.schoolid = En.attendanceschoolid AND OT.schooldisplayidentifier = _orgname AND statedisplayidentifier = _state
			WHERE en.currentgradelevel IN (SELECT id FROM gradecourse where abbreviatedname ilike _grade)
				AND st.activeflag is true 
				AND st.status IN ( SELECT category.id FROM category JOIN public.categorytype ON category.categorytypeid = categorytype.id 
							WHERE categorytype.typecode = 'STUDENT_TEST_STATUS'
							and category.categorycode = ANY(CASE
								WHEN clear_completed_test THEN ARRAY['unused','inprogress','complete']
								ELSE ARRAY['unused','inprogress']
								END))
				AND st.testid = _breachedtest AND testsessionid = breachtestsession_id;
		END IF;
	END IF;
	RAISE INFO 'Affected Students : %', _statestudentidentifiers;
	IF (stdtestids IS NOT NULL AND array_length(stdtestids,1) > 0) THEN
			FOR stdtestid IN SELECT * FROM unnest(stdtestids) LOOP
				IF (enrollmethod <> 'ADP') THEN
					UPDATE studentsresponseparameters SET activeflag=false, modifieddate = now(),
						modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin') WHERE studentstestsid = stdtestid;
					UPDATE studentsresponses SET activeflag=false, modifieddate = now(),
						modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin') WHERE studentstestsid = stdtestid;
					UPDATE studentstestsections SET activeflag=false, modifieddate = now(),
						modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin') WHERE studentstestid = stdtestid;
					UPDATE scoringassignmentstudent SET activeflag=false WHERE studentstestsid = stdtestid;
					UPDATE studentstests SET activeflag=false, modifieddate = now(),
						modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin')  WHERE id = stdtestid;
					RAISE INFO 'Students tests cleaned for studenttestid :%',stdtestid;
	 			ELSE -- Adaptive
					nextstdtestid := stdtestid; 
					nextstagetestsession := breachtestsession_id;
					-- This step deactivates all the next stage tests for the student
					WHILE (nextstdtestid is not null) LOOP
						--RAISE INFO 'Current Stage Inform - studentstestid : %', nextstdtestid;
						UPDATE studentsresponseparameters SET activeflag=false, modifieddate = now(),
							modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin')  WHERE studentstestsid = nextstdtestid;
						UPDATE studentsresponses SET activeflag=false, modifieddate = now(),
							modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin')  WHERE studentstestsid = nextstdtestid;
						UPDATE studentstestsections SET activeflag=false, modifieddate = now(),
							modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin')  WHERE studentstestid = nextstdtestid;
						UPDATE scoringassignmentstudent SET activeflag=false  WHERE studentstestsid = nextstdtestid;
						UPDATE studentstests SET activeflag=false, modifieddate = now(),
							modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin')  WHERE id = nextstdtestid;
						RAISE INFO 'Students tests cleaned for studenttestid :%',nextstdtestid;
						--IDENTIFY NEXT Stage test assigned or not
						SELECT nextst.id, nextst.testsessionid INTO nextstdtestid, nextstagetestsession from studentstests st
							inner join testsession ts on st.testsessionid=ts.id
							inner join testcollection tc on tc.id=ts.testcollectionid
							inner join stage s on s.predecessorid=tc.stageid
							inner join testcollection nexttc on nexttc.stageid=s.id and tc.contentareaid=nexttc.contentareaid
							inner join testsession nextts on nexttc.id=nextts.testcollectionid
							inner join studentstests nextst on nextst.testsessionid=nextts.id and st.studentid=nextst.studentid
							inner join category nextstatus on nextst.status = nextstatus.id
							WHERE nextstatus.activeflag is true
								and s.code in ('Stg2', 'Stg3')
								and nextts.activeflag is true
								and st.testsessionid =nextstagetestsession
								and st.id = nextstdtestid
								and nextst.status in (SELECT category.id FROM category JOIN public.categorytype ON category.categorytypeid = categorytype.id 
												WHERE categorytype.typecode = 'STUDENT_TEST_STATUS'
												and category.categorycode IN ('unused','inprogress','complete'));

					
												
					END LOOP;
			END IF;
		END LOOP;
	END IF;
	END;$$;


ALTER FUNCTION public.update_breached_test(_statestudentidentifiers text[], _grade text, _contentarea text, _assessmentprogram text, _stage text, _state text, _breachedtestsession text, _breachedtest bigint, _clearscope text, _orgname text, _currentschoolyear bigint) OWNER TO aart;

--
-- Name: update_special_circumstance_status(); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION update_special_circumstance_status() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	stdtestid bigint;
	stdtestids bigint[];
	temprecord record;
	trim_status text;
	assessmentprogram_id bigint;
	specialcircumstance_id bigint;
	approved_user bigint;
	state_id bigint;
BEGIN
	RAISE INFO 'Started processing';
	FOR temprecord IN     
	     SELECT * FROM tmp_x
	LOOP
		SELECT TRIM(temprecord.approvalStatus) INTO trim_status;
		IF(trim_status != '' AND trim_status is not null AND (trim_status = 'Approved' OR trim_status = 'Not Approved' OR trim_status ='Pending Further Review' )) THEN
		   	--get studentstest ids
			SELECT array_agg(st.id) INTO stdtestids FROM
				studentstests st
				JOIN student s ON st.studentid = s.id AND s.statestudentidentifier LIKE TRIM(temprecord.stateStudentIdentifier)
				JOIN organizationtreedetail otd ON s.stateid = otd.stateid 
												AND otd.schoolname ilike TRIM(temprecord.school)
												AND otd.districtname ilike TRIM(temprecord.district)
												AND otd.statename ilike TRIM(temprecord.state)
				JOIN enrollment en ON en.studentid = s.id AND en.attendanceschoolid = otd.schoolid
				JOIN testsession ts ON ts.id = st.testsessionid AND ts.name iLIKE TRIM(temprecord.testSessionName)
				JOIN testcollection tc ON tc.id = ts.testcollectionid 
				AND tc.contentareaid in (SELECT id FROM contentarea WHERE name iLIKE TRIM(temprecord.subject));
									
			SELECT stateid INTO state_id FROM organizationtreedetail WHERE statename ilike TRIM(temprecord.state);
			
			RAISE NOTICE 'Updating specialcircumstance status for student - ''%'' on Testsession - ''%''', temprecord.stateStudentIdentifier, temprecord.testSessionName;
			
			IF (stdtestids IS NOT NULL AND array_length(stdtestids,1) > 0) THEN
				--SELECT id INTO assessmentprogram_id FROM assessmentprogram WHERE programname ILIKE TRIM(temprecord.assessmentProgram);
				
				--get restricted special circumstance code
				SELECT id INTO specialcircumstance_id FROM specialcircumstance sc 
				JOIN statespecialcircumstance ssc ON ssc.specialcircumstanceid = sc.id 
					AND ssc.requireconfirmation is true
					AND ssc.activeflag is true
				WHERE sc.cedscode = temprecord.cedsCodeNumber :: bigint 
					--AND sc.assessmentprogramid = assessmentprogram_id 
					AND ssc.stateid = state_id;
					
				IF (temprecord.approverFirstName IS NOT NULL AND temprecord.approverLastName IS NOT NULL) THEN
					SELECT au.id INTO approved_user
					FROM aartuser au 
						JOIN usersorganizations uo ON au.id = uo.aartuserid 
						JOIN userorganizationsgroups uog ON uog.userorganizationid = uo.id
						JOIN groups g ON g.id = uog.groupid and g.groupname ilike 'State Assessment Administrator'
					WHERE firstname ilike temprecord.approverFirstName AND surname ilike temprecord.approverLastName and uo.organizationid = state_id;
				ELSE
					SELECT NULL INTO approved_user;
				END IF;
				
				FOR stdtestid IN SELECT * FROM unnest(stdtestids) 
				LOOP
					UPDATE studentspecialcircumstance 
						SET status = (SELECT ID FROM category WHERE categoryname iLIKE trim_status 
										AND categorytypeid = (SELECT id FROM categorytype WHERE typecode = 'SPECIAL CIRCUMSTANCE STATUS')),
							modifieddate = now(),
							modifieduser = (SELECT id FROM aartuser WHERE username = 'cetesysadmin'),
							approvedby = approved_user
					WHERE studentTestId = stdtestid AND activeflag is true AND specialcircumstanceid = specialcircumstance_id;
				END LOOP;
			END IF;
		END IF;
	END LOOP;
END;
$$;


ALTER FUNCTION public.update_special_circumstance_status() OWNER TO aart;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: modulereport; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE modulereport (
    id bigint NOT NULL,
    groupid bigint,
    reporttype character varying(50),
    description character varying(200),
    stateid bigint,
    statusid bigint NOT NULL,
    filename character varying(200),
    activeflag boolean DEFAULT true,
    createduser integer NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    modifieddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    reporttypeid smallint,
    organizationid bigint,
    organizationtypeid bigint,
    deleteflag boolean DEFAULT false,
    jsondata text,
    starttime timestamp with time zone
);


ALTER TABLE public.modulereport OWNER TO aart;

--
-- Name: updateandgetqueuedmodulereport(bigint, bigint); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION updateandgetqueuedmodulereport(bigint, bigint) RETURNS SETOF modulereport
    LANGUAGE plpgsql
    AS $_$ 
DECLARE 
	p_queuestatusid ALIAS FOR $1;
	p_inprogressstatusid ALIAS FOR $2;
	report_id bigint;
BEGIN

	select id into report_id from modulereport where statusid = p_queuestatusid and activeflag is true 
		and reporttypeid not in (select distinct reporttypeid from modulereport where activeflag is true and statusid = p_inprogressstatusid)
		and (now() at TIME ZONE 'CDT' > starttime at TIME ZONE 'CDT')
	order by modifieddate asc limit 1;  

	IF report_id IS NOT NULL THEN
		update modulereport set statusid = p_inprogressstatusid, modifieddate = now(), starttime = now() where id = report_id;
	END IF;
	RETURN QUERY SELECT * FROM modulereport where id = report_id;
END;
$_$;


ALTER FUNCTION public.updateandgetqueuedmodulereport(bigint, bigint) OWNER TO aart;

--
-- Name: updatesectionstatusandgetteststatus(bigint, bigint, text, text, text, double precision); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION updatesectionstatusandgetteststatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
  DECLARE
    completecount integer;
    iscomplete boolean;
    trackerid bigint;
    testunusedstatusid bigint;
  BEGIN
	iscomplete := false;
	IF in_categorycode = 'inprogress' THEN
		update public.studentstestsections set statusid = (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id where categorytype.typecode = 'STUDENT_TESTSECTION_STATUS'
				and category.categorycode = in_categorycode), 
			scores = in_sectionscore, modifieddate=now(), startdatetime = now() where studentstestid = in_studenttestid and testsectionid = in_testsectionid; 
	ELSE
		update public.studentstestsections set statusid = (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id where categorytype.typecode = 'STUDENT_TESTSECTION_STATUS'
					and category.categorycode = in_categorycode), 
			scores = in_sectionscore, modifieddate=now(), enddatetime = now() where studentstestid = in_studenttestid and testsectionid = in_testsectionid; 
	END IF;

	SELECT count(1) into completecount FROM studentstestsections AS sts
		JOIN category On category.id = sts.statusid 
		JOIN public.categorytype ON category.categorytypeid = categorytype.id 
		where categorytype.typecode ='STUDENT_TESTSECTION_STATUS'
			and category.categorycode != 'complete'
			and  sts.studentstestid = in_studenttestid;

	IF completecount = 0 THEN
		iscomplete := true;
		
		trackerid := (select studenttrackerid from studenttrackerband stb inner join studentstests sts 
					on stb.testsessionid=sts.testsessionid where sts.id = in_studenttestid);
		testunusedstatusid := (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id 
				where categorytype.typecode = 'STUDENT_TEST_STATUS' and category.categorycode = 'unused');
						
		update public.studentstests set status = (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id 
				where categorytype.typecode = 'STUDENT_TEST_STATUS' and category.categorycode = 'complete'),
			 scores = in_testscore, interimtheta = in_interimthetavalue, modifieddate=now(), enddatetime = now() where id = in_studenttestid;
		--DLM	 
		IF trackerid is not null THEN
			update public.studenttracker set status='UNTRACKED' where status='TRACKED' and id = trackerid;
		END IF;
		--KAP
		update studentstests set status=testunusedstatusid where id in (select distinct nextst.id from studentstests st
						inner join testsession ts on st.testsessionid=ts.id
						inner join testcollection tc on tc.id=ts.testcollectionid
						inner join stage s on s.predecessorid=tc.stageid
						inner join testcollection nexttc on nexttc.stageid=s.id and tc.contentareaid=nexttc.contentareaid
						inner join testsession nextts on nexttc.id=nextts.testcollectionid
						inner join studentstests nextst on nextst.testsessionid=nextts.id
							and st.studentid=nextst.studentid
						inner join category nextstatus on nextst.status = nextstatus.id
					where nextstatus.categorycode = 'pending' and ts.source='BATCHAUTO' 
						and nextts.source='BATCHAUTO' and st.id = in_studenttestid);
	ELSIF in_testscore IS NOT NULL THEN
		update public.studentstests set scores = in_testscore, modifieddate=now() where id = in_studenttestid;
	END IF;
	RETURN iscomplete;
  END;
$$;


ALTER FUNCTION public.updatesectionstatusandgetteststatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision) OWNER TO aart;

--
-- Name: updatesectionstatusandgetteststatusforlcs(bigint, bigint, text, text, text, double precision, timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION updatesectionstatusandgetteststatusforlcs(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision, in_stdteststartdatetime timestamp without time zone, in_stdtestenddatetime timestamp without time zone, in_stdtestsecstartdatetime timestamp without time zone, in_stdtestsecenddatetime timestamp without time zone) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
  DECLARE
    completecount integer;
    iscomplete boolean;
    trackerid bigint;
    testunusedstatusid bigint;
  BEGIN
	iscomplete := false;
	IF in_categorycode = 'inprogress' THEN
		update public.studentstestsections set statusid = (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id where categorytype.typecode = 'STUDENT_TESTSECTION_STATUS'
				and category.categorycode = in_categorycode), 
			scores = in_sectionscore, modifieddate=now() where studentstestid = in_studenttestid and testsectionid = in_testsectionid; 
	ELSE
		update public.studentstestsections set statusid = (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id where categorytype.typecode = 'STUDENT_TESTSECTION_STATUS'
					and category.categorycode = in_categorycode), 
			scores = in_sectionscore, modifieddate=now() where studentstestid = in_studenttestid and testsectionid = in_testsectionid; 
	END IF;
	
	IF in_stdtestsecstartdatetime IS NOT NULL THEN
		update public.studentstestsections set startdatetime = in_stdtestsecstartdatetime where studentstestid = in_studenttestid and testsectionid = in_testsectionid; 
	END IF;
	IF in_stdtestsecenddatetime IS NOT NULL THEN
		update public.studentstestsections set enddatetime = in_stdtestsecenddatetime where studentstestid = in_studenttestid and testsectionid = in_testsectionid; 
	END IF;
	
	SELECT count(1) into completecount FROM studentstestsections AS sts
		JOIN category On category.id = sts.statusid 
		JOIN public.categorytype ON category.categorytypeid = categorytype.id 
		where categorytype.typecode ='STUDENT_TESTSECTION_STATUS'
			and category.categorycode != 'complete'
			and  sts.studentstestid = in_studenttestid;

	IF completecount = 0 THEN
		iscomplete := true;
		
		trackerid := (select studenttrackerid from studenttrackerband stb inner join studentstests sts 
					on stb.testsessionid=sts.testsessionid where sts.id = in_studenttestid);
		testunusedstatusid := (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id 
				where categorytype.typecode = 'STUDENT_TEST_STATUS' and category.categorycode = 'unused');
						
		update public.studentstests set status = (select category.id from public.category JOIN public.categorytype 
				ON category.categorytypeid = categorytype.id 
				where categorytype.typecode = 'STUDENT_TEST_STATUS' and category.categorycode = 'complete'),
			 scores = in_testscore, interimtheta = in_interimthetavalue, modifieddate=now() where id = in_studenttestid;
		--DLM	 
		IF trackerid is not null THEN
			update public.studenttracker set status='UNTRACKED' where status='TRACKED' and id = trackerid;
		END IF;
		--KAP
		update studentstests set status=testunusedstatusid where id in (select distinct nextst.id from studentstests st
						inner join testsession ts on st.testsessionid=ts.id
						inner join testcollection tc on tc.id=ts.testcollectionid
						inner join stage s on s.predecessorid=tc.stageid
						inner join testcollection nexttc on nexttc.stageid=s.id and tc.contentareaid=nexttc.contentareaid
						inner join testsession nextts on nexttc.id=nextts.testcollectionid
						inner join studentstests nextst on nextst.testsessionid=nextts.id
							and st.studentid=nextst.studentid
						inner join category nextstatus on nextst.status = nextstatus.id
					where nextstatus.categorycode = 'pending' and ts.source='BATCHAUTO' 
						and nextts.source='BATCHAUTO' and st.id = in_studenttestid);
	ELSIF in_testscore IS NOT NULL THEN
		update public.studentstests set scores = in_testscore, modifieddate=now() where id = in_studenttestid;
	END IF;
	
	
	IF in_stdteststartdatetime IS NOT NULL THEN
		update public.studentstests set startdatetime = in_stdteststartdatetime where id = in_studenttestid; 
	END IF;
	IF in_stdtestenddatetime IS NOT NULL THEN
		update public.studentstests set enddatetime = in_stdtestenddatetime where id = in_studenttestid; 
	END IF;	
	
	RETURN iscomplete;
  END;
$$;


ALTER FUNCTION public.updatesectionstatusandgetteststatusforlcs(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision, in_stdteststartdatetime timestamp without time zone, in_stdtestenddatetime timestamp without time zone, in_stdtestsecstartdatetime timestamp without time zone, in_stdtestsecenddatetime timestamp without time zone) OWNER TO aart;

--
-- Name: updatestatestudentidentifier(character varying, character varying, character varying, character varying, bigint, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION updatestatestudentidentifier(old_statestudent_identifier character varying, new_statestudent_identifier character varying, aypsch character varying, attsch character varying, schoolyear bigint, statedisplayidentifier character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ 
 DECLARE   
   state_Id BIGINT;
   ayp_sch_id BIGINT;
   att_sch_id BIGINT;
   ceteSysAdminUserId BIGINT;
   new_EnrlId BIGINT;
   grade_id BIGINT;
   studentRecord RECORD;
   
 BEGIN         
SELECT INTO state_Id (SELECT id FROM organization WHERE lower(displayidentifier) = lower(stateDisplayidentifier));
SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(aypSch));
SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(schooldisplayidentifier) = lower(attSch));
SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');        

  IF((SELECT  count(en.*) FROM student stu JOIN enrollment en ON en.studentid = stu.id 
WHERE lower(stu.statestudentidentifier) = lower(old_statestudent_identifier)
AND stu.stateid = state_Id and en.currentschoolyear = schoolyear
AND en.aypschoolid = ayp_sch_id and en.attendanceschoolid = att_sch_id) <= 0)
        THEN
           RAISE NOTICE 'Student % is not found in ayp school %, attendance school % and school year %', old_statestudent_identifier, aypSch, attSch, schoolyear; 

        ELSE
      FOR studentRecord IN (SELECT  stu.* FROM student stu JOIN enrollment en ON en.studentid = stu.id 
WHERE lower(stu.statestudentidentifier) = lower(old_statestudent_identifier)
AND stu.stateid = state_Id and en.currentschoolyear = schoolyear
AND en.aypschoolid = ayp_sch_id and en.attendanceschoolid = att_sch_id LIMIT 1)
             LOOP

UPDATE student SET  statestudentidentifier= new_statestudent_identifier, modifieduser = ceteSysAdminUserId, modifieddate = now() WHERE id = studentRecord.id;

RAISE NOTICE 'State Student id % is updated to %', old_statestudent_identifier, new_statestudent_identifier;
                  
             END LOOP;
        
        END IF;     
   END;
$$;


ALTER FUNCTION public.updatestatestudentidentifier(old_statestudent_identifier character varying, new_statestudent_identifier character varying, aypsch character varying, attsch character varying, schoolyear bigint, statedisplayidentifier character varying) OWNER TO aart;

--
-- Name: updatestudentdemographics(character varying, character varying, character varying, character varying, boolean, character varying, character varying, character varying, character varying, bigint, character varying, date, integer); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION updatestudentdemographics(student_firstname character varying, student_lastname character varying, state_student_identifier character varying, state_displayidentifier character varying, hispanic_ethnicity boolean, race character varying, esolcode character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, grade_abbrname character varying, birthdate date, student_gender integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
           DECLARE
           state_Id BIGINT;
           ceteSysAdminUserId BIGINT;
           att_sch_id BIGINT;
           ayp_sch_id BIGINT;
           grade_Id BIGINT;
           student_userName CHARACTER VARYING;
           updated_userName CHARACTER VARYING;
           studentRecord RECORD;
           dob date;
           error_msg TEXT;

         BEGIN
              error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(state_displayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)) or lower(trim(org.tree_schooldisplayidentifier))=lower(trim(ayp_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(state_student_identifier,'NULL')||';State:'||COALESCE(state_displayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL')||';OR AYP School:'||COALESCE(ayp_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE
           SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(state_displayidentifier)) AND activeflag is true );
           SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
           SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
           SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
           SELECT INTO grade_Id (SELECT id FROM gradecourse gc WHERE contentareaid IS NULL AND assessmentprogramgradesid IS NOT NULL
        					AND lower(trim(abbreviatedname)) = lower(trim(grade_abbrName)) AND activeflag is true );

           IF((SELECT count(stu.*) FROM student stu JOIN enrollment en ON en.studentid = stu.id
                      WHERE trim(stu.statestudentidentifier) = trim(state_student_identifier) AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true AND en.attendanceschoolid = att_sch_id
                        AND en.aypschoolid = ayp_sch_id AND en.currentschoolyear = schoolyear AND en.currentgradelevel = grade_Id) <= 0) THEN
        	RAISE NOTICE 'Student % not found in state %, attendace school %, ayp school %, grade %, and current school %', state_student_identifier,
        	                  state_student_identifier, att_sch_displayidentifier, ayp_sch_displayidentifier, grade_abbrName, schoolyear;
               error_msg := '<error>' || 'Student:'|| coalesce(state_student_identifier,'NULL')||';not found in state :'||coalesce(state_displayidentifier,'NULL')|| ';att_sch_displayidentifier:'||coalesce(att_sch_displayidentifier,'NULL')||';ayp school:'||coalesce(ayp_sch_displayidentifier,'NULL')|| ';grade:'||coalesce(grade_abbrName,'NULL')|| ';and current school:'||cast(coalesce(schoolyear,0) as text);


           ELSE

              FOR studentRecord IN (SELECT stu.* FROM student stu JOIN enrollment en ON en.studentid = stu.id
                      WHERE trim(stu.statestudentidentifier) = trim(state_student_identifier) AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true AND en.attendanceschoolid = att_sch_id
                        AND en.aypschoolid = ayp_sch_id AND en.currentschoolyear = schoolyear AND en.currentgradelevel = grade_Id LIMIT 1) LOOP

                IF(lower(studentRecord.legalfirstname) != lower(student_firstName)  OR lower(studentRecord.legallastname) != lower(student_LastName)) THEN
                    SELECT substring(student_firstName, 1, LEAST(length(student_firstName), 4)) || '.' || substring(student_LastName, 1, LEAST(length(student_LastName), 4)) INTO student_userName;

                    select (case when ucount is null
                         then student_userName
        		 else student_userName || '.' || (ucount+1)
        		 end) as modifiedUsername from (select (select 0 as ucount from student where username = student_userName
        					union select CAST(split_part(username, '.', 3) as int) as ucount from student
        					where username like  student_userName || '.%' order by ucount desc limit 1) )a INTO updated_userName;

                  update student set legalfirstname = student_firstName, legallastname = student_LastName, username = updated_userName,modifieddate = now(),
        	         modifieduser = ceteSysAdminUserId WHERE id = studentRecord.id;
        	  error_msg := '<success>' 	;

                END IF;
        	IF (birthDate IS null)
        	  THEN
        	     dob = studentRecord.dateofbirth;
        	   ELSE
        	    dob = birthDate;
        	 END IF;

        	UPDATE student SET esolparticipationcode = esolCode, hispanicethnicity = hispanic_Ethnicity, comprehensiverace = race, modifieddate = now(), dateofbirth = dob,
        	         modifieduser = ceteSysAdminUserId,gender=student_gender
        	          WHERE id = studentRecord.id;

               RAISE NOTICE 'Student %  demographic info got changed', state_student_identifier;
               error_msg := '<success>' || 'demographic info got changed Student:'|| state_student_identifier ||';in state :'||state_displayidentifier||';att_sch_displayidentifier:'||att_sch_displayidentifier||';ayp school:'||ayp_sch_displayidentifier||';grade:'||grade_abbrName||';and current school:'|| cast(coalesce(schoolyear,0) as text)||';and gender:'|| cast(coalesce(student_gender,0) as text);

              END LOOP;

           END IF;
           END IF;
           RETURN error_msg;
        END;
        $$;


ALTER FUNCTION public.updatestudentdemographics(student_firstname character varying, student_lastname character varying, state_student_identifier character varying, state_displayidentifier character varying, hispanic_ethnicity boolean, race character varying, esolcode character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, grade_abbrname character varying, birthdate date, student_gender integer) OWNER TO aart;

--
-- Name: updatestudentgrade(character varying, character varying, character varying, character varying, bigint, character varying, character varying); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION updatestudentgrade(state_student_identifier character varying, state_displayidentifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, old_grade character varying, new_grade character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
             DECLARE
             state_Id BIGINT;
             ceteSysAdminUserId BIGINT;
             att_sch_id BIGINT;
             ayp_sch_id BIGINT;
             old_grade_Id BIGINT;
             new_grade_Id BIGINT;
             enrollmentRecord RECORD;
             studentTestsRecords RECORD;
             exitStuTestSecsStatus BIGINT;
             exitStuTestsStatus BIGINT;
             error_msg text ;

           BEGIN
                error_msg :='';
   IF (select count(*) from (select o.schooldisplayidentifier tree_schooldisplayidentifier,o.stateDisplayidentifier tree_stateDisplayidentifier from organizationtreedetail o) org 
            where lower(trim(org.tree_stateDisplayidentifier))=lower(trim(state_displayidentifier))
            and (lower(trim(org.tree_schooldisplayidentifier))=lower(trim(att_sch_displayidentifier)))  
       group by org.tree_schooldisplayidentifier,org.tree_stateDisplayidentifier order by 1 desc limit 1 ) >1
   THEN 
       error_msg := '<error> Duplicate display Identifier on school more info>> '||'Student:'||COALESCE(state_student_identifier,'NULL')||';State:'||COALESCE(state_displayidentifier,'NULL')||';AND Attendance school:'||COALESCE(att_sch_displayidentifier,'NULL');
       RAISE NOTICE '%',error_msg;
   ELSE
             SELECT INTO state_Id (SELECT id FROM organization WHERE lower(trim(displayidentifier)) = lower(trim(state_displayidentifier)) AND activeflag is true );
             SELECT INTO att_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(att_sch_displayidentifier)));
             SELECT INTO ayp_sch_id (SELECT schoolid FROM organizationtreedetail WHERE stateid = state_Id AND lower(trim(schooldisplayidentifier)) = lower(trim(ayp_sch_displayidentifier)));
             SELECT INTO ceteSysAdminUserId (SELECT id FROM aartuser WHERE username='cetesysadmin');
             SELECT INTO old_grade_Id (SELECT id FROM gradecourse gc WHERE contentareaid IS NULL AND assessmentprogramgradesid IS NOT NULL
          					AND trim(abbreviatedname) = trim(old_grade) AND activeflag is true );
             SELECT INTO new_grade_Id (SELECT id FROM gradecourse gc WHERE contentareaid IS NULL AND assessmentprogramgradesid IS NOT NULL
          					AND trim(abbreviatedname) = trim(new_grade) AND activeflag is true );
             SELECT INTO exitStuTestSecsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TESTSECTION_STATUS' AND categorycode = 'exitclearunenrolled');
             SELECT INTO exitStuTestsStatus (SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid=ct.id WHERE ct.typecode='STUDENT_TEST_STATUS' AND categorycode = 'exitclearunenrolled');

             IF((SELECT count(stu.*) FROM student stu JOIN enrollment en ON en.studentid = stu.id
                        WHERE trim(stu.statestudentidentifier) = trim(state_student_identifier) AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true AND en.attendanceschoolid = att_sch_id
                           AND en.currentschoolyear = schoolyear AND en.currentgradelevel = old_grade_Id) <= 0) THEN
          	RAISE NOTICE 'Student % not found in state %, attendace school %, grade %, and current school %', state_student_identifier,state_displayidentifier, att_sch_displayidentifier,  old_grade, schoolyear;
          	error_msg := '<error>' || 'Student:'||coalesce(state_student_identifier,'NULL')|| ';not found in state:' ||coalesce(state_displayidentifier,'NULL')||';attendace school:'||coalesce(att_sch_displayidentifier,'NULL')||';grade:'||coalesce(old_grade,'NULL')||';and current school:'|| cast(coalesce(schoolyear,0)as text);
                  RAISE NOTICE '%',error_msg;
             ELSE

                FOR enrollmentRecord IN (SELECT stu.id as studentid, stu.stateid, en.* FROM student stu JOIN enrollment en ON en.studentid = stu.id
                        WHERE trim(stu.statestudentidentifier) = trim(state_student_identifier) AND stu.stateid = state_Id  and en.activeflag is true and stu.activeflag is true AND en.attendanceschoolid = att_sch_id 
                           AND en.currentschoolyear = schoolyear AND en.currentgradelevel = old_grade_Id) LOOP

          	UPDATE enrollment SET currentgradelevel = new_grade_Id, modifieddate = now(), modifieduser = ceteSysAdminUserId WHERE id = enRollmentRecord.id;

          	INSERT INTO domainaudithistory (source,objecttype,objectid, createduserid, createddate, action, objectaftervalues) VALUES ('LOCK_DOWN_SCRIPT', 'ENROLLMENT', enrollmentRecord.id, ceteSysAdminUserId, now(),
          		'GRADE_CHANGE', ('{"studentId":' || enrollmentRecord.studentid || ',"stateId":' || state_Id
          				|| ',"stateStudentIdentifier":"' || state_student_identifier || '","aypSchool":' || enrollmentRecord.aypschoolid
          				|| ',"attendanceSchoolId":' || enrollmentRecord.attendanceschoolid
          				|| ',"newGrade":' || new_grade_Id || ',"oldGrade":' || old_grade_Id || '}')::json);

          	RAISE NOTICE 'Student %  grade is changed to %', state_student_identifier, new_grade;
          	error_msg := '<success>' || coalesce(state_student_identifier,'NULL') || ':Student grade is changed' ;

          	FOR studentTestsRecords IN (SELECT  st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
                          FROM studentstests st JOIN testsession ts on st.testsessionid = ts.id and st.activeflag=true  and ts.activeflag=true JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
                           WHERE st.activeflag=true AND st.enrollmentid = enrollmentRecord.id AND (otw.effectivedate <= now() AND now() <= otw.expirydate))
          	LOOP

          	    PERFORM inActivateStuTestsTrackerITITestsessions(studentTestsId := studentTestsRecords.id , inActiveStuTestSecStatusId := exitStuTestSecsStatus,
          		      inActiveStuTestStatusId := exitStuTestsStatus, testsession_Id := studentTestsRecords.testsessionid, student_Id := studentTestsRecords.studentid);

                  END LOOP;
          	    UPDATE ititestsessionhistory SET activeflag=false,modifieddate=now(),modifieduser=ceteSysAdminUserId,status=exitStuTestsStatus
          		       WHERE studentenrlrosterid IN (SELECT id FROM enrollmentsrosters WHERE enrollmentid = enrollmentRecord.id)
                                 AND status = (SELECT cat.id FROM category cat, categorytype ct WHERE ct.id = cat.categorytypeid AND cat.categorycode='pending' AND ct.typecode = 'STUDENT_TEST_STATUS')
                                 AND activeflag IS true;
               END LOOP;
             END IF;
             END IF;
              RETURN error_msg;
          END;
          $$;


ALTER FUNCTION public.updatestudentgrade(state_student_identifier character varying, state_displayidentifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, old_grade character varying, new_grade character varying) OWNER TO aart;

--
-- Name: uploadexternalstudentfilestoep(text); Type: FUNCTION; Schema: public; Owner: aart
--

CREATE FUNCTION uploadexternalstudentfilestoep(indexfilename text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	ceteSysadmin_id BIGINT;
	school_year BIGINT;
	assessmentProgram_id BIGINT;
	state_id BIGINT;
	district_id BIGINT;
	school_id BIGINT;
	subject_id BIGINT;
	grade_id BIGINT;
	externalStudentReportRecord RECORD;
	row_number INTEGER;
	trim_file_name CHARACTER VARYING;
	trim_assessmentprog_abbr_name CHARACTER VARYING;	
	trim_state_displayidentifier CHARACTER VARYING;
	trim_district_displayidentifer CHARACTER VARYING;
	trim_school_displayidentifier CHARACTER VARYING;
	trim_subject_abbrname CHARACTER VARYING;
	trim_grade_name CHARACTER VARYING;
	trim_level1_text CHARACTER VARYING;
	trim_level2_text CHARACTER VARYING;
	subjects_array text[];
	existing_exteranlFile_id BIGINT;
	ep_srv_file_path CHARACTER VARYING;
BEGIN
    row_number := 1;

    SELECT id FROM aartuser WHERE username = 'cetesysadmin' INTO ceteSysadmin_id;
    
    RAISE NOTICE 'Started processing %', indexFileName;
    
    FOR externalStudentReportRecord IN (SELECT * from temp_externalStudentReports) LOOP
	row_number := row_number + 1;
	SELECT TRIM(externalStudentReportRecord.filename) INTO trim_file_name;
	SELECT TRIM(externalStudentReportRecord.assessmentprogramabbrname) INTO trim_assessmentprog_abbr_name;
	SELECT TRIM(externalStudentReportRecord.statedisplayidentifier) INTO trim_state_displayidentifier;	
	SELECT TRIM(externalStudentReportRecord.districtdisplayidentifier) INTO trim_district_displayidentifer;
	SELECT TRIM(externalStudentReportRecord.schooldisplayidentifier) INTO trim_school_displayidentifier;
	SELECT TRIM(externalStudentReportRecord.subjectabbrname) INTO trim_subject_abbrname;
	SELECT TRIM(externalStudentReportRecord.gradename) INTO trim_grade_name;
	SELECT TRIM(externalStudentReportRecord.level1_text) INTO trim_level1_text;
	SELECT TRIM(externalStudentReportRecord.level2_text) INTO trim_level2_text;
        
        IF((trim_file_name = '' OR trim_file_name is null) 
		OR (trim_assessmentprog_abbr_name = '' OR trim_assessmentprog_abbr_name is null) 
		OR (trim_state_displayidentifier = '' OR trim_state_displayidentifier is null)
		OR (trim_district_displayidentifer = '' OR trim_district_displayidentifer is null) 
		OR (trim_school_displayidentifier = '' OR trim_school_displayidentifier is null)
		OR (trim_subject_abbrname = '' OR trim_subject_abbrname is null)
		OR (trim_grade_name = '' OR trim_grade_name is null)
		OR (externalStudentReportRecord.studentid is null)) THEN

		RAISE NOTICE 'In row %, one or more required fields are empty or null FileName: %, AssessmentProgram: %, State: %, District: %, School: %, Subject: %, Grade: %, EPStudentId: %',  
                       row_number, externalStudentReportRecord.filename, externalStudentReportRecord.assessmentprogramabbrname, externalStudentReportRecord.statedisplayidentifier,
                       externalStudentReportRecord.districtdisplayidentifier, externalStudentReportRecord.schooldisplayidentifier,
                       externalStudentReportRecord.subjectabbrname, externalStudentReportRecord.gradename, externalStudentReportRecord.studentid;
        ELSIF(trim_file_name not ilike '%.pdf') THEN
		RAISE NOTICE 'In row %, file name is not ending wth pdf', row_number; 
        ELSE

          SELECT stateid FROM organizationtreedetail WHERE statedisplayidentifier = trim_state_displayidentifier LIMIT 1 INTO state_id;
          SELECT id FROM assessmentprogram WHERE abbreviatedname = trim_assessmentprog_abbr_name LIMIT 1 INTO assessmentProgram_id;

          IF(assessmentProgram_id is null) THEN 
	     RAISE NOTICE 'Error in row %, Assessment program % value is not present in EP', row_number, trim_assessmentprog_abbr_name;
	 ELSIF(state_id is null) THEN
	    RAISE NOTICE 'Error in row %, state % is not present in EP. Expecting the displayidentifieres(example: KS, OK, MO,AK)', row_number, trim_state_displayidentifier;
	 ELSE 
	    SELECT distinct districtid FROM organizationtreedetail WHERE stateid = state_id AND districtdisplayidentifier = trim_district_displayidentifer LIMIT 1 INTO district_id;	     
	    IF(district_id is null) THEN
                RAISE NOTICE 'Error in row %, district % is not present in EP', row_number, trim_district_displayidentifer;
             ELSE
		SELECT distinct schoolid FROM organizationtreedetail WHERE stateid = state_id AND schooldisplayidentifier = trim_school_displayidentifier LIMIT 1 INTO school_id;

		IF(school_id is null) THEN
		   RAISE NOTICE 'Error in row %, school % is not present in EP', row_number, trim_school_displayidentifier;
		ELSE
                   IF(lower(trim_assessmentprog_abbr_name) = lower('CPASS')) THEN
                         SELECT tt.id FROM testtype  tt JOIN assessment asmnt ON asmnt.id = tt.assessmentid JOIN testingprogram tp ON tp.id = asmnt.testingprogramid
                                JOIN assessmentprogram asp ON asp.id = tp.assessmentprogramid
                                WHERE asp.abbreviatedname = 'CPASS' AND lower(tt.testtypecode) = lower(trim_grade_name) LIMIT 1 INTO grade_id;
                    ELSE
                         SELECT id FROM gradecourse WHERE lower(abbreviatedname) = lower(trim_grade_name) AND assessmentprogramgradesid IS NOT NULL
			     LIMIT 1 INTO grade_id;
                    END IF;

		   IF(grade_id is NULL) THEN
		      RAISE NOTICE 'Error in row %, grade % is not present in EP', row_number, trim_grade_name;
		   ELSE
		      SELECT organization_school_year(state_id) INTO school_year;
		      IF(school_year is null) THEN
		            RAISE NOTICE 'Error in row %, Organization: % school year is null', row_number, trim_state_displayidentifier; 
		       ELSE                               
                              SELECT regexp_split_to_array(trim_subject_abbrname, ',') INTO subjects_array;
			     FOR i IN array_lower(subjects_array, 1) .. array_upper(subjects_array, 1) LOOP
                                 SELECT id FROM contentarea where lower(abbreviatedname) = lower(trim(subjects_array[i])) INTO subject_id;

                                 IF(subject_id is null) THEN 
                                     RAISE NOTICE 'Error in row %, Subject: % is not found in EP', row_number, trim(subjects_array[i]);
                                 ELSE
                                     SELECT ('/reports/external/' || trim_assessmentprog_abbr_name || '/' 
						|| regexp_replace(trim_state_displayidentifier, '[^-a-zA-Z0-9.\,()&'']', '_', 'g') || '/'
						|| regexp_replace(trim_district_displayidentifer, '[^-a-zA-Z0-9.\,()&'']', '_', 'g') || '/'
						|| regexp_replace(trim_school_displayidentifier, '[^-a-zA-Z0-9.\,()&'']', '_', 'g') || '/'
						|| regexp_replace(trim(subjects_array[i]), '[^-a-zA-Z0-9.\,()&'']', '_', 'g') || '/'
						|| regexp_replace(trim_grade_name, '[^-a-zA-Z0-9.\,()&'']', '_', 'g') || '/'
						|| trim_file_name) INTO ep_srv_file_path;
                                        
				    SELECT id FROM externalstudentreports WHERE lower(filepath) = lower(ep_srv_file_path) and studentid= externalStudentReportRecord.studentid
				        and subjectid = subject_id and schoolid = school_id and stateid = state_id  and assessmentprogramid = assessmentProgram_id
				        and districtid = district_id and gradeid = grade_id and schoolyear = school_year INTO existing_exteranlFile_id;

			            IF(existing_exteranlFile_id is not null) THEN			               
                                        UPDATE externalstudentreports SET studentid = externalStudentReportRecord.studentid, gradeid = grade_id, subjectid = subject_id, 
                                             stateid = state_id, assessmentprogramid = assessmentProgram_id, districtid = district_id, schoolid = school_id, level1_text = trim_level1_text, 
                                             level2_text = trim_level2_text, filepath = ep_srv_file_path, schoolyear = school_year, modifieddate = now(), modifieduser = ceteSysadmin_id                               
                                             WHERE id = existing_exteranlFile_id;                                                                                                     
				     ELSE				         
                                        INSERT INTO externalstudentreports(studentid, gradeid, subjectid, stateid, assessmentprogramid, districtid, schoolid, level1_text, level2_text, filepath, schoolyear, createduser, modifieduser)
                                             VALUES(externalStudentReportRecord.studentid, grade_id, subject_id, state_id, assessmentProgram_id,  district_id, school_id, trim_level1_text, trim_level2_text, ep_srv_file_path, school_year, ceteSysadmin_id, ceteSysadmin_id);
				     END IF;
			          END IF;
			     END LOOP;                                               
                          END IF; 			
                    END IF;  
		END IF;
           END IF; 
	END IF;
     END IF;
    END LOOP;
END;
$$;


ALTER FUNCTION public.uploadexternalstudentfilestoep(indexfilename text) OWNER TO aart;

--
-- Name: aartuser; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE aartuser (
    id bigint NOT NULL,
    username character varying(254) NOT NULL,
    firstname character varying(80),
    middlename character varying(80),
    surname character varying(80),
    password character varying(128) NOT NULL,
    email character varying(254) NOT NULL,
    uniquecommonidentifier character varying(254),
    defaultusergroupsid bigint,
    ukey character varying(16),
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    displayname character varying(160),
    lastexpiredpasswordresetdate timestamp with time zone,
    ksinactivateduser boolean DEFAULT false,
    systemindicator boolean DEFAULT false,
    sourcetype character varying(20)
);


ALTER TABLE public.aartuser OWNER TO aart;

--
-- Name: COLUMN aartuser.uniquecommonidentifier; Type: COMMENT; Schema: public; Owner: aart
--

COMMENT ON COLUMN aartuser.uniquecommonidentifier IS 'Common identifier that is unique with in an organization.';


--
-- Name: aartuser_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE aartuser_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.aartuser_id_seq OWNER TO aart;

--
-- Name: aartuser_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE aartuser_id_seq OWNED BY aartuser.id;


--
-- Name: accessibilityfile_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE accessibilityfile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.accessibilityfile_id_seq OWNER TO aart;

--
-- Name: accessibilityfile; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE accessibilityfile (
    id bigint DEFAULT nextval('accessibilityfile_id_seq'::regclass) NOT NULL,
    externalid bigint NOT NULL,
    filename character varying(200),
    filelocation character varying(250),
    filesize double precision,
    filetypeid bigint,
    taskvariantid bigint,
    assessmentprogramid bigint NOT NULL,
    duration double precision,
    createuserid bigint,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduserid bigint,
    originationcode character varying(20) NOT NULL,
    stimulusvariantid bigint
);


ALTER TABLE public.accessibilityfile OWNER TO aart;

--
-- Name: activity; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE activity (
    id bigint NOT NULL,
    description text NOT NULL,
    userid bigint NOT NULL,
    moduleid bigint,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint,
    modifieduser bigint,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.activity OWNER TO aart;

--
-- Name: activity_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE activity_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activity_id_seq OWNER TO aart;

--
-- Name: activity_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE activity_id_seq OWNED BY activity.id;


--
-- Name: ampexcludeditems; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE ampexcludeditems (
    taskvariantid bigint NOT NULL,
    gradeabbr character varying(75) NOT NULL,
    subjectabbr character varying(75) NOT NULL
);


ALTER TABLE public.ampexcludeditems OWNER TO aart;

--
-- Name: answered_item_summary_by_node; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE answered_item_summary_by_node (
    students_tests_id bigint,
    student_id bigint,
    test_id bigint,
    test_collection_id bigint,
    node_key character varying(20),
    content_framework_detail_code character varying(40),
    no_of_answered_items bigint
);


ALTER TABLE public.answered_item_summary_by_node OWNER TO aart;

--
-- Name: assessment; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE assessment (
    id bigint NOT NULL,
    assessmentname character varying(75) NOT NULL,
    externalid bigint,
    testingprogramid bigint NOT NULL,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    assessmentcode character varying(75),
    assessmentdescription character varying(75),
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieduser integer,
    autoenrollmentflag boolean DEFAULT false
);


ALTER TABLE public.assessment OWNER TO aart;

--
-- Name: assessment_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE assessment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assessment_id_seq OWNER TO aart;

--
-- Name: assessment_id_seq1; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE assessment_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assessment_id_seq1 OWNER TO aart;

--
-- Name: assessment_id_seq1; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE assessment_id_seq1 OWNED BY assessment.id;


--
-- Name: assessmentprogram; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE assessmentprogram (
    id bigint NOT NULL,
    programname character varying(100) NOT NULL,
    externalid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieduser integer,
    abbreviatedname character varying(75) NOT NULL
);


ALTER TABLE public.assessmentprogram OWNER TO aart;

--
-- Name: assessmentstestcollections; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE assessmentstestcollections (
    assessmentid bigint NOT NULL,
    testcollectionid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer
);


ALTER TABLE public.assessmentstestcollections OWNER TO aart;

--
-- Name: category; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE category (
    id bigint NOT NULL,
    categoryname character varying(100) NOT NULL,
    categorycode character varying(75) NOT NULL,
    categorydescription character varying(150),
    categorytypeid bigint NOT NULL,
    externalid bigint,
    originationcode character varying(20),
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer
);


ALTER TABLE public.category OWNER TO aart;

--
-- Name: enrollment; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE enrollment (
    id bigint NOT NULL,
    aypschoolidentifier character varying(60),
    residencedistrictidentifier character varying(60),
    currentgradelevel integer,
    localstudentidentifier character varying(60),
    currentschoolyear integer,
    fundingschool character varying(60),
    schoolentrydate timestamp with time zone DEFAULT now(),
    districtentrydate timestamp with time zone DEFAULT now(),
    stateentrydate timestamp with time zone DEFAULT now(),
    exitwithdrawaldate timestamp with time zone DEFAULT now(),
    exitwithdrawaltype integer,
    specialcircumstancestransferchoice character varying(60),
    giftedstudent boolean,
    specialedprogramendingdate timestamp with time zone DEFAULT now(),
    qualifiedfor504 character varying(60),
    studentid bigint NOT NULL,
    attendanceschoolid bigint NOT NULL,
    restrictionid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    source bigint,
    aypschoolid bigint NOT NULL,
    sourcetype character varying(20),
    notes text
);


ALTER TABLE public.enrollment OWNER TO aart;

--
-- Name: COLUMN enrollment.aypschoolidentifier; Type: COMMENT; Schema: public; Owner: aart
--

COMMENT ON COLUMN enrollment.aypschoolidentifier IS 'expected to be the same as display identifier of the school responsible for ayp i.e. annual yearly progress.';


--
-- Name: enrollmentsrosters; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE enrollmentsrosters (
    enrollmentid bigint NOT NULL,
    rosterid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    id bigint NOT NULL,
    courseenrollmentstatusid bigint,
    source bigint,
    trackerstatus character varying DEFAULT 'UNTRACKED'::character varying
);


ALTER TABLE public.enrollmentsrosters OWNER TO aart;

--
-- Name: organization; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE organization (
    id bigint NOT NULL,
    organizationname character varying(100),
    displayidentifier character varying(100) NOT NULL,
    organizationtypeid bigint NOT NULL,
    welcomemessage character varying(75),
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    activeflag boolean DEFAULT true,
    createduser integer NOT NULL,
    modifieduser integer NOT NULL,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    buildinguniqueness bigint,
    schoolstartdate timestamp with time zone,
    schoolenddate timestamp with time zone,
    contractingorganization boolean DEFAULT false,
    expirepasswords boolean DEFAULT false,
    expirationdatetype bigint,
    pooltype character varying(30),
    multitestassignment boolean,
    reportprocess boolean DEFAULT true,
    reportyear integer
);


ALTER TABLE public.organization OWNER TO aart;

--
-- Name: organizationrelation; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE organizationrelation (
    organizationid bigint NOT NULL,
    parentorganizationid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    activeflag boolean DEFAULT true,
    createduser integer NOT NULL,
    modifieduser integer NOT NULL,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone
);


ALTER TABLE public.organizationrelation OWNER TO aart;

--
-- Name: roster; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE roster (
    id bigint NOT NULL,
    coursesectionname character varying(75) NOT NULL,
    coursesectiondescription character varying(75),
    teacherid bigint NOT NULL,
    statesubjectareaid bigint,
    courseenrollmentstatusid bigint,
    statecourseid bigint,
    restrictionid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    statesubjectcourseidentifier character varying(75),
    localcourseid character varying(50),
    educatorschooldisplayidentifier character varying(100),
    attendanceschoolid bigint NOT NULL,
    prevstatesubjectareaid bigint,
    statecoursecode character varying(100),
    source bigint,
    sourcetype character varying(20),
    statecoursesid bigint,
    currentschoolyear integer,
    aypschoolid bigint,
    tempoldrid bigint,
    notes text
);


ALTER TABLE public.roster OWNER TO aart;

--
-- Name: studentstests; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentstests (
    id bigint NOT NULL,
    studentid bigint,
    testid bigint,
    testcollectionid bigint,
    status bigint NOT NULL,
    testsessionid bigint,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieduser integer NOT NULL,
    modifieddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    ticketno character varying(75) DEFAULT NULL::character varying,
    startdatetime timestamp without time zone,
    enddatetime timestamp without time zone,
    scores text,
    enrollmentid bigint,
    finalbandid bigint,
    enhancednotes text,
    completionreason text,
    interimtheta double precision,
    previousstudentstestid bigint,
    manualupdatereason character varying(400)
);


ALTER TABLE public.studentstests OWNER TO aart;

--
-- Name: test; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE test (
    id bigint NOT NULL,
    testname character varying(75),
    numitems integer,
    externalid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    directions text,
    uitypecode character varying(20) DEFAULT 'genTest'::character varying,
    reviewtext text,
    begininstructions text,
    endinstructions text,
    status bigint,
    gradecourseid bigint,
    contentareaid bigint,
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieduser integer,
    testformatcode character varying(30),
    adaptivetypecode character varying(25),
    testtimeformattypecode character varying(25),
    numberofparts integer,
    ndcst integer,
    ndit integer,
    interimthetaestmodeltypecode character varying(25),
    unidimnssbpsnasbpsmodeltypecode character varying(25),
    testinternalname character varying(100),
    varianttypeid bigint,
    qccomplete boolean DEFAULT false,
    accessibleform boolean,
    avglinkagelevel real,
    convergencecriterionvalue numeric,
    maxiterationsvalue smallint,
    maxthetavalue numeric,
    maxthetachangevalue numeric,
    minthetavalue numeric,
    minthetachangevalue numeric,
    gradetype boolean,
    gradebandid bigint,
    unpublishreasonid bigint,
    tutorialflag boolean,
    maxattempts smallint,
    maxtimesaday smallint,
    feedbackneeded boolean,
    outcometypecode character varying(75),
    nbrofoutcomes smallint,
    maxscore integer,
    testspecificationid bigint
);


ALTER TABLE public.test OWNER TO aart;

--
-- Name: testcollection; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testcollection (
    id bigint NOT NULL,
    name character varying(75),
    randomizationtype character varying(20) DEFAULT 'enrollment'::character varying NOT NULL,
    gradecourseid bigint,
    contentareaid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    systemselectoptionid bigint,
    externalid bigint,
    gradebandid bigint,
    phasetype character varying(30),
    pooltype character varying(30),
    courseid bigint,
    stageid bigint
);


ALTER TABLE public.testcollection OWNER TO aart;

--
-- Name: testingprogram; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testingprogram (
    id bigint NOT NULL,
    externalid bigint,
    programname character varying(50),
    programdescription character varying(200),
    assessmentprogramid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    programabbr character varying(20),
    highstake boolean DEFAULT false,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.testingprogram OWNER TO aart;

--
-- Name: testsession; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testsession (
    id bigint NOT NULL,
    rosterid bigint,
    name character varying(200) NOT NULL,
    status bigint,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieduser integer NOT NULL,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    testid bigint,
    testcollectionid bigint NOT NULL,
    source character varying(20),
    attendanceschoolid bigint,
    operationaltestwindowid bigint,
    testtypeid bigint,
    gradecourseid bigint,
    stageid bigint,
    windowexpirydate timestamp with time zone,
    schoolyear bigint,
    testpanelid bigint,
    subjectareaid bigint
);


ALTER TABLE public.testsession OWNER TO aart;

--
-- Name: assessment_program_participation; Type: VIEW; Schema: public; Owner: aart
--

CREATE VIEW assessment_program_participation AS
    SELECT ap.programname AS assessment_program_name, tc.name AS test_collection_name, t.testname AS test_name, gpo.organizationname AS state, po.organizationname AS district, co.organizationname AS school, (st.createddate)::date AS day, c.categoryname AS status, count(st.*) AS total FROM ((((((((((((((((studentstests st JOIN test t ON ((st.testid = t.id))) JOIN category c ON ((st.status = c.id))) JOIN testsession ts ON ((st.testsessionid = ts.id))) JOIN testcollection tc ON ((st.testcollectionid = tc.id))) JOIN assessmentstestcollections atc ON ((tc.id = atc.testcollectionid))) JOIN assessment a ON ((atc.assessmentid = a.id))) JOIN testingprogram tp ON ((a.testingprogramid = tp.id))) JOIN assessmentprogram ap ON ((tp.assessmentprogramid = ap.id))) JOIN enrollmentsrosters er ON ((ts.rosterid = er.rosterid))) JOIN roster r ON ((er.rosterid = r.id))) JOIN enrollment e ON ((er.enrollmentid = e.id))) JOIN organization co ON ((e.attendanceschoolid = co.id))) JOIN organizationrelation por ON ((co.id = por.organizationid))) JOIN organization po ON ((por.parentorganizationid = po.id))) JOIN organizationrelation gpor ON ((po.id = gpor.organizationid))) JOIN organization gpo ON ((gpor.parentorganizationid = gpo.id))) WHERE (st.studentid = e.studentid) GROUP BY ap.programname, tc.name, gpo.organizationname, po.organizationname, co.organizationname, t.testname, (st.createddate)::date, c.categoryname ORDER BY ap.programname, tc.name, gpo.organizationname, po.organizationname, co.organizationname, t.testname, (st.createddate)::date, c.categoryname;


ALTER TABLE public.assessment_program_participation OWNER TO aart;

--
-- Name: assessmentprogram_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE assessmentprogram_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assessmentprogram_id_seq OWNER TO aart;

--
-- Name: assessmentprogram_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE assessmentprogram_id_seq OWNED BY assessmentprogram.id;


--
-- Name: assessmentprogramgrades_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE assessmentprogramgrades_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assessmentprogramgrades_id_seq OWNER TO aart;

--
-- Name: assessmentprogramgrades; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE assessmentprogramgrades (
    id bigint DEFAULT nextval('assessmentprogramgrades_id_seq'::regclass) NOT NULL,
    assessmentprogramid bigint NOT NULL,
    gradecode character varying(25) NOT NULL,
    gradename character varying(100) NOT NULL
);


ALTER TABLE public.assessmentprogramgrades OWNER TO aart;

--
-- Name: authorities; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE authorities (
    id bigint NOT NULL,
    authority character varying(32) NOT NULL,
    displayname character varying(50),
    objecttype character varying(100),
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.authorities OWNER TO aart;

--
-- Name: authorities_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE authorities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.authorities_id_seq OWNER TO aart;

--
-- Name: authorities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE authorities_id_seq OWNED BY authorities.id;


--
-- Name: autoregistrationcriteria; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE autoregistrationcriteria (
    id bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    testingprogramid bigint NOT NULL,
    assessmentid bigint NOT NULL,
    contentareatesttypesubjectareaid bigint NOT NULL,
    createduser integer,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduser integer,
    gradecourseid bigint
);


ALTER TABLE public.autoregistrationcriteria OWNER TO aart;

--
-- Name: autoregistrationcriteria_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE autoregistrationcriteria_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.autoregistrationcriteria_id_seq OWNER TO aart;

--
-- Name: autoregistrationcriteria_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE autoregistrationcriteria_id_seq OWNED BY autoregistrationcriteria.id;


--
-- Name: batchjobschedule; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE batchjobschedule (
    id bigint NOT NULL,
    jobname character varying(100) NOT NULL,
    jobrefname character varying(100) NOT NULL,
    initmethod character varying(100) NOT NULL,
    cronexpression character varying(60) NOT NULL,
    scheduled boolean DEFAULT false NOT NULL,
    allowedserver character varying(100) NOT NULL
);


ALTER TABLE public.batchjobschedule OWNER TO aart;

--
-- Name: batchjobschedule_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE batchjobschedule_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.batchjobschedule_id_seq OWNER TO aart;

--
-- Name: batchjobschedule_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE batchjobschedule_id_seq OWNED BY batchjobschedule.id;


--
-- Name: batchstudenttracker_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE batchstudenttracker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.batchstudenttracker_id_seq OWNER TO aart;

--
-- Name: batchstudenttracker; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE batchstudenttracker (
    id bigint DEFAULT nextval('batchstudenttracker_id_seq'::regclass) NOT NULL,
    submissiondate timestamp with time zone DEFAULT now() NOT NULL,
    status character varying(200),
    assessmentprogram bigint,
    orgid bigint,
    orgdisplayidentifier character varying(100),
    orgschoolyear integer,
    orgpooltype character varying(30),
    contentareaid bigint,
    contentareaname character varying(100),
    successcount integer,
    failedcount integer,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint
);


ALTER TABLE public.batchstudenttracker OWNER TO aart;

--
-- Name: batchstudenttrackerreason; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE batchstudenttrackerreason (
    batchstudenttrackerid bigint NOT NULL,
    studentid bigint,
    studentfirstname character varying(80),
    studentmiddlename character varying(80),
    studentlastname character varying(80),
    gradecourseid bigint,
    testid bigint,
    testcollectionid bigint,
    reason text
);


ALTER TABLE public.batchstudenttrackerreason OWNER TO aart;

--
-- Name: batchupload; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE batchupload (
    id bigint NOT NULL,
    filename text NOT NULL,
    filepath text NOT NULL,
    assessmentprogramid bigint NOT NULL,
    contentareaid bigint NOT NULL,
    status character varying(200),
    successcount integer,
    failedcount integer,
    resultjson text,
    submissiondate timestamp with time zone DEFAULT now() NOT NULL,
    createddate timestamp with time zone DEFAULT now(),
    modifieddate timestamp with time zone DEFAULT now(),
    createduser bigint,
    activeflag boolean DEFAULT true NOT NULL,
    schoolyear integer,
    uploadtypeid bigint,
    stateid bigint,
    districtid bigint,
    schoolid bigint,
    selectedorgid bigint,
    uploadeduserorgid bigint,
    uploadedusergroupid bigint,
    alertcount bigint
);


ALTER TABLE public.batchupload OWNER TO aart;

--
-- Name: batchupload_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE batchupload_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.batchupload_id_seq OWNER TO aart;

--
-- Name: batchuploadreason; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE batchuploadreason (
    batchuploadid bigint NOT NULL,
    line character varying(25),
    fieldname character varying(300),
    reason text,
    errortype character varying(10)
);


ALTER TABLE public.batchuploadreason OWNER TO aart;

--
-- Name: blueprint_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE blueprint_id_seq
    START WITH 15
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.blueprint_id_seq OWNER TO aart;

--
-- Name: blueprint; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE blueprint (
    id bigint DEFAULT nextval('blueprint_id_seq'::regclass) NOT NULL,
    contentareaid bigint,
    gradecourseid bigint,
    gradebandid bigint,
    criteria bigint,
    groupnumber bigint,
    numberrequired bigint,
    createduser integer,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    modifieduser integer,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    activeflag boolean DEFAULT true,
    writingtestlet boolean DEFAULT false
);


ALTER TABLE public.blueprint OWNER TO aart;

--
-- Name: blueprintessentialelements; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE blueprintessentialelements (
    blueprintid bigint NOT NULL,
    essentialelementid bigint NOT NULL,
    essentialelement character varying(40),
    ordernumber bigint
);


ALTER TABLE public.blueprintessentialelements OWNER TO aart;

--
-- Name: brailleaccommodation; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE brailleaccommodation (
    id bigint NOT NULL,
    externalid bigint NOT NULL,
    contentgroupid bigint NOT NULL,
    brailleabbreviation character varying(30),
    defaultorder integer,
    alternateorder integer,
    accessibilityfileid bigint,
    createuserid bigint,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduserid bigint,
    originationcode character varying(20) NOT NULL
);


ALTER TABLE public.brailleaccommodation OWNER TO aart;

--
-- Name: brailleaccommodation_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE brailleaccommodation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.brailleaccommodation_id_seq OWNER TO aart;

--
-- Name: category_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE category_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.category_id_seq OWNER TO aart;

--
-- Name: category_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE category_id_seq OWNED BY category.id;


--
-- Name: categorytype; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE categorytype (
    id bigint NOT NULL,
    typename character varying(75) NOT NULL,
    typecode character varying(75) NOT NULL,
    typedescription character varying(75),
    externalid bigint,
    originationcode character varying(20),
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.categorytype OWNER TO aart;

--
-- Name: categorytype_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE categorytype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.categorytype_id_seq OWNER TO aart;

--
-- Name: categorytype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE categorytype_id_seq OWNED BY categorytype.id;


--
-- Name: ccqscore; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE ccqscore (
    id bigint NOT NULL,
    scoringassignmentstudentid bigint NOT NULL,
    scoringassignmentscorerid bigint NOT NULL,
    isscored boolean,
    totalscore numeric,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    excludeflag boolean,
    notificationflag boolean
);


ALTER TABLE public.ccqscore OWNER TO aart;

--
-- Name: ccqscore_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE ccqscore_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ccqscore_id_seq OWNER TO aart;

--
-- Name: ccqscore_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE ccqscore_id_seq OWNED BY ccqscore.id;


--
-- Name: ccqscoreitem; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE ccqscoreitem (
    id bigint NOT NULL,
    ccqscoreid bigint NOT NULL,
    rubriccategoryid bigint NOT NULL,
    score numeric,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.ccqscoreitem OWNER TO aart;

--
-- Name: ccqscoreitem_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE ccqscoreitem_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ccqscoreitem_id_seq OWNER TO aart;

--
-- Name: ccqscoreitem_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE ccqscoreitem_id_seq OWNED BY ccqscoreitem.id;


--
-- Name: cognitivetaxonomy; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE cognitivetaxonomy (
    id bigint NOT NULL,
    externalid bigint,
    name character varying(200),
    dimensions bigint,
    yearadopted bigint,
    citation character varying(1000),
    abbreviatedname character varying(75),
    shortdescription character varying(160),
    longdescription text,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    activeflag boolean DEFAULT true
);


ALTER TABLE public.cognitivetaxonomy OWNER TO aart;

--
-- Name: cognitivetaxonomy_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE cognitivetaxonomy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cognitivetaxonomy_id_seq OWNER TO aart;

--
-- Name: cognitivetaxonomy_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE cognitivetaxonomy_id_seq OWNED BY cognitivetaxonomy.id;


--
-- Name: cognitivetaxonomydimension; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE cognitivetaxonomydimension (
    id bigint NOT NULL,
    externalid bigint,
    name character varying(200),
    dimension bigint,
    num bigint,
    definition character varying(2000),
    cognitivetaxonomyid bigint,
    abbreviatedname character varying(75),
    level bigint,
    shortdescription character varying(160),
    longdescription text,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    activeflag boolean DEFAULT true
);


ALTER TABLE public.cognitivetaxonomydimension OWNER TO aart;

--
-- Name: cognitivetaxonomydimension_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE cognitivetaxonomydimension_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cognitivetaxonomydimension_id_seq OWNER TO aart;

--
-- Name: cognitivetaxonomydimension_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE cognitivetaxonomydimension_id_seq OWNED BY cognitivetaxonomydimension.id;


--
-- Name: combinedlevelmap; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE combinedlevelmap (
    id bigint NOT NULL,
    schoolyear bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    subjectid bigint NOT NULL,
    gradeid bigint NOT NULL,
    stageslowscalescore bigint NOT NULL,
    stageshighscalescore bigint NOT NULL,
    performancescalescore numeric NOT NULL,
    combinedlevel numeric NOT NULL,
    batchuploadid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieduser bigint,
    activeflag boolean DEFAULT true,
    comment character varying(1000)
);


ALTER TABLE public.combinedlevelmap OWNER TO aart;

--
-- Name: combinedlevelmap_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE combinedlevelmap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.combinedlevelmap_id_seq OWNER TO aart;

--
-- Name: combinedlevelmap_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE combinedlevelmap_id_seq OWNED BY combinedlevelmap.id;


--
-- Name: message_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE message_id_seq
    START WITH 27
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.message_id_seq OWNER TO aart;

--
-- Name: communicationmessage; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE communicationmessage (
    id bigint DEFAULT nextval('message_id_seq'::regclass) NOT NULL,
    messagetitle character varying(256),
    messagecontent text,
    expiredate timestamp with time zone,
    displaydate timestamp with time zone,
    assessmentprogramid bigint,
    stateprogramid bigint,
    createddate timestamp with time zone,
    modifieddate timestamp with time zone,
    status character varying(250),
    displayuserdate character varying(250),
    expireuserdate character varying(250),
    displaytime character varying(250),
    expiretime character varying(250),
    createduser bigint,
    modifieduser bigint,
    organizationid bigint,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.communicationmessage OWNER TO aart;

--
-- Name: communicationmessageorgassessmentprogram; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE communicationmessageorgassessmentprogram (
    organizationid bigint NOT NULL,
    comminicationmessageid bigint NOT NULL
);


ALTER TABLE public.communicationmessageorgassessmentprogram OWNER TO aart;

--
-- Name: communicationmessagestate; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE communicationmessagestate (
    stateid bigint NOT NULL,
    comminicationmessageid bigint NOT NULL
);


ALTER TABLE public.communicationmessagestate OWNER TO aart;

--
-- Name: complexityband; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE complexityband (
    id bigint NOT NULL,
    bandname character varying(60) NOT NULL,
    bandcode character varying(20),
    minrange double precision,
    maxrange double precision,
    contentareaid bigint
);


ALTER TABLE public.complexityband OWNER TO aart;

--
-- Name: complexityband_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE complexityband_id_seq
    START WITH 232
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.complexityband_id_seq OWNER TO aart;

--
-- Name: complexitybandrules; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE complexitybandrules (
    id bigint NOT NULL,
    complexitybandid bigint NOT NULL,
    rule text NOT NULL,
    complexitybandtypeid bigint NOT NULL
);


ALTER TABLE public.complexitybandrules OWNER TO aart;

--
-- Name: complexitybandrules_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE complexitybandrules_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.complexitybandrules_id_seq OWNER TO aart;

--
-- Name: complexitybandrules_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE complexitybandrules_id_seq OWNED BY complexitybandrules.id;


--
-- Name: compositestimulusvariant; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE compositestimulusvariant (
    compositestimulusvariantid bigint NOT NULL,
    stimulusvariantid bigint NOT NULL
);


ALTER TABLE public.compositestimulusvariant OWNER TO aart;

--
-- Name: contentarea; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE contentarea (
    id bigint NOT NULL,
    externalid bigint,
    sortorder bigint,
    name character varying(100) NOT NULL,
    abbreviatedname character varying(75),
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieduser integer
);


ALTER TABLE public.contentarea OWNER TO aart;

--
-- Name: contentarea_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE contentarea_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contentarea_id_seq OWNER TO aart;

--
-- Name: contentarea_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE contentarea_id_seq OWNED BY contentarea.id;


--
-- Name: contentareatesttypesubjectarea; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE contentareatesttypesubjectarea (
    id bigint NOT NULL,
    contentareaid bigint,
    testtypesubjectareaid bigint NOT NULL,
    createduser integer,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduser integer,
    activeflag boolean DEFAULT true,
    stageid bigint
);


ALTER TABLE public.contentareatesttypesubjectarea OWNER TO aart;

--
-- Name: contentareatesttypesubjectarea_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE contentareatesttypesubjectarea_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contentareatesttypesubjectarea_id_seq OWNER TO aart;

--
-- Name: contentareatesttypesubjectarea_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE contentareatesttypesubjectarea_id_seq OWNED BY contentareatesttypesubjectarea.id;


--
-- Name: contentframework; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE contentframework (
    id bigint NOT NULL,
    externalid bigint,
    frameworktypeid bigint NOT NULL,
    gradecourseid bigint,
    contentareaid bigint NOT NULL,
    title character varying(75),
    content character varying(75),
    description character varying(75),
    sortorder bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    activeflag boolean DEFAULT true,
    assessmentprogramid bigint,
    gradebandid bigint
);


ALTER TABLE public.contentframework OWNER TO aart;

--
-- Name: contentframework_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE contentframework_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contentframework_id_seq OWNER TO aart;

--
-- Name: contentframework_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE contentframework_id_seq OWNED BY contentframework.id;


--
-- Name: contentframeworkdetail; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE contentframeworkdetail (
    id bigint NOT NULL,
    externalid bigint,
    sortorder bigint,
    name character varying(10),
    contentcode character varying(40),
    description character varying(2000),
    comments character varying(250),
    frameworklevelid bigint NOT NULL,
    contentframeworkid bigint NOT NULL,
    parentcontentframeworkdetailid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    activeflag boolean DEFAULT true
);


ALTER TABLE public.contentframeworkdetail OWNER TO aart;

--
-- Name: contentframeworkdetail_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE contentframeworkdetail_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contentframeworkdetail_id_seq OWNER TO aart;

--
-- Name: contentframeworkdetail_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE contentframeworkdetail_id_seq OWNED BY contentframeworkdetail.id;


--
-- Name: contentgroup_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE contentgroup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contentgroup_id_seq OWNER TO aart;

--
-- Name: contentgroup; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE contentgroup (
    id bigint DEFAULT nextval('contentgroup_id_seq'::regclass) NOT NULL,
    externalid bigint NOT NULL,
    accesselementid character varying(75),
    spanstart integer,
    spanend integer,
    charindexstart integer,
    charindexend integer,
    taskvariantid bigint,
    foilid bigint,
    createuserid bigint,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduserid bigint,
    originationcode character varying(20) NOT NULL,
    stimulusvariantid bigint,
    htmlelementid character varying(100),
    testid bigint,
    highlighted boolean,
    compositemediaid bigint,
    testsectionid bigint,
    instructioncode character varying
);


ALTER TABLE public.contentgroup OWNER TO aart;

--
-- Name: correct_response_summary_by_node; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE correct_response_summary_by_node (
    students_tests_id bigint,
    student_id bigint,
    test_id bigint,
    test_collection_id bigint,
    node_key character varying(20),
    content_framework_detail_code character varying(40),
    no_of_correct_responses bigint,
    total_raw_score numeric
);


ALTER TABLE public.correct_response_summary_by_node OWNER TO aart;

--
-- Name: dailyaccesscode; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE dailyaccesscode (
    id bigint NOT NULL,
    operationaltestwindowid bigint NOT NULL,
    contentareaid bigint NOT NULL,
    gradecourseid bigint NOT NULL,
    stageid bigint NOT NULL,
    partnumber integer NOT NULL,
    effectivedate date NOT NULL,
    accesscode character varying(30) NOT NULL,
    createduser bigint NOT NULL,
    createddate timestamp with time zone NOT NULL,
    modifieduser bigint NOT NULL,
    modifieddate timestamp with time zone NOT NULL
);


ALTER TABLE public.dailyaccesscode OWNER TO aart;

--
-- Name: dailyaccesscode_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE dailyaccesscode_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dailyaccesscode_id_seq OWNER TO aart;

--
-- Name: dailyaccesscode_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE dailyaccesscode_id_seq OWNED BY dailyaccesscode.id;


--
-- Name: ddl_version; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE ddl_version (
    version integer NOT NULL,
    project character varying,
    updated timestamp with time zone DEFAULT now()
);


ALTER TABLE public.ddl_version OWNER TO aart;

--
-- Name: domainaudithistory; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE domainaudithistory (
    id bigint NOT NULL,
    source character varying(25) NOT NULL,
    objecttype character varying(50) NOT NULL,
    objectid bigint NOT NULL,
    createduserid integer NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    action character varying(25) NOT NULL,
    objectbeforevalues json,
    objectaftervalues json
);


ALTER TABLE public.domainaudithistory OWNER TO aart;

--
-- Name: domainaudithistory_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE domainaudithistory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.domainaudithistory_id_seq OWNER TO aart;

--
-- Name: domainaudithistory_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE domainaudithistory_id_seq OWNED BY domainaudithistory.id;


--
-- Name: enrollment_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE enrollment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.enrollment_id_seq OWNER TO aart;

--
-- Name: enrollment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE enrollment_id_seq OWNED BY enrollment.id;


--
-- Name: enrollmentsrosters_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE enrollmentsrosters_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.enrollmentsrosters_id_seq OWNER TO aart;

--
-- Name: enrollmentsrosters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE enrollmentsrosters_id_seq OWNED BY enrollmentsrosters.id;


--
-- Name: enrollmenttesttypesubjectarea; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE enrollmenttesttypesubjectarea (
    id bigint NOT NULL,
    enrollmentid bigint NOT NULL,
    testtypeid bigint NOT NULL,
    subjectareaid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint,
    modifieduser bigint,
    activeflag boolean DEFAULT true,
    groupingindicator1 character varying(60),
    groupingindicator2 character varying(60)
);


ALTER TABLE public.enrollmenttesttypesubjectarea OWNER TO aart;

--
-- Name: enrollmenttesttypesubjectarea_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE enrollmenttesttypesubjectarea_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.enrollmenttesttypesubjectarea_id_seq OWNER TO aart;

--
-- Name: enrollmenttesttypesubjectarea_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE enrollmenttesttypesubjectarea_id_seq OWNED BY enrollmenttesttypesubjectarea.id;


--
-- Name: essentialelementlinkagetranslationvalues; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE essentialelementlinkagetranslationvalues (
    id bigint NOT NULL,
    categoryid bigint NOT NULL,
    translationvalue real NOT NULL
);


ALTER TABLE public.essentialelementlinkagetranslationvalues OWNER TO aart;

--
-- Name: essentialelementlinkagetranslationvalues_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE essentialelementlinkagetranslationvalues_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.essentialelementlinkagetranslationvalues_id_seq OWNER TO aart;

--
-- Name: essentialelementlinkagetranslationvalues_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE essentialelementlinkagetranslationvalues_id_seq OWNED BY essentialelementlinkagetranslationvalues.id;


--
-- Name: excludeditems; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE excludeditems (
    id bigint NOT NULL,
    schoolyear bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    subjectid bigint NOT NULL,
    gradeid bigint NOT NULL,
    taskvariantid bigint NOT NULL,
    batchuploadid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint
);


ALTER TABLE public.excludeditems OWNER TO aart;

--
-- Name: excludeditems_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE excludeditems_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.excludeditems_id_seq OWNER TO aart;

--
-- Name: excludeditems_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE excludeditems_id_seq OWNED BY excludeditems.id;


--
-- Name: exitwithoutsavetest; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE exitwithoutsavetest (
    studenttestsectionid bigint,
    createddate timestamp without time zone DEFAULT now()
);


ALTER TABLE public.exitwithoutsavetest OWNER TO aart;

--
-- Name: externalstudentreports; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE externalstudentreports (
    id bigint NOT NULL,
    studentid bigint NOT NULL,
    gradeid bigint NOT NULL,
    subjectid bigint NOT NULL,
    stateid bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    districtid bigint NOT NULL,
    schoolid bigint NOT NULL,
    level1_text character varying,
    level2_text character varying,
    filepath character varying NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser bigint NOT NULL,
    modifieduser bigint NOT NULL,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    activeflag boolean DEFAULT true,
    schoolyear bigint NOT NULL
);


ALTER TABLE public.externalstudentreports OWNER TO aart;

--
-- Name: externalstudentreports_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE externalstudentreports_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.externalstudentreports_id_seq OWNER TO aart;

--
-- Name: externalstudentreports_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE externalstudentreports_id_seq OWNED BY externalstudentreports.id;


--
-- Name: fieldspecification; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE fieldspecification (
    id bigint NOT NULL,
    fieldname character varying(75),
    allowablevalues text,
    minimum bigint,
    maximum bigint,
    fieldlength integer,
    rejectifempty boolean DEFAULT true NOT NULL,
    rejectifinvalid boolean DEFAULT true NOT NULL,
    formatregex character varying(150),
    mappedname character varying(120),
    showerror boolean DEFAULT true NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    iskeyvaluepairfield boolean NOT NULL,
    fieldtype character varying(75),
    minimumregex character varying(300),
    maximumregex character varying(300)
);


ALTER TABLE public.fieldspecification OWNER TO aart;

--
-- Name: fieldspecification_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE fieldspecification_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.fieldspecification_id_seq OWNER TO aart;

--
-- Name: fieldspecification_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE fieldspecification_id_seq OWNED BY fieldspecification.id;


--
-- Name: fieldspecificationsrecordtypes; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE fieldspecificationsrecordtypes (
    fieldspecificationid bigint NOT NULL,
    recordtypeid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    mappedname character varying(120)
);


ALTER TABLE public.fieldspecificationsrecordtypes OWNER TO aart;

--
-- Name: foil; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE foil (
    id bigint NOT NULL,
    externalid bigint,
    foiltext text,
    parentfoilid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    rationale text,
    instructionalimplications text
);


ALTER TABLE public.foil OWNER TO aart;

--
-- Name: foil_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE foil_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.foil_id_seq OWNER TO aart;

--
-- Name: foil_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE foil_id_seq OWNED BY foil.id;


--
-- Name: foilsstimulusvariants; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE foilsstimulusvariants (
    foilid bigint NOT NULL,
    stimulusvariantid bigint NOT NULL
);


ALTER TABLE public.foilsstimulusvariants OWNER TO aart;

--
-- Name: frameworklevel; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE frameworklevel (
    id bigint NOT NULL,
    externalid bigint,
    title character varying(80),
    level bigint,
    frameworktypeid bigint NOT NULL,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20)
);


ALTER TABLE public.frameworklevel OWNER TO aart;

--
-- Name: frameworklevel_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE frameworklevel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.frameworklevel_id_seq OWNER TO aart;

--
-- Name: frameworklevel_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE frameworklevel_id_seq OWNED BY frameworklevel.id;


--
-- Name: frameworktype; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE frameworktype (
    id bigint NOT NULL,
    externalid bigint,
    name character varying(100),
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    typecode character varying(30),
    assessmentprogramid bigint
);


ALTER TABLE public.frameworktype OWNER TO aart;

--
-- Name: frameworktype_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE frameworktype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.frameworktype_id_seq OWNER TO aart;

--
-- Name: frameworktype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE frameworktype_id_seq OWNED BY frameworktype.id;


--
-- Name: gradeband_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE gradeband_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.gradeband_id_seq OWNER TO aart;

--
-- Name: gradeband; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE gradeband (
    id bigint DEFAULT nextval('gradeband_id_seq'::regclass) NOT NULL,
    externalid bigint,
    sortorder bigint,
    name character varying(100) NOT NULL,
    abbreviatedname character varying(75),
    createdate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieduser integer,
    contentareaid bigint
);


ALTER TABLE public.gradeband OWNER TO aart;

--
-- Name: gradebandgradecourse; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE gradebandgradecourse (
    gradebandid bigint NOT NULL,
    gradecourseid bigint
);


ALTER TABLE public.gradebandgradecourse OWNER TO aart;

--
-- Name: gradecontentareatesttypesubjectarea; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE gradecontentareatesttypesubjectarea (
    contentareatesttypesubjectareaid bigint NOT NULL,
    gradecourseid bigint NOT NULL,
    createduser bigint,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduser bigint,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.gradecontentareatesttypesubjectarea OWNER TO aart;

--
-- Name: gradecourse; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE gradecourse (
    id bigint NOT NULL,
    externalid bigint,
    name character varying(150),
    abbreviatedname character varying(10),
    ordinality bigint,
    gradelevel integer,
    shortdescription character varying(160),
    longdescription text,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieduser integer,
    contentareaid bigint,
    assessmentprogramgradesid bigint,
    course boolean DEFAULT false
);


ALTER TABLE public.gradecourse OWNER TO aart;

--
-- Name: gradecourse_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE gradecourse_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.gradecourse_id_seq OWNER TO aart;

--
-- Name: gradecourse_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE gradecourse_id_seq OWNED BY gradecourse.id;


--
-- Name: gradetestspec_row; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE gradetestspec_row (
    id bigint,
    externalid bigint,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    specificationname character varying(100),
    phase character varying(20),
    contentpool character varying(20),
    minimumnumberofees integer,
    activeflag boolean,
    gradebandid bigint,
    gradecourseid bigint,
    courseid bigint,
    contentareaid bigint
);


ALTER TABLE public.gradetestspec_row OWNER TO aart;

--
-- Name: groupauthorities; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE groupauthorities (
    id bigint NOT NULL,
    groupid bigint NOT NULL,
    authorityid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.groupauthorities OWNER TO aart;

--
-- Name: groupauthorities_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE groupauthorities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.groupauthorities_id_seq OWNER TO aart;

--
-- Name: groupauthorities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE groupauthorities_id_seq OWNED BY groupauthorities.id;


--
-- Name: groupauthoritylockdownperiod; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE groupauthoritylockdownperiod (
    id bigint NOT NULL,
    organizationid bigint NOT NULL,
    groupauthorityid bigint NOT NULL,
    fromdate timestamp with time zone NOT NULL,
    todate timestamp with time zone NOT NULL,
    createduser bigint NOT NULL,
    createddate timestamp with time zone NOT NULL,
    modifieduser bigint NOT NULL,
    modifieddate timestamp with time zone NOT NULL,
    activeflag boolean DEFAULT true NOT NULL
);


ALTER TABLE public.groupauthoritylockdownperiod OWNER TO aart;

--
-- Name: groupauthoritylockdownperiod_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE groupauthoritylockdownperiod_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.groupauthoritylockdownperiod_id_seq OWNER TO aart;

--
-- Name: groupauthoritylockdownperiod_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE groupauthoritylockdownperiod_id_seq OWNED BY groupauthoritylockdownperiod.id;


--
-- Name: groups; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE groups (
    id bigint NOT NULL,
    organizationid bigint NOT NULL,
    groupname character varying(50) NOT NULL,
    defaultrole boolean DEFAULT false,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    activeflag boolean DEFAULT true,
    createduser integer NOT NULL,
    modifieduser integer NOT NULL,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    organizationtypeid bigint,
    roleorgtypeid bigint,
    groupcode character varying(50),
    systemindicator boolean DEFAULT false
);


ALTER TABLE public.groups OWNER TO aart;

--
-- Name: groups_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.groups_id_seq OWNER TO aart;

--
-- Name: groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE groups_id_seq OWNED BY groups.id;


--
-- Name: in_correct_response_summary_by_node; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE in_correct_response_summary_by_node (
    students_tests_id bigint,
    student_id bigint,
    test_id bigint,
    test_collection_id bigint,
    node_key character varying(20),
    content_framework_detail_code character varying(40),
    no_of_in_correct_responses bigint,
    total_raw_score numeric
);


ALTER TABLE public.in_correct_response_summary_by_node OWNER TO aart;

--
-- Name: interfacerequesthistory; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE interfacerequesthistory (
    id bigint NOT NULL,
    interfacename character varying(50),
    requesteduserid character varying(50),
    requestedipaddress character varying(50),
    requesteddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    modulereportid bigint,
    message character varying(200)
);


ALTER TABLE public.interfacerequesthistory OWNER TO aart;

--
-- Name: interfacerequesthistory_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE interfacerequesthistory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.interfacerequesthistory_id_seq OWNER TO aart;

--
-- Name: interfacerequesthistory_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE interfacerequesthistory_id_seq OWNED BY interfacerequesthistory.id;


--
-- Name: itemstatistic; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE itemstatistic (
    taskvariantid bigint NOT NULL,
    itemstatisticname character varying(35) NOT NULL,
    itemstatisticvalue numeric(24,16),
    assessmentprogramid bigint,
    testid bigint
);


ALTER TABLE public.itemstatistic OWNER TO aart;

--
-- Name: itimclog; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE itimclog (
    id bigint NOT NULL,
    requestid bigint NOT NULL,
    fromdate timestamp with time zone,
    todate timestamp with time zone,
    response text,
    errors text,
    actiontype character varying(50) NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser bigint NOT NULL
);


ALTER TABLE public.itimclog OWNER TO aart;

--
-- Name: itimclog_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE itimclog_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.itimclog_id_seq OWNER TO aart;

--
-- Name: itimclog_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE itimclog_id_seq OWNED BY itimclog.id;


--
-- Name: ititestsessionhistory; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE ititestsessionhistory (
    id bigint NOT NULL,
    studentid bigint NOT NULL,
    rosterid bigint,
    name character varying(200) NOT NULL,
    status bigint,
    testid bigint,
    testcollectionid bigint NOT NULL,
    testcollectionname character varying(200) NOT NULL,
    saveddate timestamp without time zone,
    confirmdate timestamp without time zone,
    essentialelement text,
    linkagelevel text,
    leveldescription text,
    createddate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now(),
    createduser bigint,
    modifieduser bigint,
    testsessionid bigint,
    studentenrlrosterid bigint,
    claim text,
    conceptualarea text,
    essentialelementid bigint,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.ititestsessionhistory OWNER TO aart;

--
-- Name: ititestsessionhistory_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE ititestsessionhistory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ititestsessionhistory_id_seq OWNER TO aart;

--
-- Name: ititestsessionhistory_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE ititestsessionhistory_id_seq OWNED BY ititestsessionhistory.id;


--
-- Name: ititestsessionsensitivitytags; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE ititestsessionsensitivitytags (
    ititestsessionhistoryid bigint,
    sensitivitytag bigint
);


ALTER TABLE public.ititestsessionsensitivitytags OWNER TO aart;

--
-- Name: ksdbprofile; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE ksdbprofile (
    studentid bigint NOT NULL,
    selectedvalue text,
    profileitemattributenameattributecontainerid bigint,
    activeflag boolean,
    profileexits boolean NOT NULL
);


ALTER TABLE public.ksdbprofile OWNER TO aart;

--
-- Name: ksdexmlaudit_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE ksdexmlaudit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ksdexmlaudit_id_seq OWNER TO aart;

--
-- Name: ksdexmlaudit; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE ksdexmlaudit (
    id bigint DEFAULT nextval('ksdexmlaudit_id_seq'::regclass) NOT NULL,
    type character varying(10) NOT NULL,
    xml text NOT NULL,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp with time zone,
    processeddate timestamp with time zone,
    processedcode character varying(30),
    fromdate timestamp with time zone,
    todate timestamp with time zone,
    errors text,
    successcount integer,
    failedcount integer
);


ALTER TABLE public.ksdexmlaudit OWNER TO aart;

--
-- Name: ksdexmlaudit_id_seq1; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE ksdexmlaudit_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ksdexmlaudit_id_seq1 OWNER TO aart;

--
-- Name: ksdexmlaudit_id_seq1; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE ksdexmlaudit_id_seq1 OWNED BY ksdexmlaudit.id;


--
-- Name: lcsentries; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE lcsentries (
    lcsid text,
    studentstestsid bigint
);


ALTER TABLE public.lcsentries OWNER TO aart;

--
-- Name: leveldescription; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE leveldescription (
    id bigint NOT NULL,
    schoolyear bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    subjectid bigint NOT NULL,
    gradeid bigint NOT NULL,
    level bigint NOT NULL,
    levelname character varying(300),
    batchuploadid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint,
    activeflag boolean DEFAULT true,
    leveldescription character varying(1000),
    descriptiontype character varying(20),
    descriptionparagraphpagebottom character varying(1000)
);


ALTER TABLE public.leveldescription OWNER TO aart;

--
-- Name: leveldescription_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE leveldescription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.leveldescription_id_seq OWNER TO aart;

--
-- Name: leveldescription_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE leveldescription_id_seq OWNED BY leveldescription.id;


--
-- Name: lmassessmentmodelrule; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE lmassessmentmodelrule (
    testspecificationid bigint NOT NULL,
    ranking bigint NOT NULL,
    contentframeworkdetailid bigint NOT NULL,
    operator character varying(5),
    contentcodecorder bigint
);


ALTER TABLE public.lmassessmentmodelrule OWNER TO aart;

--
-- Name: micromap; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE micromap (
    id bigint NOT NULL,
    micromapid bigint NOT NULL,
    micromapname character varying(200),
    associatedee character varying(200),
    nodeid bigint,
    linkagelabel character varying(200),
    nodekey character varying(200),
    nodename character varying(200),
    linkagelevelshortdesc text,
    linkagelevellongdesc text,
    nodedescription text,
    versionid bigint,
    versionname character varying(200),
    versionnumber real,
    contentframeworkdetailid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint,
    modifieduser bigint,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.micromap OWNER TO aart;

--
-- Name: micromap_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE micromap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.micromap_id_seq OWNER TO aart;

--
-- Name: micromap_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE micromap_id_seq OWNED BY micromap.id;


--
-- Name: module; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE module (
    id bigint NOT NULL,
    name character varying(250) NOT NULL,
    description text NOT NULL,
    assessmentprogramid bigint NOT NULL,
    suggestedaudience character varying(2000),
    statusid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint,
    modifieduser bigint,
    activeflag boolean DEFAULT true,
    testid bigint,
    tutorialid bigint,
    requiredflag boolean DEFAULT false,
    passingscore integer
);


ALTER TABLE public.module OWNER TO aart;

--
-- Name: module_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE module_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.module_id_seq OWNER TO aart;

--
-- Name: module_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE module_id_seq OWNED BY module.id;


--
-- Name: modulegroup; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE modulegroup (
    moduleid bigint NOT NULL,
    groupid bigint NOT NULL
);


ALTER TABLE public.modulegroup OWNER TO aart;

--
-- Name: modulegroup_groupid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE modulegroup_groupid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.modulegroup_groupid_seq OWNER TO aart;

--
-- Name: modulegroup_groupid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE modulegroup_groupid_seq OWNED BY modulegroup.groupid;


--
-- Name: modulegroup_moduleid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE modulegroup_moduleid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.modulegroup_moduleid_seq OWNER TO aart;

--
-- Name: modulegroup_moduleid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE modulegroup_moduleid_seq OWNED BY modulegroup.moduleid;


--
-- Name: modulereport_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE modulereport_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.modulereport_id_seq OWNER TO aart;

--
-- Name: modulereport_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE modulereport_id_seq OWNED BY modulereport.id;


--
-- Name: modulestate; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE modulestate (
    moduleid bigint NOT NULL,
    stateid bigint NOT NULL,
    statusid bigint NOT NULL,
    ceu integer
);


ALTER TABLE public.modulestate OWNER TO aart;

--
-- Name: modulestate_moduleid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE modulestate_moduleid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.modulestate_moduleid_seq OWNER TO aart;

--
-- Name: modulestate_moduleid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE modulestate_moduleid_seq OWNED BY modulestate.moduleid;


--
-- Name: modulestate_stateid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE modulestate_stateid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.modulestate_stateid_seq OWNER TO aart;

--
-- Name: modulestate_stateid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE modulestate_stateid_seq OWNED BY modulestate.stateid;


--
-- Name: moduletag; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE moduletag (
    moduleid bigint NOT NULL,
    tagid bigint NOT NULL
);


ALTER TABLE public.moduletag OWNER TO aart;

--
-- Name: moduletag_moduleid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE moduletag_moduleid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.moduletag_moduleid_seq OWNER TO aart;

--
-- Name: moduletag_moduleid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE moduletag_moduleid_seq OWNED BY moduletag.moduleid;


--
-- Name: moduletag_tagid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE moduletag_tagid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.moduletag_tagid_seq OWNER TO aart;

--
-- Name: moduletag_tagid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE moduletag_tagid_seq OWNED BY moduletag.tagid;


--
-- Name: student_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE student_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.student_id_seq OWNER TO aart;

--
-- Name: student; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE student (
    id bigint DEFAULT nextval('student_id_seq'::regclass) NOT NULL,
    statestudentidentifier character varying(50) NOT NULL,
    legalfirstname character varying(80),
    legalmiddlename character varying(80),
    legallastname character varying(80),
    generationcode character varying(10),
    dateofbirth date,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    gender integer,
    firstlanguage character varying(2),
    comprehensiverace character varying(5),
    primarydisabilitycode character varying(60),
    username character varying(100),
    password character varying(15),
    synced boolean DEFAULT false NOT NULL,
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieduser integer,
    hispanicethnicity boolean,
    commbandid bigint,
    elabandid bigint,
    finalelabandid bigint,
    mathbandid bigint,
    finalmathbandid bigint,
    source character varying(20),
    usaentrydate timestamp with time zone,
    esolparticipationcode character varying(1),
    esolprogramendingdate timestamp with time zone,
    esolprogramentrydate timestamp with time zone,
    profilestatus character varying DEFAULT 'NO SETTINGS'::character varying,
    stateid bigint
);


ALTER TABLE public.student OWNER TO aart;

--
-- Name: testcollectionstests; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testcollectionstests (
    testcollectionid bigint NOT NULL,
    testid bigint NOT NULL
);


ALTER TABLE public.testcollectionstests OWNER TO aart;

--
-- Name: total_item_summary_by_node; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE total_item_summary_by_node (
    students_tests_id bigint,
    student_id bigint,
    test_id bigint,
    test_collection_id bigint,
    node_key character varying(20),
    content_framework_detail_code character varying(40),
    content_framework_detail_description character varying(2000),
    total_items_presented bigint,
    test_session_name character varying(200)
);


ALTER TABLE public.total_item_summary_by_node OWNER TO aart;

--
-- Name: node_report; Type: VIEW; Schema: public; Owner: aart
--

CREATE VIEW node_report AS
    SELECT s.id AS student_id, s.statestudentidentifier AS state_student_identifier, s.legalfirstname AS legal_first_name, s.legalmiddlename AS legal_middle_name, s.legallastname AS legal_last_name, s.comprehensiverace AS comprehensive_race, s.gender, s.primarydisabilitycode AS primary_disability_code, ti_summary.node_key, ti_summary.students_tests_id, ti_summary.test_id, t.testname AS test_name, t.status AS test_status_id, tc.id AS test_collection_id, tc.name AS test_collection_name, nvl(cr_summary.no_of_correct_responses) AS no_of_correct_responses, nvl(ir_summary.no_of_in_correct_responses) AS no_of_in_correct_responses, (nvl(cr_summary.no_of_correct_responses) + nvl(ir_summary.no_of_in_correct_responses)) AS no_of_responses, nvl(ai_summary.no_of_answered_items) AS no_of_answered_items, nvl((cr_summary.total_raw_score)::bigint) AS total_raw_score, ti_summary.content_framework_detail_code, ti_summary.content_framework_detail_description, ti_summary.total_items_presented, ti_summary.test_session_name FROM student s, test t, testcollectionstests tct, testcollection tc, (((total_item_summary_by_node ti_summary LEFT JOIN correct_response_summary_by_node cr_summary ON ((((ti_summary.students_tests_id = cr_summary.students_tests_id) AND ((ti_summary.node_key)::text = (cr_summary.node_key)::text)) AND ((ti_summary.content_framework_detail_code)::text = (cr_summary.content_framework_detail_code)::text)))) LEFT JOIN in_correct_response_summary_by_node ir_summary ON ((((ti_summary.students_tests_id = ir_summary.students_tests_id) AND ((ti_summary.node_key)::text = (ir_summary.node_key)::text)) AND ((ti_summary.content_framework_detail_code)::text = (ir_summary.content_framework_detail_code)::text)))) LEFT JOIN answered_item_summary_by_node ai_summary ON ((((ti_summary.students_tests_id = ai_summary.students_tests_id) AND ((ti_summary.node_key)::text = (ai_summary.node_key)::text)) AND ((ti_summary.content_framework_detail_code)::text = (ai_summary.content_framework_detail_code)::text)))) WHERE ((((tct.testid = t.id) AND (tct.testcollectionid = tc.id)) AND (ti_summary.student_id = s.id)) AND (ti_summary.test_id = t.id));


ALTER TABLE public.node_report OWNER TO aart;

--
-- Name: operationaltestwindow; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE operationaltestwindow (
    id bigint NOT NULL,
    windowname character varying(75) NOT NULL,
    effectivedate timestamp with time zone,
    expirydate timestamp with time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp with time zone,
    createduser integer NOT NULL,
    modifieduser integer NOT NULL,
    suspendwindow boolean DEFAULT false NOT NULL,
    activeflag boolean DEFAULT true NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    testenrollmentflag boolean,
    assessmentprogramid bigint,
    testenrollmentmethodid bigint,
    autoenrollmentflag boolean
);


ALTER TABLE public.operationaltestwindow OWNER TO aart;

--
-- Name: operationaltestwindow_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE operationaltestwindow_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.operationaltestwindow_id_seq OWNER TO aart;

--
-- Name: operationaltestwindow_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE operationaltestwindow_id_seq OWNED BY operationaltestwindow.id;


--
-- Name: operationaltestwindowmultiassigndetail; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE operationaltestwindowmultiassigndetail (
    id bigint NOT NULL,
    operationaltestwindowid bigint NOT NULL,
    contentareaid bigint NOT NULL,
    numberoftests integer
);


ALTER TABLE public.operationaltestwindowmultiassigndetail OWNER TO aart;

--
-- Name: operationaltestwindowmultiassigndetail_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE operationaltestwindowmultiassigndetail_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.operationaltestwindowmultiassigndetail_id_seq OWNER TO aart;

--
-- Name: operationaltestwindowmultiassigndetail_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE operationaltestwindowmultiassigndetail_id_seq OWNED BY operationaltestwindowmultiassigndetail.id;


--
-- Name: operationaltestwindowsessionrule; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE operationaltestwindowsessionrule (
    sessionruleid bigint NOT NULL,
    graceperiod bigint,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    operationaltestwindowid bigint NOT NULL,
    dacstarttime time with time zone,
    dacendtime time with time zone
);


ALTER TABLE public.operationaltestwindowsessionrule OWNER TO aart;

--
-- Name: operationaltestwindowstate; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE operationaltestwindowstate (
    operationaltestwindowid bigint NOT NULL,
    stateid bigint NOT NULL,
    createduser bigint NOT NULL,
    createddate time with time zone DEFAULT now() NOT NULL,
    modifieduser integer,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp with time zone,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.operationaltestwindowstate OWNER TO aart;

--
-- Name: operationaltestwindowstestcollections; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE operationaltestwindowstestcollections (
    operationaltestwindowid bigint NOT NULL,
    testcollectionid bigint NOT NULL,
    createduser bigint NOT NULL,
    createddate time with time zone DEFAULT now() NOT NULL,
    modifieduser integer,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp with time zone,
    activeflag boolean DEFAULT true NOT NULL
);


ALTER TABLE public.operationaltestwindowstestcollections OWNER TO aart;

--
-- Name: operationaltestwindowstudent; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE operationaltestwindowstudent (
    studentid bigint NOT NULL,
    contentareaid bigint NOT NULL,
    courseid bigint,
    exclude boolean DEFAULT false,
    activeflag boolean DEFAULT true,
    operationaltestwindowid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    modifieduser integer
);


ALTER TABLE public.operationaltestwindowstudent OWNER TO aart;

--
-- Name: organization_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE organization_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organization_id_seq OWNER TO aart;

--
-- Name: organization_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE organization_id_seq OWNED BY organization.id;


--
-- Name: organizationcontentarea; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE organizationcontentarea (
    organizationid bigint NOT NULL,
    contentareaid bigint NOT NULL,
    organizationcontentareacode character varying(30) NOT NULL
);


ALTER TABLE public.organizationcontentarea OWNER TO aart;

--
-- Name: organizationhierarchy; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE organizationhierarchy (
    organizationid bigint NOT NULL,
    organizationtypeid bigint NOT NULL
);


ALTER TABLE public.organizationhierarchy OWNER TO aart;

--
-- Name: organizationreportdetails; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE organizationreportdetails (
    id bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    contentareaid bigint,
    gradeid bigint,
    organizationid bigint,
    schoolyear bigint,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    detailedreportpath text,
    schoolreportpdfpath text,
    schoolreportpdfsize bigint,
    schoolreportzipsize bigint,
    batchreportprocessid bigint NOT NULL,
    gradecourseabbrname character varying(10),
    summaryreportpath text
);


ALTER TABLE public.organizationreportdetails OWNER TO aart;

--
-- Name: organizationreportdetails_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE organizationreportdetails_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organizationreportdetails_id_seq OWNER TO aart;

--
-- Name: organizationreportdetails_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE organizationreportdetails_id_seq OWNED BY organizationreportdetails.id;


--
-- Name: organizationtreedetail; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE organizationtreedetail (
    schoolid bigint NOT NULL,
    schoolname character varying(200) NOT NULL,
    schooldisplayidentifier character varying(100) NOT NULL,
    districtid bigint,
    districtname character varying(200),
    districtdisplayidentifier character varying(100),
    stateid bigint,
    statename character varying(200),
    statedisplayidentifier character varying(100),
    createddate timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.organizationtreedetail OWNER TO aart;

--
-- Name: organizationtype; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE organizationtype (
    id bigint NOT NULL,
    typename character varying(75),
    typecode character varying(75) NOT NULL,
    typelevel integer NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.organizationtype OWNER TO aart;

--
-- Name: organizationtype_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE organizationtype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organizationtype_id_seq OWNER TO aart;

--
-- Name: organizationtype_id_seq1; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE organizationtype_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organizationtype_id_seq1 OWNER TO aart;

--
-- Name: organizationtype_id_seq1; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE organizationtype_id_seq1 OWNED BY organizationtype.id;


--
-- Name: orgassessmentprogram; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE orgassessmentprogram (
    id bigint NOT NULL,
    organizationid bigint,
    assessmentprogramid bigint,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.orgassessmentprogram OWNER TO aart;

--
-- Name: orgassessmentprogram_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE orgassessmentprogram_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.orgassessmentprogram_id_seq OWNER TO aart;

--
-- Name: orgassessmentprogram_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE orgassessmentprogram_id_seq OWNED BY orgassessmentprogram.id;


--
-- Name: policy; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE policy (
    id bigint NOT NULL,
    organizationid bigint,
    name character varying(75),
    data text,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.policy OWNER TO aart;

--
-- Name: policy_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE policy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.policy_id_seq OWNER TO aart;

--
-- Name: policy_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE policy_id_seq OWNED BY policy.id;


--
-- Name: profileitemattribute; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE profileitemattribute (
    id bigint NOT NULL,
    attributename character varying(100) NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.profileitemattribute OWNER TO aart;

--
-- Name: profileitemattribute_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE profileitemattribute_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.profileitemattribute_id_seq OWNER TO aart;

--
-- Name: profileitemattribute_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE profileitemattribute_id_seq OWNED BY profileitemattribute.id;


--
-- Name: profileitemattributecontainer; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE profileitemattributecontainer (
    id bigint NOT NULL,
    attributecontainer character varying(100) NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.profileitemattributecontainer OWNER TO aart;

--
-- Name: profileitemattributecontainer_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE profileitemattributecontainer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.profileitemattributecontainer_id_seq OWNER TO aart;

--
-- Name: profileitemattributecontainer_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE profileitemattributecontainer_id_seq OWNED BY profileitemattributecontainer.id;


--
-- Name: profileitemattributenameattributecontainer; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE profileitemattributenameattributecontainer (
    id bigint NOT NULL,
    attributenameid bigint,
    attributecontainerid bigint,
    parentcontainerleveloneid bigint,
    parentcontainerleveltwoid bigint,
    parentcontainerlevelthreeid bigint,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.profileitemattributenameattributecontainer OWNER TO aart;

--
-- Name: profileitemattributenameattributecontainer_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE profileitemattributenameattributecontainer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.profileitemattributenameattributecontainer_id_seq OWNER TO aart;

--
-- Name: profileitemattributenameattributecontainer_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE profileitemattributenameattributecontainer_id_seq OWNED BY profileitemattributenameattributecontainer.id;


--
-- Name: profileitemattrnameattrcontainerviewoptions; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE profileitemattrnameattrcontainerviewoptions (
    id bigint NOT NULL,
    pianacid bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    viewoption character varying(255) NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.profileitemattrnameattrcontainerviewoptions OWNER TO aart;

--
-- Name: profileitemattrnameattrcontainerviewoptions_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE profileitemattrnameattrcontainerviewoptions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.profileitemattrnameattrcontainerviewoptions_id_seq OWNER TO aart;

--
-- Name: profileitemattrnameattrcontainerviewoptions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE profileitemattrnameattrcontainerviewoptions_id_seq OWNED BY profileitemattrnameattrcontainerviewoptions.id;


--
-- Name: proportionmetrics_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE proportionmetrics_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.proportionmetrics_id_seq OWNER TO aart;

--
-- Name: proportionmetrics; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE proportionmetrics (
    id bigint DEFAULT nextval('proportionmetrics_id_seq'::regclass) NOT NULL,
    contentareaid bigint,
    gradecourseid bigint,
    gradebandid bigint,
    linkagelevelid bigint,
    essentialelementid bigint,
    essentialelement character varying(40),
    linkagelevelabbr character varying(75),
    proportionlow numeric(10,9),
    proportionhigh numeric(10,9),
    createduser integer,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    modifieduser integer,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.proportionmetrics OWNER TO aart;

--
-- Name: rawtoscalescores; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE rawtoscalescores (
    id bigint NOT NULL,
    schoolyear bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    subjectid bigint NOT NULL,
    gradeid bigint NOT NULL,
    testid1 bigint NOT NULL,
    testid2 bigint,
    rawscore numeric NOT NULL,
    scalescore bigint NOT NULL,
    standarderror numeric NOT NULL,
    batchuploadid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    testid3 bigint,
    testid4 bigint,
    performance_testid bigint,
    performance_subjectid bigint,
    performance_rawscore_include_flag boolean,
    performance_item_weight numeric
);


ALTER TABLE public.rawtoscalescores OWNER TO aart;

--
-- Name: rawtoscalescores_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE rawtoscalescores_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rawtoscalescores_id_seq OWNER TO aart;

--
-- Name: rawtoscalescores_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE rawtoscalescores_id_seq OWNED BY rawtoscalescores.id;


--
-- Name: readaloudaccomodation_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE readaloudaccomodation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.readaloudaccomodation_id_seq OWNER TO aart;

--
-- Name: readaloudaccommodation; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE readaloudaccommodation (
    id bigint DEFAULT nextval('readaloudaccomodation_id_seq'::regclass) NOT NULL,
    externalid bigint NOT NULL,
    contentgroupid bigint NOT NULL,
    readaloudtypeid bigint NOT NULL,
    synthetic boolean,
    syntheticpronoun text,
    human boolean,
    defaultorder integer,
    alternateorder integer,
    accessibilityfileid bigint,
    starttime integer,
    endtime integer,
    createuserid bigint,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduserid bigint,
    originationcode character varying(20) NOT NULL
);


ALTER TABLE public.readaloudaccommodation OWNER TO aart;

--
-- Name: reportassessmentprogram; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE reportassessmentprogram (
    id bigint NOT NULL,
    reporttypeid bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    readytoview boolean DEFAULT false,
    activeflag boolean DEFAULT true,
    stateid bigint,
    subjectid bigint,
    authorityid bigint
);


ALTER TABLE public.reportassessmentprogram OWNER TO aart;

--
-- Name: reportassessmentprogram_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE reportassessmentprogram_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reportassessmentprogram_id_seq OWNER TO aart;

--
-- Name: reportassessmentprogram_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE reportassessmentprogram_id_seq OWNED BY reportassessmentprogram.id;


--
-- Name: reportassessmentprogramgroup_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE reportassessmentprogramgroup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reportassessmentprogramgroup_id_seq OWNER TO aart;

--
-- Name: reportassessmentprogramgroup; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE reportassessmentprogramgroup (
    id bigint DEFAULT nextval('reportassessmentprogramgroup_id_seq'::regclass) NOT NULL,
    reportassessmentprogramid bigint NOT NULL,
    groupid bigint NOT NULL,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.reportassessmentprogramgroup OWNER TO aart;

--
-- Name: reportprocess; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE reportprocess (
    id bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    subjectid bigint NOT NULL,
    gradeid bigint NOT NULL,
    process character varying(500) NOT NULL,
    status character varying(200),
    successcount integer,
    failedcount integer,
    resultjson text,
    submissiondate timestamp with time zone DEFAULT now() NOT NULL,
    modifieddate timestamp with time zone DEFAULT now(),
    createduser bigint,
    modifieduser bigint,
    activeflag boolean DEFAULT true NOT NULL
);


ALTER TABLE public.reportprocess OWNER TO aart;

--
-- Name: reportprocess_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE reportprocess_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reportprocess_id_seq OWNER TO aart;

--
-- Name: reportprocessreason; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE reportprocessreason (
    reportprocessid bigint NOT NULL,
    studentid bigint,
    reason text,
    testid1 bigint,
    testid2 bigint,
    testid3 bigint,
    testid4 bigint,
    performancetestid bigint
);


ALTER TABLE public.reportprocessreason OWNER TO aart;

--
-- Name: reportprocessrecordcounts; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE reportprocessrecordcounts (
    id bigint NOT NULL,
    process character varying(200),
    assessmentprogramid bigint NOT NULL,
    contentareaid bigint NOT NULL,
    gradeid bigint NOT NULL,
    count bigint,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    batchreportprocessid bigint NOT NULL
);


ALTER TABLE public.reportprocessrecordcounts OWNER TO aart;

--
-- Name: reportprocessrecordcounts_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE reportprocessrecordcounts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reportprocessrecordcounts_id_seq OWNER TO aart;

--
-- Name: reportprocessrecordcounts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE reportprocessrecordcounts_id_seq OWNED BY reportprocessrecordcounts.id;


--
-- Name: reportsmedianscore; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE reportsmedianscore (
    id bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    contentareaid bigint NOT NULL,
    gradeid bigint NOT NULL,
    organizationid bigint,
    organizationtypeid bigint,
    score bigint,
    standarddeviation numeric(10,6),
    standarderror numeric(10,6),
    schoolyear bigint,
    studentcount integer,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    subscoredefinitionname character varying(100),
    batchreportprocessid bigint
);


ALTER TABLE public.reportsmedianscore OWNER TO aart;

--
-- Name: reportsmedianscore_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE reportsmedianscore_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reportsmedianscore_id_seq OWNER TO aart;

--
-- Name: reportsmedianscore_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE reportsmedianscore_id_seq OWNED BY reportsmedianscore.id;


--
-- Name: reportspercentbylevel; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE reportspercentbylevel (
    id bigint NOT NULL,
    organizationid bigint,
    organizationtypeid bigint,
    assessmentprogramid bigint,
    gradeid bigint,
    contentareaid bigint,
    studenttest1id bigint,
    studenttest2id bigint,
    externaltest1id bigint,
    externaltest2id bigint,
    level bigint,
    percent integer,
    studentcount integer,
    batchreportprocessid bigint NOT NULL,
    schoolyear bigint,
    createddate timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.reportspercentbylevel OWNER TO aart;

--
-- Name: reportspercentbylevel_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE reportspercentbylevel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reportspercentbylevel_id_seq OWNER TO aart;

--
-- Name: reportspercentbylevel_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE reportspercentbylevel_id_seq OWNED BY reportspercentbylevel.id;


--
-- Name: reportsubscores; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE reportsubscores (
    id bigint NOT NULL,
    studentid bigint NOT NULL,
    subscoredefinitionname character varying(100) NOT NULL,
    subscorerawscore numeric(6,3) NOT NULL,
    subscorescalescore bigint,
    subscorestandarderror numeric,
    studentreportid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    rating integer NOT NULL
);


ALTER TABLE public.reportsubscores OWNER TO aart;

--
-- Name: reportsubscores_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE reportsubscores_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reportsubscores_id_seq OWNER TO aart;

--
-- Name: reporttestlevelsubscores; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE reporttestlevelsubscores (
    id bigint NOT NULL,
    studentid bigint NOT NULL,
    studentreportid bigint NOT NULL,
    testid bigint NOT NULL,
    subscoredefinitionname character varying(100) NOT NULL,
    totalitemsincluded integer,
    itemsresponded integer,
    subscorerawscore numeric(6,3),
    createddate timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.reporttestlevelsubscores OWNER TO aart;

--
-- Name: reporttestlevelsubscores_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE reporttestlevelsubscores_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reporttestlevelsubscores_id_seq OWNER TO aart;

--
-- Name: restriction; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE restriction (
    id bigint NOT NULL,
    restrictionname character varying(75) DEFAULT '  '::character varying NOT NULL,
    restrictioncode character varying(75) DEFAULT '  '::character varying NOT NULL,
    restrictiondescription character varying(75) DEFAULT '  '::character varying NOT NULL,
    restrictedresourcetypeid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.restriction OWNER TO aart;

--
-- Name: restrictionsauthorities; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE restrictionsauthorities (
    id bigint NOT NULL,
    restrictionid bigint NOT NULL,
    authorityid bigint NOT NULL,
    isparent boolean NOT NULL,
    ischild boolean NOT NULL,
    isdifferential boolean NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.restrictionsauthorities OWNER TO aart;

--
-- Name: restrictionsorganizations; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE restrictionsorganizations (
    restrictionid bigint NOT NULL,
    organizationid bigint NOT NULL,
    isenforced boolean DEFAULT false NOT NULL,
    id bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.restrictionsorganizations OWNER TO aart;

--
-- Name: resource_restriction; Type: VIEW; Schema: public; Owner: aart
--

CREATE VIEW resource_restriction AS
    SELECT res.restrictionname AS restriction_name, res.restrictioncode AS restriction_code, res.restrictiondescription AS restriction_description, res.restrictedresourcetypeid AS restricted_resource_type_id, resorgs.id AS restrictions_organizations_id, resorgs.restrictionid AS restriction_id, resorgs.organizationid AS organization_id, resorgs.isenforced AS is_enforced, resauths.id AS restrictions_authorities_id, resauths.authorityid AS authority_id, resauths.isparent AS is_parent, resauths.ischild AS is_child, diffauths.authorityid AS differential_authority_id FROM restrictionsorganizations resorgs, restrictionsauthorities resauths, (restriction res LEFT JOIN restrictionsauthorities diffauths ON (((((diffauths.restrictionid = res.id) AND (diffauths.isparent = false)) AND (diffauths.ischild = false)) AND (diffauths.isdifferential = true)))) WHERE (((res.id = resorgs.restrictionid) AND (resauths.restrictionid = res.id)) AND (resauths.isdifferential = false));


ALTER TABLE public.resource_restriction OWNER TO aart;

--
-- Name: restriction_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE restriction_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.restriction_id_seq OWNER TO aart;

--
-- Name: restriction_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE restriction_id_seq OWNED BY restriction.id;


--
-- Name: restrictionsauthorities_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE restrictionsauthorities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.restrictionsauthorities_id_seq OWNER TO aart;

--
-- Name: restrictionsauthorities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE restrictionsauthorities_id_seq OWNED BY restrictionsauthorities.id;


--
-- Name: restrictionsorganizations_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE restrictionsorganizations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.restrictionsorganizations_id_seq OWNER TO aart;

--
-- Name: restrictionsorganizations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE restrictionsorganizations_id_seq OWNED BY restrictionsorganizations.id;


--
-- Name: restrictionsorganizations_restrictionid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE restrictionsorganizations_restrictionid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.restrictionsorganizations_restrictionid_seq OWNER TO aart;

--
-- Name: restrictionsorganizations_restrictionid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE restrictionsorganizations_restrictionid_seq OWNED BY restrictionsorganizations.restrictionid;


--
-- Name: roster_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE roster_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.roster_id_seq OWNER TO aart;

--
-- Name: roster_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE roster_id_seq OWNED BY roster.id;


--
-- Name: rubriccategory; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE rubriccategory (
    id bigint NOT NULL,
    taskvariantid bigint NOT NULL,
    name text,
    rubricminscore bigint,
    rubricmaxscore bigint
);


ALTER TABLE public.rubriccategory OWNER TO aart;

--
-- Name: rubriccategoryid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE rubriccategoryid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rubriccategoryid_seq OWNER TO aart;

--
-- Name: rubricinfo; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE rubricinfo (
    id bigint NOT NULL,
    rubriccategoryid bigint NOT NULL,
    score integer,
    description text
);


ALTER TABLE public.rubricinfo OWNER TO aart;

--
-- Name: rubricinfoid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE rubricinfoid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rubricinfoid_seq OWNER TO aart;

--
-- Name: rubricscore; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE rubricscore (
    id bigint NOT NULL,
    studenttestid bigint NOT NULL,
    taskvariantid bigint NOT NULL,
    rubricscore numeric(10,2),
    date timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    rubricinfoids text
);


ALTER TABLE public.rubricscore OWNER TO aart;

--
-- Name: rubricscore_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE rubricscore_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rubricscore_id_seq OWNER TO aart;

--
-- Name: rubricscore_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE rubricscore_id_seq OWNED BY rubricscore.id;


--
-- Name: scoremapping; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE scoremapping (
    originalscore numeric(6,3),
    convertedscore numeric(6,3)
);


ALTER TABLE public.scoremapping OWNER TO aart;

--
-- Name: scoringassignment; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE scoringassignment (
    id bigint NOT NULL,
    testsessionid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    ccqtestname character varying(200)
);


ALTER TABLE public.scoringassignment OWNER TO aart;

--
-- Name: scoringassignment_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE scoringassignment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.scoringassignment_id_seq OWNER TO aart;

--
-- Name: scoringassignment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE scoringassignment_id_seq OWNED BY scoringassignment.id;


--
-- Name: scoringassignmentscorer; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE scoringassignmentscorer (
    id bigint NOT NULL,
    scoringassignmentid bigint NOT NULL,
    scorerid integer NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.scoringassignmentscorer OWNER TO aart;

--
-- Name: scoringassignmentscorer_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE scoringassignmentscorer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.scoringassignmentscorer_id_seq OWNER TO aart;

--
-- Name: scoringassignmentscorer_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE scoringassignmentscorer_id_seq OWNED BY scoringassignmentscorer.id;


--
-- Name: scoringassignmentstudent; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE scoringassignmentstudent (
    id bigint NOT NULL,
    studentstestsid bigint NOT NULL,
    studentid bigint NOT NULL,
    scoringassignmentid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.scoringassignmentstudent OWNER TO aart;

--
-- Name: scoringassignmentstudent_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE scoringassignmentstudent_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.scoringassignmentstudent_id_seq OWNER TO aart;

--
-- Name: scoringassignmentstudent_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE scoringassignmentstudent_id_seq OWNED BY scoringassignmentstudent.id;


--
-- Name: sensitivitytag; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE sensitivitytag (
    id bigint NOT NULL,
    externalid bigint,
    name character varying(256),
    abbreviation character varying(30),
    contentareaid bigint,
    inuse boolean DEFAULT true,
    originationcode character varying(20),
    createdate timestamp with time zone,
    modifieddate timestamp with time zone
);


ALTER TABLE public.sensitivitytag OWNER TO aart;

--
-- Name: sensitivitytag_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE sensitivitytag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sensitivitytag_id_seq OWNER TO aart;

--
-- Name: sensitivitytag_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE sensitivitytag_id_seq OWNED BY sensitivitytag.id;


--
-- Name: signedaccomodation_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE signedaccomodation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.signedaccomodation_id_seq OWNER TO aart;

--
-- Name: signedaccommodation; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE signedaccommodation (
    id bigint DEFAULT nextval('signedaccomodation_id_seq'::regclass) NOT NULL,
    externalid bigint NOT NULL,
    contentgroupid bigint NOT NULL,
    signedabbreviation character varying(30),
    defaultorder integer,
    alternateorder integer,
    accessibilityfileid bigint,
    starttime integer,
    endtime integer,
    createuserid bigint,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduserid bigint,
    originationcode character varying(20) NOT NULL
);


ALTER TABLE public.signedaccommodation OWNER TO aart;

--
-- Name: specialcircumstance; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE specialcircumstance (
    id bigint NOT NULL,
    specialcircumstancetype character varying(100),
    cedscode bigint,
    ksdecode character varying(100),
    assessmentprogramid bigint,
    activeflag boolean DEFAULT true,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer,
    description character varying(70)
);


ALTER TABLE public.specialcircumstance OWNER TO aart;

--
-- Name: specialcircumstance_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE specialcircumstance_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.specialcircumstance_id_seq OWNER TO aart;

--
-- Name: specialcircumstance_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE specialcircumstance_id_seq OWNED BY specialcircumstance.id;


--
-- Name: stage; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE stage (
    id bigint NOT NULL,
    externalid bigint,
    code character varying(75) NOT NULL,
    name character varying(75) NOT NULL,
    sortorder integer NOT NULL,
    predecessorid bigint,
    activeflag boolean DEFAULT true,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    originationcode character varying(20)
);


ALTER TABLE public.stage OWNER TO aart;

--
-- Name: stage_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE stage_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stage_id_seq OWNER TO aart;

--
-- Name: stage_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE stage_id_seq OWNED BY stage.id;


--
-- Name: statespecialcircumstance; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE statespecialcircumstance (
    stateid bigint,
    specialcircumstanceid bigint,
    requireconfirmation boolean DEFAULT false,
    activeflag boolean DEFAULT true,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer,
    paperpencilcode character varying(10)
);


ALTER TABLE public.statespecialcircumstance OWNER TO aart;

--
-- Name: stimulusvariant; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE stimulusvariant (
    id bigint NOT NULL,
    externalid bigint,
    version integer,
    stimulusformatid bigint,
    stimuluscontent text,
    stimulustitle character varying(300),
    gradecourseid bigint,
    testingprogramid bigint,
    contentareaid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    srcack text,
    resourcename text,
    simulationitemdata text,
    stimulustypeid bigint
);


ALTER TABLE public.stimulusvariant OWNER TO aart;

--
-- Name: stimulusvariant_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE stimulusvariant_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stimulusvariant_id_seq OWNER TO aart;

--
-- Name: stimulusvariant_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE stimulusvariant_id_seq OWNED BY stimulusvariant.id;


--
-- Name: stimulusvariantattachment; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE stimulusvariantattachment (
    id bigint NOT NULL,
    externalid bigint,
    attachmentname character varying(75),
    filename character varying(75),
    filelocation character varying(125),
    filesize integer,
    filetype character varying(75),
    stimulusvariantid bigint NOT NULL,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20)
);


ALTER TABLE public.stimulusvariantattachment OWNER TO aart;

--
-- Name: stimulusvariantattachment_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE stimulusvariantattachment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stimulusvariantattachment_id_seq OWNER TO aart;

--
-- Name: stimulusvariantattachment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE stimulusvariantattachment_id_seq OWNED BY stimulusvariantattachment.id;


--
-- Name: stimulusvariantattachmentmetadata; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE stimulusvariantattachmentmetadata (
    attachmentid bigint NOT NULL,
    propertycode character varying(75) NOT NULL,
    propertyvalue character varying(75),
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp with time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp with time zone
);


ALTER TABLE public.stimulusvariantattachmentmetadata OWNER TO aart;

--
-- Name: stimulusvariantcontentarea; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE stimulusvariantcontentarea (
    stimulusvariantid bigint NOT NULL,
    contentareaid bigint NOT NULL
);


ALTER TABLE public.stimulusvariantcontentarea OWNER TO aart;

--
-- Name: stimulusvariantgradecourse; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE stimulusvariantgradecourse (
    stimulusvariantid bigint NOT NULL,
    gradecourseid bigint NOT NULL
);


ALTER TABLE public.stimulusvariantgradecourse OWNER TO aart;

--
-- Name: stimulusvarianttestingprogram; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE stimulusvarianttestingprogram (
    stimulusvariantid bigint NOT NULL,
    testingprogramid bigint NOT NULL
);


ALTER TABLE public.stimulusvarianttestingprogram OWNER TO aart;

--
-- Name: studentadaptivetest_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentadaptivetest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentadaptivetest_id_seq OWNER TO aart;

--
-- Name: studentadaptivetest; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentadaptivetest (
    id bigint DEFAULT nextval('studentadaptivetest_id_seq'::regclass) NOT NULL,
    studentstestsid bigint NOT NULL,
    nextexternaltestid bigint,
    nextstudentstestsid bigint,
    processedstatus text,
    message text,
    createddate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now(),
    createduser integer,
    modifieduser integer,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.studentadaptivetest OWNER TO aart;

--
-- Name: studentadaptivetestfinaltheta; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentadaptivetestfinaltheta (
    studentstestid bigint NOT NULL,
    testconstructid bigint NOT NULL,
    testconstructnumber integer,
    thetavalue double precision,
    iterationcount integer,
    activeflag boolean DEFAULT true,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    createusername character varying(256) DEFAULT 'TDE Student'::character varying,
    modifiedusername character varying(256) DEFAULT 'TDE Student'::character varying,
    modifieddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone
);


ALTER TABLE public.studentadaptivetestfinaltheta OWNER TO aart;

--
-- Name: studentadaptivetestthetastatus; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentadaptivetestthetastatus (
    studentstestid bigint NOT NULL,
    testpartid bigint,
    testpartnumber integer NOT NULL,
    testsectioncontainerid bigint,
    testsectioncontainernumber integer NOT NULL,
    initialtheta integer,
    interimtheta integer,
    testpartcomplete boolean DEFAULT false,
    activeflag boolean DEFAULT true,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    createusername character varying(256) DEFAULT 'TDE Student'::character varying,
    modifiedusername character varying(256) DEFAULT 'TDE Student'::character varying,
    modifieddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone
);


ALTER TABLE public.studentadaptivetestthetastatus OWNER TO aart;

--
-- Name: studentassessmentprogram; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentassessmentprogram (
    id bigint NOT NULL,
    studentid bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.studentassessmentprogram OWNER TO aart;

--
-- Name: studentassessmentprogram_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentassessmentprogram_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentassessmentprogram_id_seq OWNER TO aart;

--
-- Name: studentassessmentprogram_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studentassessmentprogram_id_seq OWNED BY studentassessmentprogram.id;


--
-- Name: studentaudit; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentaudit (
    id bigint NOT NULL,
    studentid bigint NOT NULL,
    useros character varying(256),
    logouttime timestamp with time zone,
    logintime timestamp with time zone,
    createdate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now(),
    createusername character varying(256) DEFAULT 'TDE Student'::character varying,
    modifiedusername character varying(256) DEFAULT 'TDE Student'::character varying,
    username character varying(100) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE public.studentaudit OWNER TO aart;

--
-- Name: studentbandrecommendation_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentbandrecommendation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentbandrecommendation_id_seq OWNER TO aart;

--
-- Name: studentbandrecommendation; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentbandrecommendation (
    id bigint DEFAULT nextval('studentbandrecommendation_id_seq'::regclass) NOT NULL,
    studentid bigint NOT NULL,
    testid bigint,
    testcollectionid bigint,
    contentareaid bigint,
    usedbandid bigint,
    usedessentialelementid bigint,
    usedessentialelement character varying(100),
    recolinkagelevel character varying(30),
    recofinalband bigint,
    source character varying(100),
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    active boolean DEFAULT true
);


ALTER TABLE public.studentbandrecommendation OWNER TO aart;

--
-- Name: studentnodeprobability; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentnodeprobability (
    id bigint NOT NULL,
    requestid bigint NOT NULL,
    studentid bigint NOT NULL,
    nodeid bigint NOT NULL,
    probability numeric(6,3) NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser bigint NOT NULL
);


ALTER TABLE public.studentnodeprobability OWNER TO aart;

--
-- Name: studentnodeprobability_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentnodeprobability_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentnodeprobability_id_seq OWNER TO aart;

--
-- Name: studentnodeprobability_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studentnodeprobability_id_seq OWNED BY studentnodeprobability.id;


--
-- Name: studentpassword; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentpassword (
    id bigint NOT NULL,
    word character varying(20) NOT NULL
);


ALTER TABLE public.studentpassword OWNER TO aart;

--
-- Name: studentpassword_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentpassword_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentpassword_id_seq OWNER TO aart;

--
-- Name: studentpassword_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studentpassword_id_seq OWNED BY studentpassword.id;


--
-- Name: studentpnpjson; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentpnpjson (
    studentid bigint NOT NULL,
    jsontext text
);


ALTER TABLE public.studentpnpjson OWNER TO aart;

--
-- Name: studentprofileitemattributevalue; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentprofileitemattributevalue (
    id bigint NOT NULL,
    selectedvalue text NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    studentid bigint NOT NULL,
    profileitemattributenameattributecontainerid bigint
);


ALTER TABLE public.studentprofileitemattributevalue OWNER TO aart;

--
-- Name: studentprofileitemattributevalue_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentprofileitemattributevalue_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentprofileitemattributevalue_id_seq OWNER TO aart;

--
-- Name: studentprofileitemattributevalue_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studentprofileitemattributevalue_id_seq OWNED BY studentprofileitemattributevalue.id;


--
-- Name: studentreport; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentreport (
    id bigint NOT NULL,
    studentid bigint NOT NULL,
    enrollmentid bigint NOT NULL,
    gradeid bigint,
    contentareaid bigint,
    attendanceschoolid bigint NOT NULL,
    districtid bigint NOT NULL,
    stateid bigint NOT NULL,
    studenttest1id bigint,
    studenttest2id bigint,
    externaltest1id bigint,
    externaltest2id bigint,
    levelid bigint,
    rawscore numeric(6,3),
    subscore numeric(6,3),
    batchreportprocessid bigint NOT NULL,
    scalescore bigint,
    standarderror numeric(6,3),
    assessmentprogramid bigint,
    schoolyear bigint,
    filepath text,
    aggregates boolean,
    exitstatus boolean,
    incompletestatus boolean,
    status boolean,
    studenttest3id bigint,
    studenttest4id bigint,
    studentperformancetestid bigint,
    externaltest3id bigint,
    externaltest4id bigint,
    performancetestexternalid bigint,
    mdptscore numeric(6,3),
    mdptscorableflag boolean,
    previousyearlevelid bigint,
    combinedlevel numeric,
    mdptlevelid bigint,
    combinedlevelid bigint
);


ALTER TABLE public.studentreport OWNER TO aart;

--
-- Name: studentreport_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentreport_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentreport_id_seq OWNER TO aart;

--
-- Name: studentreport_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studentreport_id_seq OWNED BY studentreport.id;


--
-- Name: studentreporttestscores; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentreporttestscores (
    id bigint NOT NULL,
    studentreportid bigint,
    test1idrawscore numeric(6,3),
    test2idrawscore numeric(6,3),
    test3idrawscore numeric(6,3),
    test4idrawscore numeric(6,3),
    prfrmtestrawscore numeric(6,3),
    test1idtaskvariantcount integer,
    test2idtaskvariantcount integer,
    test3idtaskvariantcount integer,
    test4idtaskvariantcount integer,
    prfrmtesttaskvariantcount integer,
    test1idresponsecount integer,
    test2idresponsecount integer,
    test3idresponsecount integer,
    test4idresponsecount integer,
    prfrmtestresponsecount integer,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone
);


ALTER TABLE public.studentreporttestscores OWNER TO aart;

--
-- Name: studentreporttestscores_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentreporttestscores_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentreporttestscores_id_seq OWNER TO aart;

--
-- Name: studentresponseaudit; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentresponseaudit (
    id bigint NOT NULL,
    createduser integer,
    startdate timestamp with time zone,
    enddate timestamp with time zone,
    numberofresponses integer,
    xml text,
    confirmed boolean DEFAULT false NOT NULL,
    confirmeddate timestamp with time zone
);


ALTER TABLE public.studentresponseaudit OWNER TO aart;

--
-- Name: studentresponseaudit_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentresponseaudit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentresponseaudit_id_seq OWNER TO aart;

--
-- Name: studentresponsescore; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentresponsescore (
    studentstestsectionsid bigint NOT NULL,
    taskvariantexternalid bigint NOT NULL,
    score numeric(6,3),
    dimension text NOT NULL,
    diagnosticstatement text,
    raterid bigint NOT NULL,
    ratername text,
    raterorder smallint,
    raterexposure integer,
    createdate timestamp without time zone,
    modifieddate timestamp without time zone,
    activeflag boolean DEFAULT true NOT NULL,
    scorable boolean DEFAULT true,
    nonscorablecodeid bigint
);


ALTER TABLE public.studentresponsescore OWNER TO aart;

--
-- Name: studentresponsescorerater; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentresponsescorerater (
    raterid bigint NOT NULL,
    userid bigint NOT NULL
);


ALTER TABLE public.studentresponsescorerater OWNER TO aart;

--
-- Name: studentresponsetaskvariantgroup; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentresponsetaskvariantgroup (
    taskvariantexternalid bigint NOT NULL,
    groupnumber integer NOT NULL,
    contentareaabbr character varying(75),
    gradecourseabbr character varying(10),
    processed boolean DEFAULT false NOT NULL,
    processeddate timestamp with time zone
);


ALTER TABLE public.studentresponsetaskvariantgroup OWNER TO aart;

--
-- Name: studentsadaptivetestsections; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentsadaptivetestsections (
    studentstestid bigint NOT NULL,
    testpartid bigint NOT NULL,
    testsectioncontainerid bigint,
    testsectioncontainerthetanodeid bigint,
    testsectionid bigint NOT NULL,
    taskvariantid bigint,
    activeflag boolean DEFAULT true,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    createusername character varying(256) DEFAULT 'TDE Student'::character varying,
    modifiedusername character varying(256) DEFAULT 'TDE Student'::character varying,
    modifieddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone
);


ALTER TABLE public.studentsadaptivetestsections OWNER TO aart;

--
-- Name: studentsassessments; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentsassessments (
    studentid bigint NOT NULL,
    assessmentid bigint NOT NULL,
    contentareaid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.studentsassessments OWNER TO aart;

--
-- Name: studentspecialcircumstance; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentspecialcircumstance (
    studenttestid bigint NOT NULL,
    specialcircumstanceid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer,
    activeflag boolean DEFAULT true,
    status bigint,
    approvedby bigint
);


ALTER TABLE public.studentspecialcircumstance OWNER TO aart;

--
-- Name: studentsresponseparameters_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentsresponseparameters_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentsresponseparameters_id_seq OWNER TO aart;

--
-- Name: studentsresponseparameters; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentsresponseparameters (
    id bigint DEFAULT nextval('studentsresponseparameters_id_seq'::regclass) NOT NULL,
    studentstestsid bigint NOT NULL,
    studentstestsectionsid bigint NOT NULL,
    testid bigint NOT NULL,
    taskvariantid bigint NOT NULL,
    score numeric(6,3),
    avalue double precision,
    bvalue double precision,
    b2value double precision,
    formulacode integer,
    createddate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now(),
    createduser integer,
    modifieduser integer,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.studentsresponseparameters OWNER TO aart;

--
-- Name: studentsresponses; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentsresponses (
    studentid bigint,
    testid bigint,
    testsectionid bigint,
    studentstestsid bigint,
    studentstestsectionsid bigint NOT NULL,
    taskvariantid bigint NOT NULL,
    foilid bigint,
    response text,
    createddate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now(),
    score numeric(6,3),
    createduser integer,
    modifieduser integer,
    activeflag boolean DEFAULT true,
    questarrequestid bigint,
    originalscore numeric(6,3),
    questarresponsetext text
);


ALTER TABLE public.studentsresponses OWNER TO aart;

--
-- Name: studentsresponses_aart; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentsresponses_aart (
    id bigint NOT NULL,
    studentid bigint NOT NULL,
    testid bigint NOT NULL,
    taskvariantid bigint NOT NULL,
    foilid bigint,
    response text,
    studentstestsid bigint,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL
);


ALTER TABLE public.studentsresponses_aart OWNER TO aart;

--
-- Name: studentsresponses_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentsresponses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentsresponses_id_seq OWNER TO aart;

--
-- Name: studentsresponses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studentsresponses_id_seq OWNED BY studentsresponses_aart.id;


--
-- Name: studentstests_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentstests_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentstests_id_seq OWNER TO aart;

--
-- Name: studentstests_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studentstests_id_seq OWNED BY studentstests.id;


--
-- Name: studentstestsections_aart; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentstestsections_aart (
    id bigint NOT NULL,
    studentstestid bigint,
    testsectionid bigint,
    ticketno character varying(75) DEFAULT NULL::character varying,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieduser integer NOT NULL,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    statusid bigint NOT NULL
);


ALTER TABLE public.studentstestsections_aart OWNER TO aart;

--
-- Name: studentstestsections_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentstestsections_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentstestsections_id_seq OWNER TO aart;

--
-- Name: studentstestsections_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studentstestsections_id_seq OWNED BY studentstestsections_aart.id;


--
-- Name: studentstestsections; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentstestsections (
    id bigint DEFAULT nextval('studentstestsections_id_seq'::regclass) NOT NULL,
    studentstestid bigint,
    testsectionid bigint,
    statusid bigint NOT NULL,
    lastnavqnum integer DEFAULT 0,
    createddate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now(),
    ticketno character varying(75) DEFAULT NULL::character varying,
    createduser integer,
    modifieduser integer,
    activeflag boolean DEFAULT true,
    startdatetime timestamp without time zone,
    enddatetime timestamp without time zone,
    scores text,
    testpartid bigint,
    previousstatusid bigint,
    manualupdatereason character varying(400)
);


ALTER TABLE public.studentstestsections OWNER TO aart;

--
-- Name: studentstestsectionstasks; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentstestsectionstasks (
    taskid bigint NOT NULL,
    sortorder integer NOT NULL,
    studentstestsectionsid bigint NOT NULL,
    createdate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now(),
    createusername character varying(256) DEFAULT 'TDE Student'::character varying,
    modifiedusername character varying(256) DEFAULT 'TDE Student'::character varying
);


ALTER TABLE public.studentstestsectionstasks OWNER TO aart;

--
-- Name: studentstestsectionstasksfoils; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentstestsectionstasksfoils (
    taskid bigint NOT NULL,
    foilid bigint NOT NULL,
    sortorder integer NOT NULL,
    studentstestsectionsid bigint NOT NULL,
    createdate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now(),
    createusername character varying(256) DEFAULT 'TDE Student'::character varying,
    modifiedusername character varying(256) DEFAULT 'TDE Student'::character varying
);


ALTER TABLE public.studentstestsectionstasksfoils OWNER TO aart;

--
-- Name: studentstestshighlighterindex; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentstestshighlighterindex (
    studenttestid bigint NOT NULL,
    highlighterdata text
);


ALTER TABLE public.studentstestshighlighterindex OWNER TO aart;

--
-- Name: studentstestshistory_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentstestshistory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentstestshistory_id_seq OWNER TO aart;

--
-- Name: studentstestshistory; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentstestshistory (
    id bigint DEFAULT nextval('studentstestshistory_id_seq'::regclass) NOT NULL,
    studentstestsid bigint NOT NULL,
    studentstestsstatusid bigint NOT NULL,
    action character varying(20),
    acteduser integer NOT NULL,
    acteddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL
);


ALTER TABLE public.studentstestshistory OWNER TO aart;

--
-- Name: studentsteststags; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentsteststags (
    studenttestid bigint NOT NULL,
    tagdata text
);


ALTER TABLE public.studentsteststags OWNER TO aart;

--
-- Name: studentsurveyresponse; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studentsurveyresponse (
    id bigint NOT NULL,
    surveyid bigint NOT NULL,
    surveyresponseid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    responsetext text
);


ALTER TABLE public.studentsurveyresponse OWNER TO aart;

--
-- Name: studentsurveyresponse_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studentsurveyresponse_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentsurveyresponse_id_seq OWNER TO aart;

--
-- Name: studentsurveyresponse_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studentsurveyresponse_id_seq OWNED BY studentsurveyresponse.id;


--
-- Name: studenttracker; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studenttracker (
    id bigint NOT NULL,
    studentid bigint NOT NULL,
    contentareaid bigint NOT NULL,
    status character varying(20) NOT NULL,
    activeflag boolean DEFAULT true,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser bigint,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser bigint,
    schoolyear bigint,
    courseid bigint
);


ALTER TABLE public.studenttracker OWNER TO aart;

--
-- Name: studenttracker_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studenttracker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studenttracker_id_seq OWNER TO aart;

--
-- Name: studenttracker_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studenttracker_id_seq OWNED BY studenttracker.id;


--
-- Name: studenttrackerband; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studenttrackerband (
    id bigint NOT NULL,
    studenttrackerid bigint NOT NULL,
    complexitybandid bigint NOT NULL,
    testsessionid bigint,
    source character varying(40) NOT NULL,
    activeflag boolean DEFAULT true,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser bigint,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser bigint,
    essentialelementid bigint,
    operationalwindowid bigint
);


ALTER TABLE public.studenttrackerband OWNER TO aart;

--
-- Name: studenttrackerband_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE studenttrackerband_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studenttrackerband_id_seq OWNER TO aart;

--
-- Name: studenttrackerband_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE studenttrackerband_id_seq OWNED BY studenttrackerband.id;


--
-- Name: studenttrackerblueprintstatus; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE studenttrackerblueprintstatus (
    studenttrackerid bigint NOT NULL,
    operationalwindowid bigint NOT NULL,
    statuscode character varying(30) NOT NULL,
    createddate timestamp with time zone,
    createduser bigint
);


ALTER TABLE public.studenttrackerblueprintstatus OWNER TO aart;

--
-- Name: subjectarea; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE subjectarea (
    id bigint NOT NULL,
    subjectareacode character varying(50) NOT NULL,
    subjectareaname character varying(100) NOT NULL,
    createduser integer,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduser integer,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.subjectarea OWNER TO aart;

--
-- Name: subjectarea_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE subjectarea_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.subjectarea_id_seq OWNER TO aart;

--
-- Name: subjectarea_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE subjectarea_id_seq OWNED BY subjectarea.id;


--
-- Name: subscoreframework; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE subscoreframework (
    id bigint NOT NULL,
    schoolyear bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    subjectid bigint NOT NULL,
    gradeid bigint NOT NULL,
    subscoredefinitionname character varying(50) NOT NULL,
    framework character varying(50),
    frameworklevel1 character varying(50),
    frameworklevel2 character varying(50),
    frameworklevel3 character varying(50),
    batchuploadid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.subscoreframework OWNER TO aart;

--
-- Name: subscoreframework_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE subscoreframework_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.subscoreframework_id_seq OWNER TO aart;

--
-- Name: subscoreframework_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE subscoreframework_id_seq OWNED BY subscoreframework.id;


--
-- Name: subscoresrawtoscale; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE subscoresrawtoscale (
    id bigint NOT NULL,
    schoolyear bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    subjectid bigint NOT NULL,
    gradeid bigint NOT NULL,
    testid1 bigint NOT NULL,
    testid2 bigint,
    subscoredefinitionname character varying(100) NOT NULL,
    rawscore numeric NOT NULL,
    batchuploadid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    testid3 bigint,
    testid4 bigint,
    performancetestid bigint,
    rating integer NOT NULL,
    minimumpercentresponses numeric(3,2) NOT NULL
);


ALTER TABLE public.subscoresrawtoscale OWNER TO aart;

--
-- Name: subscores_rawtoscale_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE subscores_rawtoscale_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.subscores_rawtoscale_id_seq OWNER TO aart;

--
-- Name: subscores_rawtoscale_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE subscores_rawtoscale_id_seq OWNED BY subscoresrawtoscale.id;


--
-- Name: subscoresdescription; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE subscoresdescription (
    id bigint NOT NULL,
    schoolyear bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    subjectid bigint NOT NULL,
    report character varying(200) NOT NULL,
    subscoredefinitionname character varying(50) NOT NULL,
    subscorereportdisplayname character varying(80) NOT NULL,
    subscorereportdescription character varying(200) NOT NULL,
    subscoredisplaysequence integer NOT NULL,
    batchuploadid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    sectionlinebelowflag boolean NOT NULL
);


ALTER TABLE public.subscoresdescription OWNER TO aart;

--
-- Name: subscoresdescription_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE subscoresdescription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.subscoresdescription_id_seq OWNER TO aart;

--
-- Name: subscoresdescription_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE subscoresdescription_id_seq OWNED BY subscoresdescription.id;


--
-- Name: subscoresrawtoscale_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE subscoresrawtoscale_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.subscoresrawtoscale_id_seq OWNER TO aart;

--
-- Name: suppressedlevel_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE suppressedlevel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.suppressedlevel_id_seq OWNER TO aart;

--
-- Name: suppressedlevel; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE suppressedlevel (
    id bigint DEFAULT nextval('suppressedlevel_id_seq'::regclass) NOT NULL,
    contentareaid bigint NOT NULL,
    gradecourseid bigint NOT NULL,
    activeflag boolean,
    createddate timestamp with time zone,
    createduser bigint,
    modifieddate timestamp with time zone,
    modifieduser bigint
);


ALTER TABLE public.suppressedlevel OWNER TO aart;

--
-- Name: survey; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE survey (
    id bigint NOT NULL,
    studentid bigint NOT NULL,
    surveyname character varying(100),
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    status bigint
);


ALTER TABLE public.survey OWNER TO aart;

--
-- Name: survey_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE survey_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.survey_id_seq OWNER TO aart;

--
-- Name: survey_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE survey_id_seq OWNED BY survey.id;


--
-- Name: surveylabel; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE surveylabel (
    id bigint NOT NULL,
    sectionid bigint,
    labelnumber character varying(100) NOT NULL,
    surveyorder integer NOT NULL,
    label character varying(2000),
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    optional boolean DEFAULT true NOT NULL,
    globalpagenum integer DEFAULT 0 NOT NULL,
    surveysectionid bigint
);


ALTER TABLE public.surveylabel OWNER TO aart;

--
-- Name: surveylabelprerequisite; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE surveylabelprerequisite (
    surveylabelid bigint NOT NULL,
    surveyresponseid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer,
    prerequisitecondition character varying(50) NOT NULL
);


ALTER TABLE public.surveylabelprerequisite OWNER TO aart;

--
-- Name: surveylabels_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE surveylabels_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.surveylabels_id_seq OWNER TO aart;

--
-- Name: surveylabels_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE surveylabels_id_seq OWNED BY surveylabel.id;


--
-- Name: surveypagestatus; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE surveypagestatus (
    id bigint NOT NULL,
    iscompleted boolean,
    surveyid bigint NOT NULL,
    globalpagenum integer NOT NULL,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer
);


ALTER TABLE public.surveypagestatus OWNER TO aart;

--
-- Name: surveypagestatus_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE surveypagestatus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.surveypagestatus_id_seq OWNER TO aart;

--
-- Name: surveypagestatus_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE surveypagestatus_id_seq OWNED BY surveypagestatus.id;


--
-- Name: surveyresponse; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE surveyresponse (
    id bigint NOT NULL,
    labelid bigint,
    responseorder integer NOT NULL,
    responsevalue character varying(2000),
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer NOT NULL,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer NOT NULL,
    responselabel character varying(10) NOT NULL
);


ALTER TABLE public.surveyresponse OWNER TO aart;

--
-- Name: surveyresponses_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE surveyresponses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.surveyresponses_id_seq OWNER TO aart;

--
-- Name: surveyresponses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE surveyresponses_id_seq OWNED BY surveyresponse.id;


--
-- Name: surveysection; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE surveysection (
    id bigint NOT NULL,
    surveysectionname character varying(75) NOT NULL,
    surveysectioncode character varying(75) NOT NULL,
    surveysectiondescription character varying(150),
    parentsurveysectionid bigint,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    activeflag boolean DEFAULT true,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer
);


ALTER TABLE public.surveysection OWNER TO aart;

--
-- Name: surveysection_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE surveysection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.surveysection_id_seq OWNER TO aart;

--
-- Name: surveysection_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE surveysection_id_seq OWNED BY surveysection.id;


--
-- Name: tag; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE tag (
    id bigint NOT NULL,
    tagname character varying(75),
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint
);


ALTER TABLE public.tag OWNER TO aart;

--
-- Name: tag_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tag_id_seq OWNER TO aart;

--
-- Name: tag_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE tag_id_seq OWNED BY tag.id;


--
-- Name: taskvariant; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE taskvariant (
    id bigint NOT NULL,
    externalid bigint,
    taskname character varying(100),
    variantname character varying(300),
    taskstem text,
    itemdescription character varying(75),
    tasktypeid bigint,
    tasklayoutid bigint,
    tasklayoutformatid bigint,
    contentareaid bigint,
    gradecourseid bigint,
    testingprogramid bigint,
    frameworktypeid bigint,
    taskdifficultyid bigint,
    cognitivetaxonomyid bigint,
    cognitivetaxonomydimensionid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    version integer,
    testlet boolean,
    contextstimulusid bigint,
    numberofresponses integer,
    shuffled boolean,
    innovativeitempackagepath character varying(250),
    contentframeworkdetailid bigint,
    directions text,
    cue text,
    completion text,
    cognitivetaxonomyid2 bigint,
    cognitivetaxonomydimensionid2 bigint,
    essentialelementlinkageid bigint,
    testletaccessid bigint,
    alternatepathwayid bigint,
    reporttasklayoutformatid bigint,
    minchoices integer,
    maxchoices integer,
    scoringmethod character varying(75),
    scoringdata text,
    innovativeitemdata text,
    tasksubtypeid bigint,
    expectedlines character varying(20),
    rubricneeded boolean,
    rubricviewedby character varying(20),
    rubricdirections text,
    scoringneeded boolean,
    maxscore integer,
    deliveryformattype character varying(30),
    rubrictype character varying(20),
    rubricminscore bigint,
    rubricmaxscore bigint,
    gradebandid bigint,
    previousid character varying(20),
    previoussource character varying(75)
);


ALTER TABLE public.taskvariant OWNER TO aart;

--
-- Name: task_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE task_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.task_id_seq OWNER TO aart;

--
-- Name: task_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE task_id_seq OWNED BY taskvariant.id;


--
-- Name: tasklayout; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE tasklayout (
    id bigint NOT NULL,
    externalid bigint,
    layoutname character varying(75),
    layoutaliasname character varying(75),
    layoutcode character varying(75),
    layouthtml character varying(75),
    defaultlayout boolean,
    tasktypeid bigint,
    createdate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20)
);


ALTER TABLE public.tasklayout OWNER TO aart;

--
-- Name: tasklayout_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE tasklayout_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tasklayout_id_seq OWNER TO aart;

--
-- Name: tasklayout_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE tasklayout_id_seq OWNED BY tasklayout.id;


--
-- Name: tasklayoutformat; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE tasklayoutformat (
    id bigint NOT NULL,
    externalid bigint,
    formatname character varying(75),
    formatcode character varying(75),
    formatcharacters character varying(75),
    alternatenumbering boolean,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20)
);


ALTER TABLE public.tasklayoutformat OWNER TO aart;

--
-- Name: tasklayoutformat_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE tasklayoutformat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tasklayoutformat_id_seq OWNER TO aart;

--
-- Name: tasklayoutformat_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE tasklayoutformat_id_seq OWNED BY tasklayoutformat.id;


--
-- Name: tasksubtype; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE tasksubtype (
    id bigint NOT NULL,
    tasktypeid bigint NOT NULL,
    name character varying(100) NOT NULL,
    code character varying(75),
    inuse boolean,
    createduser integer,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduser integer,
    originationcode character varying(20),
    longdescription text
);


ALTER TABLE public.tasksubtype OWNER TO aart;

--
-- Name: tasksubtypeid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE tasksubtypeid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tasksubtypeid_seq OWNER TO aart;

--
-- Name: tasktype; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE tasktype (
    id bigint NOT NULL,
    externalid bigint,
    code character varying(75),
    name character varying(75),
    standalone boolean,
    grouped boolean,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    longdescription text
);


ALTER TABLE public.tasktype OWNER TO aart;

--
-- Name: tasktype_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE tasktype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tasktype_id_seq OWNER TO aart;

--
-- Name: tasktype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE tasktype_id_seq OWNED BY tasktype.id;


--
-- Name: taskvariantcontentframeworkdetail; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE taskvariantcontentframeworkdetail (
    taskvariantid bigint NOT NULL,
    contentframeworkdetailid bigint NOT NULL,
    isprimary boolean DEFAULT false NOT NULL
);


ALTER TABLE public.taskvariantcontentframeworkdetail OWNER TO aart;

--
-- Name: taskvariantessentialelementlinkage; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE taskvariantessentialelementlinkage (
    taskvariantid bigint NOT NULL,
    essentialelementlinkageid bigint NOT NULL
);


ALTER TABLE public.taskvariantessentialelementlinkage OWNER TO aart;

--
-- Name: taskvariantitemusage; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE taskvariantitemusage (
    taskvariantid bigint NOT NULL,
    itemusageid bigint NOT NULL
);


ALTER TABLE public.taskvariantitemusage OWNER TO aart;

--
-- Name: taskvariantlearningmapnode_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE taskvariantlearningmapnode_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.taskvariantlearningmapnode_id_seq OWNER TO aart;

--
-- Name: taskvariantlearningmapnode; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE taskvariantlearningmapnode (
    id bigint DEFAULT nextval('taskvariantlearningmapnode_id_seq'::regclass) NOT NULL,
    externalid bigint NOT NULL,
    taskvariantid bigint,
    foilid bigint,
    nodecode character varying(20) NOT NULL,
    nodetypecodeid bigint,
    nodeweightid bigint,
    originationcode character varying(20) NOT NULL,
    createduserid bigint,
    createddate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduserid bigint,
    micromapid bigint,
    nodedescription text,
    nodename text,
    versionnumber character varying(10)
);


ALTER TABLE public.taskvariantlearningmapnode OWNER TO aart;

--
-- Name: taskvariantrescore; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE taskvariantrescore (
    taskvariantid bigint,
    cbtaskvariantid bigint,
    maxscore bigint,
    scoringmethod character varying(75),
    scoringdata text,
    newmaxscore bigint,
    newscoringmethod character varying(75),
    newscoringdata text,
    reason character varying(250),
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    processeddate timestamp without time zone,
    processerror text
);


ALTER TABLE public.taskvariantrescore OWNER TO aart;

--
-- Name: taskvariantsfoils; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE taskvariantsfoils (
    taskvariantid bigint NOT NULL,
    foilid bigint NOT NULL,
    externaltaskid bigint,
    externalfoilid bigint,
    originationcode character varying(20),
    responseorder integer,
    correctresponse boolean,
    responsescore integer,
    feedback character varying(500),
    responsename character varying(20),
    maxcharacters smallint,
    responsetype smallint,
    casesensitive boolean,
    maxfieldsize smallint
);


ALTER TABLE public.taskvariantsfoils OWNER TO aart;

--
-- Name: taskvariantsstimulusvariants; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE taskvariantsstimulusvariants (
    taskvariantid bigint NOT NULL,
    stimulusvariantid bigint NOT NULL
);


ALTER TABLE public.taskvariantsstimulusvariants OWNER TO aart;

--
-- Name: taskvariantstools; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE taskvariantstools (
    taskvariantid bigint NOT NULL,
    toolid bigint NOT NULL
);


ALTER TABLE public.taskvariantstools OWNER TO aart;

--
-- Name: temp_students_enrollments; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE temp_students_enrollments (
    statestudentidentifier character varying,
    aypschooldisplayidentifier character varying,
    attendanceschooldisplayidentifier character varying
);


ALTER TABLE public.temp_students_enrollments OWNER TO aart;

--
-- Name: test_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE test_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.test_id_seq OWNER TO aart;

--
-- Name: test_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE test_id_seq OWNED BY test.id;


--
-- Name: testaccessibilityflag; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testaccessibilityflag (
    testid bigint NOT NULL,
    accessibilityflagcode character varying(75) NOT NULL
);


ALTER TABLE public.testaccessibilityflag OWNER TO aart;

--
-- Name: testcollection_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testcollection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testcollection_id_seq OWNER TO aart;

--
-- Name: testcollection_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE testcollection_id_seq OWNED BY testcollection.id;


--
-- Name: testconstruct; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testconstruct (
    id bigint NOT NULL,
    testid bigint,
    constructnumber integer NOT NULL,
    thetanodevalue double precision NOT NULL,
    meanvalue numeric,
    covariancevalue numeric
);


ALTER TABLE public.testconstruct OWNER TO aart;

--
-- Name: testconstructid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testconstructid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testconstructid_seq OWNER TO aart;

--
-- Name: testcutscores; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testcutscores (
    id bigint NOT NULL,
    schoolyear bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    subjectid bigint NOT NULL,
    gradeid bigint NOT NULL,
    level bigint NOT NULL,
    batchuploadid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint,
    activeflag boolean DEFAULT true,
    levellowcutscore bigint NOT NULL,
    levelhighcutscore bigint NOT NULL,
    levelid bigint
);


ALTER TABLE public.testcutscores OWNER TO aart;

--
-- Name: testcutscores_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testcutscores_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testcutscores_id_seq OWNER TO aart;

--
-- Name: testcutscores_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE testcutscores_id_seq OWNED BY testcutscores.id;


--
-- Name: testenrollmentmethod; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testenrollmentmethod (
    id bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    methodcode character varying(50) NOT NULL,
    methodname character varying(100) NOT NULL
);


ALTER TABLE public.testenrollmentmethod OWNER TO aart;

--
-- Name: testenrollmentmethod_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testenrollmentmethod_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testenrollmentmethod_id_seq OWNER TO aart;

--
-- Name: testenrollmentmethod_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE testenrollmentmethod_id_seq OWNED BY testenrollmentmethod.id;


--
-- Name: testexternalidmap; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testexternalidmap (
    testexternalid bigint NOT NULL,
    mappedtestexternalid bigint NOT NULL
);


ALTER TABLE public.testexternalidmap OWNER TO aart;

--
-- Name: testfeedbackrules; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testfeedbackrules (
    testid bigint NOT NULL,
    displayscore boolean,
    totalscorerangeminvalue smallint,
    totalscorerangemaxvalue smallint,
    percentagerangeminvalue numeric,
    percentagerangemaxvalue numeric,
    feedbacktext text
);


ALTER TABLE public.testfeedbackrules OWNER TO aart;

--
-- Name: testformat; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testformat (
    id bigint NOT NULL,
    code character varying(30),
    name character varying(256),
    createdate timestamp with time zone,
    modifieduserid bigint,
    modifieddate timestamp with time zone
);


ALTER TABLE public.testformat OWNER TO aart;

--
-- Name: testingprogram_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testingprogram_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testingprogram_id_seq OWNER TO aart;

--
-- Name: testingprogram_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE testingprogram_id_seq OWNED BY testingprogram.id;


--
-- Name: testjson; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testjson (
    testid bigint NOT NULL,
    jsonobject text
);


ALTER TABLE public.testjson OWNER TO aart;

--
-- Name: testleitemusage; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testleitemusage (
    testletid bigint NOT NULL,
    itemusageid bigint NOT NULL
);


ALTER TABLE public.testleitemusage OWNER TO aart;

--
-- Name: testlet; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testlet (
    id bigint NOT NULL,
    testletname character varying(100) NOT NULL,
    testingprogramid bigint,
    contentareaid bigint,
    gradecourseid bigint,
    externalid bigint,
    originationcode character varying(20) NOT NULL,
    createuserid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    modifieduserid bigint,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    testletlayoutid bigint NOT NULL,
    questionviewid bigint,
    questionlocked boolean,
    displayviewid bigint,
    stimulusneeded boolean NOT NULL
);


ALTER TABLE public.testlet OWNER TO aart;

--
-- Name: testlet_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testlet_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testlet_id_seq OWNER TO aart;

--
-- Name: testletsensitivitytag; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testletsensitivitytag (
    testletid bigint NOT NULL,
    sensitivitytagid bigint NOT NULL
);


ALTER TABLE public.testletsensitivitytag OWNER TO aart;

--
-- Name: testletstimulusvariantid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testletstimulusvariantid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testletstimulusvariantid_seq OWNER TO aart;

--
-- Name: testletstimulusvariants; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testletstimulusvariants (
    testletid bigint NOT NULL,
    stimulusvariantid bigint NOT NULL,
    sortorder integer,
    groupnumber integer DEFAULT 1 NOT NULL,
    testletstimulusvariantid bigint NOT NULL
);


ALTER TABLE public.testletstimulusvariants OWNER TO aart;

--
-- Name: testpanel; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testpanel (
    id bigint NOT NULL,
    externalid bigint,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    activeflag boolean,
    panelname character varying(100),
    assessmentprogramid bigint,
    contentareaid bigint,
    gradecourseid bigint,
    gradetype boolean,
    gradebandid bigint,
    testingprogramid bigint,
    assessmentid bigint
);


ALTER TABLE public.testpanel OWNER TO aart;

--
-- Name: testpanel_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testpanel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testpanel_id_seq OWNER TO aart;

--
-- Name: testpanelscoring; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testpanelscoring (
    testpanelid bigint NOT NULL,
    externaltaskvariantid bigint NOT NULL,
    score double precision,
    scoreorder bigint NOT NULL,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    activeflag boolean
);


ALTER TABLE public.testpanelscoring OWNER TO aart;

--
-- Name: testpanelstage; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testpanelstage (
    id bigint NOT NULL,
    externalid bigint,
    testpanelid bigint NOT NULL,
    stageid bigint NOT NULL,
    activeflag boolean
);


ALTER TABLE public.testpanelstage OWNER TO aart;

--
-- Name: testpanelstage_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testpanelstage_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testpanelstage_id_seq OWNER TO aart;

--
-- Name: testpanelstagemapping; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testpanelstagemapping (
    id bigint NOT NULL,
    externalid bigint,
    testpanelstageid bigint NOT NULL,
    interimtheta1 double precision,
    interimtheta2 double precision,
    externaltestid1 bigint,
    externaltestid2 bigint,
    externaltestid3 bigint,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    activeflag boolean
);


ALTER TABLE public.testpanelstagemapping OWNER TO aart;

--
-- Name: testpanelstagemapping_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testpanelstagemapping_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testpanelstagemapping_id_seq OWNER TO aart;

--
-- Name: testpanelstagetestcollection; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testpanelstagetestcollection (
    id bigint NOT NULL,
    externalid bigint,
    testpanelstageid bigint NOT NULL,
    externaltestcollectionid bigint,
    activeflag boolean,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone
);


ALTER TABLE public.testpanelstagetestcollection OWNER TO aart;

--
-- Name: testpanelstagetestcollection_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testpanelstagetestcollection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testpanelstagetestcollection_id_seq OWNER TO aart;

--
-- Name: testpart; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testpart (
    id bigint NOT NULL,
    testid bigint,
    testsectioncontainerid bigint,
    partname character varying(25) NOT NULL,
    partnumber integer,
    selectednumberofsubsections integer,
    administratednumberofsubsections integer
);


ALTER TABLE public.testpart OWNER TO aart;

--
-- Name: testpartid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testpartid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testpartid_seq OWNER TO aart;

--
-- Name: testpriorparameter; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testpriorparameter (
    testpriorparameterid bigint NOT NULL,
    testid bigint,
    xtestconstructid bigint NOT NULL,
    ytestconstructid bigint NOT NULL,
    covariancematrixvalue numeric
);


ALTER TABLE public.testpriorparameter OWNER TO aart;

--
-- Name: testpriorparameter_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testpriorparameter_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testpriorparameter_id_seq OWNER TO aart;

--
-- Name: testsection; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testsection (
    id bigint NOT NULL,
    externalid bigint,
    testid bigint NOT NULL,
    testsectionname character varying(75),
    numberoftestitems integer,
    helpnotes text,
    toolsusageid bigint,
    taskdeliveryruleid bigint,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20),
    begininstructions text,
    endinstructions text,
    contextstimulusid bigint,
    ticketed boolean DEFAULT true,
    hardbreak boolean NOT NULL,
    sectionorder integer NOT NULL,
    testsectioncontainerid bigint,
    subsectionnumber integer
);


ALTER TABLE public.testsection OWNER TO aart;

--
-- Name: testsection_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testsection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testsection_id_seq OWNER TO aart;

--
-- Name: testsection_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE testsection_id_seq OWNED BY testsection.id;


--
-- Name: testsectioncontainer; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testsectioncontainer (
    id bigint NOT NULL,
    testid bigint,
    sectionname character varying(25) NOT NULL,
    sectionnumber integer,
    numberofsubsections integer
);


ALTER TABLE public.testsectioncontainer OWNER TO aart;

--
-- Name: testsectioncontainerconstruct; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testsectioncontainerconstruct (
    testsectioncontainerid bigint NOT NULL,
    testconstructid bigint NOT NULL,
    itemdiscriminationparametername character varying(25) NOT NULL,
    itemdiscriminationparameterindex integer,
    thetanodevalueindex integer DEFAULT 1
);


ALTER TABLE public.testsectioncontainerconstruct OWNER TO aart;

--
-- Name: testsectioncontainerid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testsectioncontainerid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testsectioncontainerid_seq OWNER TO aart;

--
-- Name: testsectioncontainerthetanode; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testsectioncontainerthetanode (
    id bigint NOT NULL,
    testsectioncontainerid bigint NOT NULL,
    index integer NOT NULL,
    value1 double precision,
    value2 double precision,
    value3 double precision,
    value4 double precision,
    value5 double precision,
    value6 double precision
);


ALTER TABLE public.testsectioncontainerthetanode OWNER TO aart;

--
-- Name: testsectioncontainerthetanodeid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testsectioncontainerthetanodeid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testsectioncontainerthetanodeid_seq OWNER TO aart;

--
-- Name: testsectionresource_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testsectionresource_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testsectionresource_id_seq OWNER TO aart;

--
-- Name: testsectionresource; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testsectionresource (
    id bigint DEFAULT nextval('testsectionresource_id_seq'::regclass) NOT NULL,
    externalid bigint,
    testsectionid bigint NOT NULL,
    stimulusvariantid bigint NOT NULL,
    sortorder bigint
);


ALTER TABLE public.testsectionresource OWNER TO aart;

--
-- Name: testsectionsrules; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testsectionsrules (
    testsectionid bigint NOT NULL,
    ruleid bigint NOT NULL,
    navigation boolean
);


ALTER TABLE public.testsectionsrules OWNER TO aart;

--
-- Name: testsectionstaskvariants_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testsectionstaskvariants_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testsectionstaskvariants_id_seq OWNER TO aart;

--
-- Name: testsectionstaskvariants; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testsectionstaskvariants (
    testsectionid bigint NOT NULL,
    taskvariantid bigint,
    externaltestsectionid bigint,
    externaltaskid bigint,
    originationcode character varying(20),
    taskvariantposition integer,
    testletid bigint,
    sortorder integer,
    groupnumber integer DEFAULT 1 NOT NULL,
    id bigint DEFAULT nextval('testsectionstaskvariants_id_seq'::regclass) NOT NULL
);


ALTER TABLE public.testsectionstaskvariants OWNER TO aart;

--
-- Name: testsectionstools; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testsectionstools (
    testsectionid bigint NOT NULL,
    toolid bigint NOT NULL
);


ALTER TABLE public.testsectionstools OWNER TO aart;

--
-- Name: testselectionstatistic; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testselectionstatistic (
    id bigint NOT NULL,
    testsectionid bigint NOT NULL,
    testsectioncontainerthetanodeid bigint NOT NULL,
    selectionstatisticvalue double precision NOT NULL
);


ALTER TABLE public.testselectionstatistic OWNER TO aart;

--
-- Name: testselectionstatisticid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testselectionstatisticid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testselectionstatisticid_seq OWNER TO aart;

--
-- Name: testsession_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testsession_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testsession_id_seq OWNER TO aart;

--
-- Name: testsession_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE testsession_id_seq OWNED BY testsession.id;


--
-- Name: testspecification; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testspecification (
    id bigint NOT NULL,
    externalid bigint,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    specificationname character varying(100),
    phase character varying(20),
    contentpool character varying(20),
    minimumnumberofees integer,
    activeflag boolean DEFAULT true NOT NULL
);


ALTER TABLE public.testspecification OWNER TO aart;

--
-- Name: testspecification_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testspecification_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testspecification_id_seq OWNER TO aart;

--
-- Name: testspecification_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE testspecification_id_seq OWNED BY testspecification.id;


--
-- Name: testtype; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testtype (
    id bigint NOT NULL,
    testtypecode character varying(50) NOT NULL,
    testtypename character varying(100) NOT NULL,
    assessmentid bigint NOT NULL,
    createduser integer,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduser integer,
    accessibilityflagcode character varying(75),
    activeflag boolean DEFAULT true
);


ALTER TABLE public.testtype OWNER TO aart;

--
-- Name: testtype_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testtype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testtype_id_seq OWNER TO aart;

--
-- Name: testtype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE testtype_id_seq OWNED BY testtype.id;


--
-- Name: testtypesubjectarea; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE testtypesubjectarea (
    id bigint NOT NULL,
    testtypeid bigint NOT NULL,
    subjectareaid bigint NOT NULL,
    createduser integer,
    createdate timestamp with time zone,
    modifieddate timestamp with time zone,
    modifieduser integer,
    activeflag boolean DEFAULT true,
    assessmentid bigint
);


ALTER TABLE public.testtypesubjectarea OWNER TO aart;

--
-- Name: testtypesubjectarea_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE testtypesubjectarea_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testtypesubjectarea_id_seq OWNER TO aart;

--
-- Name: testtypesubjectarea_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE testtypesubjectarea_id_seq OWNED BY testtypesubjectarea.id;


--
-- Name: textaccommodationid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE textaccommodationid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.textaccommodationid_seq OWNER TO aart;

--
-- Name: textaccommodation; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE textaccommodation (
    id bigint DEFAULT nextval('textaccommodationid_seq'::regclass) NOT NULL,
    externalid bigint NOT NULL,
    varianttypeid bigint,
    accommodationtext character varying(200),
    sortorder integer,
    inclusion boolean,
    contentgroupid bigint,
    accommodationtypeid bigint,
    createuserid bigint,
    createdate timestamp without time zone,
    modifieddate timestamp without time zone,
    modifieduserid bigint,
    originationcode character varying(20) NOT NULL
);


ALTER TABLE public.textaccommodation OWNER TO aart;

--
-- Name: tool; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE tool (
    id bigint NOT NULL,
    externalid bigint,
    tooltypeid bigint,
    name character varying(200),
    codename character varying(30),
    description text,
    shortdescription character varying(160),
    longdescription text,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    originationcode character varying(20)
);


ALTER TABLE public.tool OWNER TO aart;

--
-- Name: tool_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE tool_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tool_id_seq OWNER TO aart;

--
-- Name: tool_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE tool_id_seq OWNED BY tool.id;


--
-- Name: uploadfile_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE uploadfile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.uploadfile_id_seq OWNER TO aart;

--
-- Name: uploadfile; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE uploadfile (
    id bigint DEFAULT nextval('uploadfile_id_seq'::regclass) NOT NULL,
    filename text NOT NULL,
    statusid bigint NOT NULL,
    jsondata text,
    createdate timestamp with time zone DEFAULT ('now'::text)::timestamp with time zone,
    createduser bigint,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp with time zone,
    modifieduser bigint
);


ALTER TABLE public.uploadfile OWNER TO aart;

--
-- Name: userassessmentprogram; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE userassessmentprogram (
    id bigint NOT NULL,
    aartuserid bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.userassessmentprogram OWNER TO aart;

--
-- Name: userassessmentprogram_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE userassessmentprogram_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.userassessmentprogram_id_seq OWNER TO aart;

--
-- Name: userassessmentprogram_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE userassessmentprogram_id_seq OWNED BY userassessmentprogram.id;


--
-- Name: useraudit; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE useraudit (
    id bigint NOT NULL,
    userid bigint NOT NULL,
    useros character varying(256),
    logintime timestamp with time zone NOT NULL,
    logouttime timestamp with time zone
);


ALTER TABLE public.useraudit OWNER TO aart;

--
-- Name: useraudit_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE useraudit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.useraudit_id_seq OWNER TO aart;

--
-- Name: useraudit_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE useraudit_id_seq OWNED BY useraudit.id;


--
-- Name: useraudit_userid_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE useraudit_userid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.useraudit_userid_seq OWNER TO aart;

--
-- Name: useraudit_userid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE useraudit_userid_seq OWNED BY useraudit.userid;


--
-- Name: userorganizationsgroups; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE userorganizationsgroups (
    id bigint NOT NULL,
    groupid bigint NOT NULL,
    status integer,
    activationno character varying(75),
    activationnoexpirationdate timestamp without time zone,
    userorganizationid bigint,
    isdefault boolean,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.userorganizationsgroups OWNER TO aart;

--
-- Name: usergroups_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE usergroups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.usergroups_id_seq OWNER TO aart;

--
-- Name: usergroups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE usergroups_id_seq OWNED BY userorganizationsgroups.id;


--
-- Name: usermodule; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE usermodule (
    id bigint NOT NULL,
    userid bigint NOT NULL,
    moduleid bigint NOT NULL,
    enrollmentstatusid bigint NOT NULL,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint,
    modifieduser bigint,
    activeflag boolean DEFAULT true,
    stateid bigint,
    testfinalscore numeric(6,3),
    testresult boolean,
    testcompletiondate timestamp with time zone,
    earnedceu integer
);


ALTER TABLE public.usermodule OWNER TO aart;

--
-- Name: usermodule_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE usermodule_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.usermodule_id_seq OWNER TO aart;

--
-- Name: usermodule_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE usermodule_id_seq OWNED BY usermodule.id;


--
-- Name: userpasswordreset; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE userpasswordreset (
    aart_user_id bigint NOT NULL,
    password_expiration_date timestamp without time zone,
    active_flag boolean DEFAULT true,
    auth_token character varying(128),
    password character varying(128),
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    requesttype character varying(15)
);


ALTER TABLE public.userpasswordreset OWNER TO aart;

--
-- Name: userpdtrainingdetail; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE userpdtrainingdetail (
    id bigint NOT NULL,
    userid bigint NOT NULL,
    trainingcompleted boolean,
    trainingcompletiondate timestamp with time zone,
    currentschoolyear integer,
    createduser bigint,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieduser bigint,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    organizationid bigint
);


ALTER TABLE public.userpdtrainingdetail OWNER TO aart;

--
-- Name: userpdtrainingdetail_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE userpdtrainingdetail_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.userpdtrainingdetail_id_seq OWNER TO aart;

--
-- Name: userpdtrainingdetail_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE userpdtrainingdetail_id_seq OWNED BY userpdtrainingdetail.id;


--
-- Name: userreportupload; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE userreportupload (
    id bigint NOT NULL,
    aartuserid bigint NOT NULL,
    filetypeid bigint NOT NULL,
    uploadedfilename character varying(100),
    filedata text,
    createddate timestamp with time zone DEFAULT now() NOT NULL,
    modifieddate timestamp with time zone DEFAULT now() NOT NULL,
    createduser bigint,
    modifieduser bigint,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.userreportupload OWNER TO aart;

--
-- Name: userreportupload_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE userreportupload_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.userreportupload_id_seq OWNER TO aart;

--
-- Name: userreportupload_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE userreportupload_id_seq OWNED BY userreportupload.id;


--
-- Name: usersecurityagreement; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE usersecurityagreement (
    aartuserid bigint NOT NULL,
    assessmentprogramid bigint NOT NULL,
    schoolyear bigint,
    agreementelection boolean,
    agreementsigneddate timestamp without time zone,
    expiredate character varying(25),
    signername text
);


ALTER TABLE public.usersecurityagreement OWNER TO aart;

--
-- Name: usersorganizations; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE usersorganizations (
    id bigint NOT NULL,
    aartuserid bigint NOT NULL,
    organizationid bigint NOT NULL,
    isdefault boolean,
    createddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    createduser integer,
    modifieddate timestamp with time zone DEFAULT ('now'::text)::timestamp without time zone,
    modifieduser integer,
    activeflag boolean DEFAULT true
);


ALTER TABLE public.usersorganizations OWNER TO aart;

--
-- Name: usersorganizations_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE usersorganizations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.usersorganizations_id_seq OWNER TO aart;

--
-- Name: usersorganizations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE usersorganizations_id_seq OWNED BY usersorganizations.id;


--
-- Name: usertest; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE usertest (
    id bigint NOT NULL,
    usermoduleid bigint NOT NULL,
    testid bigint,
    status bigint NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    activeflag boolean DEFAULT true,
    modifieddate timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone,
    startdatetime timestamp without time zone,
    enddatetime timestamp without time zone,
    scores text
);


ALTER TABLE public.usertest OWNER TO aart;

--
-- Name: usertest_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE usertest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.usertest_id_seq OWNER TO aart;

--
-- Name: usertest_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE usertest_id_seq OWNED BY usertest.id;


--
-- Name: usertestresponse; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE usertestresponse (
    userid bigint,
    testid bigint,
    testsectionid bigint,
    usertestsectionid bigint NOT NULL,
    taskvariantid bigint NOT NULL,
    foilid bigint,
    response text,
    createddate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now(),
    score numeric(6,3),
    activeflag boolean DEFAULT true
);


ALTER TABLE public.usertestresponse OWNER TO aart;

--
-- Name: usertestsection; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE usertestsection (
    id bigint NOT NULL,
    usertestid bigint,
    testsectionid bigint,
    statusid bigint NOT NULL,
    lastnavqnum integer DEFAULT 0,
    createddate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now(),
    activeflag boolean DEFAULT true,
    startdatetime timestamp without time zone,
    enddatetime timestamp without time zone,
    scores text
);


ALTER TABLE public.usertestsection OWNER TO aart;

--
-- Name: usertestsection_id_seq; Type: SEQUENCE; Schema: public; Owner: aart
--

CREATE SEQUENCE usertestsection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.usertestsection_id_seq OWNER TO aart;

--
-- Name: usertestsection_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aart
--

ALTER SEQUENCE usertestsection_id_seq OWNED BY usertestsection.id;


--
-- Name: usertestsectiontask; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE usertestsectiontask (
    taskid bigint NOT NULL,
    sortorder integer NOT NULL,
    usertestsectionid bigint NOT NULL,
    createddate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now()
);


ALTER TABLE public.usertestsectiontask OWNER TO aart;

--
-- Name: usertestsectiontaskfoil; Type: TABLE; Schema: public; Owner: aart; Tablespace: 
--

CREATE TABLE usertestsectiontaskfoil (
    taskid bigint NOT NULL,
    foilid bigint NOT NULL,
    sortorder integer NOT NULL,
    usertestsectionid bigint NOT NULL,
    createddate timestamp without time zone DEFAULT now(),
    modifieddate timestamp without time zone DEFAULT now()
);


ALTER TABLE public.usertestsectiontaskfoil OWNER TO aart;

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY aartuser ALTER COLUMN id SET DEFAULT nextval('aartuser_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY activity ALTER COLUMN id SET DEFAULT nextval('activity_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY assessment ALTER COLUMN id SET DEFAULT nextval('assessment_id_seq1'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY assessmentprogram ALTER COLUMN id SET DEFAULT nextval('assessmentprogram_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY authorities ALTER COLUMN id SET DEFAULT nextval('authorities_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY autoregistrationcriteria ALTER COLUMN id SET DEFAULT nextval('autoregistrationcriteria_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchjobschedule ALTER COLUMN id SET DEFAULT nextval('batchjobschedule_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY category ALTER COLUMN id SET DEFAULT nextval('category_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY categorytype ALTER COLUMN id SET DEFAULT nextval('categorytype_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ccqscore ALTER COLUMN id SET DEFAULT nextval('ccqscore_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ccqscoreitem ALTER COLUMN id SET DEFAULT nextval('ccqscoreitem_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY cognitivetaxonomy ALTER COLUMN id SET DEFAULT nextval('cognitivetaxonomy_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY cognitivetaxonomydimension ALTER COLUMN id SET DEFAULT nextval('cognitivetaxonomydimension_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY combinedlevelmap ALTER COLUMN id SET DEFAULT nextval('combinedlevelmap_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY complexitybandrules ALTER COLUMN id SET DEFAULT nextval('complexitybandrules_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentarea ALTER COLUMN id SET DEFAULT nextval('contentarea_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentareatesttypesubjectarea ALTER COLUMN id SET DEFAULT nextval('contentareatesttypesubjectarea_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentframework ALTER COLUMN id SET DEFAULT nextval('contentframework_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentframeworkdetail ALTER COLUMN id SET DEFAULT nextval('contentframeworkdetail_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY dailyaccesscode ALTER COLUMN id SET DEFAULT nextval('dailyaccesscode_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY domainaudithistory ALTER COLUMN id SET DEFAULT nextval('domainaudithistory_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollment ALTER COLUMN id SET DEFAULT nextval('enrollment_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmentsrosters ALTER COLUMN id SET DEFAULT nextval('enrollmentsrosters_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmenttesttypesubjectarea ALTER COLUMN id SET DEFAULT nextval('enrollmenttesttypesubjectarea_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY essentialelementlinkagetranslationvalues ALTER COLUMN id SET DEFAULT nextval('essentialelementlinkagetranslationvalues_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY excludeditems ALTER COLUMN id SET DEFAULT nextval('excludeditems_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY externalstudentreports ALTER COLUMN id SET DEFAULT nextval('externalstudentreports_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY fieldspecification ALTER COLUMN id SET DEFAULT nextval('fieldspecification_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY foil ALTER COLUMN id SET DEFAULT nextval('foil_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY frameworklevel ALTER COLUMN id SET DEFAULT nextval('frameworklevel_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY frameworktype ALTER COLUMN id SET DEFAULT nextval('frameworktype_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY gradecourse ALTER COLUMN id SET DEFAULT nextval('gradecourse_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groupauthorities ALTER COLUMN id SET DEFAULT nextval('groupauthorities_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groupauthoritylockdownperiod ALTER COLUMN id SET DEFAULT nextval('groupauthoritylockdownperiod_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groups ALTER COLUMN id SET DEFAULT nextval('groups_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY interfacerequesthistory ALTER COLUMN id SET DEFAULT nextval('interfacerequesthistory_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY itimclog ALTER COLUMN id SET DEFAULT nextval('itimclog_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ititestsessionhistory ALTER COLUMN id SET DEFAULT nextval('ititestsessionhistory_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY leveldescription ALTER COLUMN id SET DEFAULT nextval('leveldescription_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY micromap ALTER COLUMN id SET DEFAULT nextval('micromap_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY module ALTER COLUMN id SET DEFAULT nextval('module_id_seq'::regclass);


--
-- Name: moduleid; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulegroup ALTER COLUMN moduleid SET DEFAULT nextval('modulegroup_moduleid_seq'::regclass);


--
-- Name: groupid; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulegroup ALTER COLUMN groupid SET DEFAULT nextval('modulegroup_groupid_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulereport ALTER COLUMN id SET DEFAULT nextval('modulereport_id_seq'::regclass);


--
-- Name: moduleid; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulestate ALTER COLUMN moduleid SET DEFAULT nextval('modulestate_moduleid_seq'::regclass);


--
-- Name: stateid; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulestate ALTER COLUMN stateid SET DEFAULT nextval('modulestate_stateid_seq'::regclass);


--
-- Name: moduleid; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY moduletag ALTER COLUMN moduleid SET DEFAULT nextval('moduletag_moduleid_seq'::regclass);


--
-- Name: tagid; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY moduletag ALTER COLUMN tagid SET DEFAULT nextval('moduletag_tagid_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindow ALTER COLUMN id SET DEFAULT nextval('operationaltestwindow_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowmultiassigndetail ALTER COLUMN id SET DEFAULT nextval('operationaltestwindowmultiassigndetail_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organization ALTER COLUMN id SET DEFAULT nextval('organization_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationreportdetails ALTER COLUMN id SET DEFAULT nextval('organizationreportdetails_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationtype ALTER COLUMN id SET DEFAULT nextval('organizationtype_id_seq1'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY orgassessmentprogram ALTER COLUMN id SET DEFAULT nextval('orgassessmentprogram_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY policy ALTER COLUMN id SET DEFAULT nextval('policy_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY profileitemattribute ALTER COLUMN id SET DEFAULT nextval('profileitemattribute_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY profileitemattributecontainer ALTER COLUMN id SET DEFAULT nextval('profileitemattributecontainer_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY profileitemattributenameattributecontainer ALTER COLUMN id SET DEFAULT nextval('profileitemattributenameattributecontainer_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY profileitemattrnameattrcontainerviewoptions ALTER COLUMN id SET DEFAULT nextval('profileitemattrnameattrcontainerviewoptions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY rawtoscalescores ALTER COLUMN id SET DEFAULT nextval('rawtoscalescores_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportassessmentprogram ALTER COLUMN id SET DEFAULT nextval('reportassessmentprogram_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportprocessrecordcounts ALTER COLUMN id SET DEFAULT nextval('reportprocessrecordcounts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportsmedianscore ALTER COLUMN id SET DEFAULT nextval('reportsmedianscore_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportspercentbylevel ALTER COLUMN id SET DEFAULT nextval('reportspercentbylevel_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restriction ALTER COLUMN id SET DEFAULT nextval('restriction_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restrictionsauthorities ALTER COLUMN id SET DEFAULT nextval('restrictionsauthorities_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restrictionsorganizations ALTER COLUMN id SET DEFAULT nextval('restrictionsorganizations_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY roster ALTER COLUMN id SET DEFAULT nextval('roster_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY rubricscore ALTER COLUMN id SET DEFAULT nextval('rubricscore_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY scoringassignment ALTER COLUMN id SET DEFAULT nextval('scoringassignment_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY scoringassignmentscorer ALTER COLUMN id SET DEFAULT nextval('scoringassignmentscorer_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY scoringassignmentstudent ALTER COLUMN id SET DEFAULT nextval('scoringassignmentstudent_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY sensitivitytag ALTER COLUMN id SET DEFAULT nextval('sensitivitytag_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY specialcircumstance ALTER COLUMN id SET DEFAULT nextval('specialcircumstance_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stage ALTER COLUMN id SET DEFAULT nextval('stage_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariant ALTER COLUMN id SET DEFAULT nextval('stimulusvariant_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariantattachment ALTER COLUMN id SET DEFAULT nextval('stimulusvariantattachment_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentassessmentprogram ALTER COLUMN id SET DEFAULT nextval('studentassessmentprogram_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentnodeprobability ALTER COLUMN id SET DEFAULT nextval('studentnodeprobability_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentpassword ALTER COLUMN id SET DEFAULT nextval('studentpassword_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentprofileitemattributevalue ALTER COLUMN id SET DEFAULT nextval('studentprofileitemattributevalue_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentreport ALTER COLUMN id SET DEFAULT nextval('studentreport_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsresponses_aart ALTER COLUMN id SET DEFAULT nextval('studentsresponses_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstests ALTER COLUMN id SET DEFAULT nextval('studentstests_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsections_aart ALTER COLUMN id SET DEFAULT nextval('studentstestsections_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsurveyresponse ALTER COLUMN id SET DEFAULT nextval('studentsurveyresponse_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studenttracker ALTER COLUMN id SET DEFAULT nextval('studenttracker_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studenttrackerband ALTER COLUMN id SET DEFAULT nextval('studenttrackerband_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY subjectarea ALTER COLUMN id SET DEFAULT nextval('subjectarea_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY subscoreframework ALTER COLUMN id SET DEFAULT nextval('subscoreframework_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY subscoresdescription ALTER COLUMN id SET DEFAULT nextval('subscoresdescription_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY subscoresrawtoscale ALTER COLUMN id SET DEFAULT nextval('subscores_rawtoscale_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY survey ALTER COLUMN id SET DEFAULT nextval('survey_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveylabel ALTER COLUMN id SET DEFAULT nextval('surveylabels_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveypagestatus ALTER COLUMN id SET DEFAULT nextval('surveypagestatus_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveyresponse ALTER COLUMN id SET DEFAULT nextval('surveyresponses_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveysection ALTER COLUMN id SET DEFAULT nextval('surveysection_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY tag ALTER COLUMN id SET DEFAULT nextval('tag_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY tasklayout ALTER COLUMN id SET DEFAULT nextval('tasklayout_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY tasklayoutformat ALTER COLUMN id SET DEFAULT nextval('tasklayoutformat_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY tasktype ALTER COLUMN id SET DEFAULT nextval('tasktype_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant ALTER COLUMN id SET DEFAULT nextval('task_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY test ALTER COLUMN id SET DEFAULT nextval('test_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testcollection ALTER COLUMN id SET DEFAULT nextval('testcollection_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testcutscores ALTER COLUMN id SET DEFAULT nextval('testcutscores_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testenrollmentmethod ALTER COLUMN id SET DEFAULT nextval('testenrollmentmethod_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testingprogram ALTER COLUMN id SET DEFAULT nextval('testingprogram_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsection ALTER COLUMN id SET DEFAULT nextval('testsection_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession ALTER COLUMN id SET DEFAULT nextval('testsession_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testspecification ALTER COLUMN id SET DEFAULT nextval('testspecification_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testtype ALTER COLUMN id SET DEFAULT nextval('testtype_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testtypesubjectarea ALTER COLUMN id SET DEFAULT nextval('testtypesubjectarea_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY tool ALTER COLUMN id SET DEFAULT nextval('tool_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userassessmentprogram ALTER COLUMN id SET DEFAULT nextval('userassessmentprogram_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY useraudit ALTER COLUMN id SET DEFAULT nextval('useraudit_id_seq'::regclass);


--
-- Name: userid; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY useraudit ALTER COLUMN userid SET DEFAULT nextval('useraudit_userid_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usermodule ALTER COLUMN id SET DEFAULT nextval('usermodule_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userorganizationsgroups ALTER COLUMN id SET DEFAULT nextval('usergroups_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userpdtrainingdetail ALTER COLUMN id SET DEFAULT nextval('userpdtrainingdetail_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userreportupload ALTER COLUMN id SET DEFAULT nextval('userreportupload_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usersorganizations ALTER COLUMN id SET DEFAULT nextval('usersorganizations_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertest ALTER COLUMN id SET DEFAULT nextval('usertest_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestsection ALTER COLUMN id SET DEFAULT nextval('usertestsection_id_seq'::regclass);


--
-- Name: aartuser_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY aartuser
    ADD CONSTRAINT aartuser_pkey PRIMARY KEY (id);


--
-- Name: aartuserid_organizationid; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY usersorganizations
    ADD CONSTRAINT aartuserid_organizationid UNIQUE (aartuserid, organizationid);


--
-- Name: abbreviatedname_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY contentarea
    ADD CONSTRAINT abbreviatedname_uk UNIQUE (abbreviatedname, activeflag);


--
-- Name: accessibilityfile_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY accessibilityfile
    ADD CONSTRAINT accessibilityfile_pkey PRIMARY KEY (id);


--
-- Name: ampexcludeditems_id_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY ampexcludeditems
    ADD CONSTRAINT ampexcludeditems_id_pk PRIMARY KEY (taskvariantid, gradeabbr, subjectabbr);


--
-- Name: assessment_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY assessment
    ADD CONSTRAINT assessment_pkey PRIMARY KEY (id);


--
-- Name: assessmentprogram_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY assessmentprogram
    ADD CONSTRAINT assessmentprogram_pkey PRIMARY KEY (id);


--
-- Name: assessmentprogram_programname_key; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY assessmentprogram
    ADD CONSTRAINT assessmentprogram_programname_key UNIQUE (programname);


--
-- Name: assessmentprogramgrades_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY assessmentprogramgrades
    ADD CONSTRAINT assessmentprogramgrades_pkey PRIMARY KEY (id);


--
-- Name: assessmentprogramid_reporttypeid_stateid_subjectid; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY reportassessmentprogram
    ADD CONSTRAINT assessmentprogramid_reporttypeid_stateid_subjectid UNIQUE (assessmentprogramid, reporttypeid, subjectid, stateid);


--
-- Name: assessmentstests_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY assessmentstestcollections
    ADD CONSTRAINT assessmentstests_pk PRIMARY KEY (assessmentid, testcollectionid);


--
-- Name: authorities_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY authorities
    ADD CONSTRAINT authorities_pkey PRIMARY KEY (id);


--
-- Name: batchjobschedule_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY batchjobschedule
    ADD CONSTRAINT batchjobschedule_pkey PRIMARY KEY (id);


--
-- Name: batchstudenttracker_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY batchstudenttracker
    ADD CONSTRAINT batchstudenttracker_pk PRIMARY KEY (id);


--
-- Name: batchupload_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY batchupload
    ADD CONSTRAINT batchupload_pk PRIMARY KEY (id);


--
-- Name: blueprint_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY blueprint
    ADD CONSTRAINT blueprint_pkey PRIMARY KEY (id);


--
-- Name: blueprintessentialelements_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY blueprintessentialelements
    ADD CONSTRAINT blueprintessentialelements_pkey PRIMARY KEY (blueprintid, essentialelementid);


--
-- Name: brailleacc_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY brailleaccommodation
    ADD CONSTRAINT brailleacc_pkey PRIMARY KEY (id);


--
-- Name: category_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY category
    ADD CONSTRAINT category_pk PRIMARY KEY (id);


--
-- Name: category_translationvalue_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY essentialelementlinkagetranslationvalues
    ADD CONSTRAINT category_translationvalue_uk UNIQUE (categoryid, translationvalue);


--
-- Name: category_type_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY categorytype
    ADD CONSTRAINT category_type_pk PRIMARY KEY (id);


--
-- Name: categorycode_categorytype_originationcode_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY category
    ADD CONSTRAINT categorycode_categorytype_originationcode_uk UNIQUE (categorycode, originationcode, categorytypeid);


--
-- Name: categorytype_typecode_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY categorytype
    ADD CONSTRAINT categorytype_typecode_uk UNIQUE (typecode, originationcode);


--
-- Name: cognitivetaxonomy_code; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY cognitivetaxonomy
    ADD CONSTRAINT cognitivetaxonomy_code UNIQUE (abbreviatedname, activeflag);


--
-- Name: cognitivetaxonomy_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY cognitivetaxonomy
    ADD CONSTRAINT cognitivetaxonomy_pkey PRIMARY KEY (id);


--
-- Name: cognitivetaxonomydimension_code; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY cognitivetaxonomydimension
    ADD CONSTRAINT cognitivetaxonomydimension_code UNIQUE (abbreviatedname, activeflag);


--
-- Name: cognitivetaxonomydimension_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY cognitivetaxonomydimension
    ADD CONSTRAINT cognitivetaxonomydimension_pkey PRIMARY KEY (id);


--
-- Name: combinedlevelmap_id_fk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY combinedlevelmap
    ADD CONSTRAINT combinedlevelmap_id_fk PRIMARY KEY (id);


--
-- Name: complexityband_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY complexityband
    ADD CONSTRAINT complexityband_pkey PRIMARY KEY (id);


--
-- Name: contentarea_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY contentarea
    ADD CONSTRAINT contentarea_pkey PRIMARY KEY (id);


--
-- Name: contentframework_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY contentframework
    ADD CONSTRAINT contentframework_pkey PRIMARY KEY (id);


--
-- Name: contentframeworkdetail_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY contentframeworkdetail
    ADD CONSTRAINT contentframeworkdetail_pkey PRIMARY KEY (id);


--
-- Name: contentgroup_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY contentgroup
    ADD CONSTRAINT contentgroup_pkey PRIMARY KEY (id);


--
-- Name: dailyaccesscode_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY dailyaccesscode
    ADD CONSTRAINT dailyaccesscode_pkey PRIMARY KEY (id);


--
-- Name: eeltv_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY essentialelementlinkagetranslationvalues
    ADD CONSTRAINT eeltv_pk PRIMARY KEY (id);


--
-- Name: enrollment_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY enrollment
    ADD CONSTRAINT enrollment_pkey PRIMARY KEY (id);


--
-- Name: enrollment_roster_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY enrollmentsrosters
    ADD CONSTRAINT enrollment_roster_pk PRIMARY KEY (id);


--
-- Name: enrollment_roster_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY enrollmentsrosters
    ADD CONSTRAINT enrollment_roster_uk UNIQUE (enrollmentid, rosterid);


--
-- Name: enrollment_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY enrollment
    ADD CONSTRAINT enrollment_uk UNIQUE (studentid, attendanceschoolid, currentschoolyear, aypschoolid);


--
-- Name: excludeditems_id_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY excludeditems
    ADD CONSTRAINT excludeditems_id_pk PRIMARY KEY (id);


--
-- Name: field_specification_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY fieldspecification
    ADD CONSTRAINT field_specification_pk PRIMARY KEY (id);


--
-- Name: field_specifications_record_types_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY fieldspecificationsrecordtypes
    ADD CONSTRAINT field_specifications_record_types_pkey PRIMARY KEY (fieldspecificationid, recordtypeid);


--
-- Name: foil_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY foil
    ADD CONSTRAINT foil_pkey PRIMARY KEY (id);


--
-- Name: foilsstimulusvariants_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY foilsstimulusvariants
    ADD CONSTRAINT foilsstimulusvariants_pkey PRIMARY KEY (foilid, stimulusvariantid);


--
-- Name: frameworklevel_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY frameworklevel
    ADD CONSTRAINT frameworklevel_pkey PRIMARY KEY (id);


--
-- Name: frameworktype_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY frameworktype
    ADD CONSTRAINT frameworktype_pkey PRIMARY KEY (id);


--
-- Name: gradeband_code_contentarea_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY gradeband
    ADD CONSTRAINT gradeband_code_contentarea_uk UNIQUE (abbreviatedname, activeflag, contentareaid);


--
-- Name: gradeband_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY gradeband
    ADD CONSTRAINT gradeband_pkey PRIMARY KEY (id);


--
-- Name: gradebandgradecourse_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY gradebandgradecourse
    ADD CONSTRAINT gradebandgradecourse_uk UNIQUE (gradebandid, gradecourseid);


--
-- Name: gradecourse_code_contentarea; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY gradecourse
    ADD CONSTRAINT gradecourse_code_contentarea UNIQUE (abbreviatedname, contentareaid, activeflag);


--
-- Name: gradecourse_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY gradecourse
    ADD CONSTRAINT gradecourse_pkey PRIMARY KEY (id);


--
-- Name: groupauthorities_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY groupauthorities
    ADD CONSTRAINT groupauthorities_pkey PRIMARY KEY (id);


--
-- Name: groupauthoritylockdownperiod_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY groupauthoritylockdownperiod
    ADD CONSTRAINT groupauthoritylockdownperiod_pkey PRIMARY KEY (id);


--
-- Name: groups_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (id);


--
-- Name: interfacerequesthistory_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY interfacerequesthistory
    ADD CONSTRAINT interfacerequesthistory_pkey PRIMARY KEY (id);


--
-- Name: itimclog_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY itimclog
    ADD CONSTRAINT itimclog_pkey PRIMARY KEY (id);


--
-- Name: ititsh_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY ititestsessionhistory
    ADD CONSTRAINT ititsh_pkey PRIMARY KEY (id);


--
-- Name: ksdexmlaudit_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY ksdexmlaudit
    ADD CONSTRAINT ksdexmlaudit_pkey PRIMARY KEY (id);


--
-- Name: leveldescription_id_fk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY leveldescription
    ADD CONSTRAINT leveldescription_id_fk PRIMARY KEY (id);


--
-- Name: lmassessmentmodelrule_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY lmassessmentmodelrule
    ADD CONSTRAINT lmassessmentmodelrule_pkey PRIMARY KEY (testspecificationid, ranking, contentframeworkdetailid);


--
-- Name: login; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY aartuser
    ADD CONSTRAINT login UNIQUE (firstname, surname, username, password);


--
-- Name: messagepk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY communicationmessage
    ADD CONSTRAINT messagepk PRIMARY KEY (id);


--
-- Name: micromap_id_fk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY micromap
    ADD CONSTRAINT micromap_id_fk PRIMARY KEY (id);


--
-- Name: modulegroup_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY modulegroup
    ADD CONSTRAINT modulegroup_pkey PRIMARY KEY (moduleid, groupid);


--
-- Name: modulestate_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY modulestate
    ADD CONSTRAINT modulestate_pkey PRIMARY KEY (moduleid, stateid);


--
-- Name: moduletag_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY moduletag
    ADD CONSTRAINT moduletag_pkey PRIMARY KEY (moduleid, tagid);


--
-- Name: ooperationaltestwindowstestcollections_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY operationaltestwindowstestcollections
    ADD CONSTRAINT ooperationaltestwindowstestcollections_pkey PRIMARY KEY (operationaltestwindowid, testcollectionid);


--
-- Name: operationaltestwindow_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY operationaltestwindow
    ADD CONSTRAINT operationaltestwindow_pkey PRIMARY KEY (id);


--
-- Name: operationaltestwindowstate_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY operationaltestwindowstate
    ADD CONSTRAINT operationaltestwindowstate_pkey PRIMARY KEY (operationaltestwindowid, stateid);


--
-- Name: organization_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY organization
    ADD CONSTRAINT organization_pkey PRIMARY KEY (id);


--
-- Name: organizationcontentarea_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY organizationcontentarea
    ADD CONSTRAINT organizationcontentarea_pkey PRIMARY KEY (organizationid, contentareaid, organizationcontentareacode);


--
-- Name: organizationrelation_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY organizationrelation
    ADD CONSTRAINT organizationrelation_pk PRIMARY KEY (organizationid, parentorganizationid);


--
-- Name: organizationtreedetail_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY organizationtreedetail
    ADD CONSTRAINT organizationtreedetail_pkey PRIMARY KEY (schoolid);


--
-- Name: orgassessmentprogram_org_ap_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY orgassessmentprogram
    ADD CONSTRAINT orgassessmentprogram_org_ap_uk UNIQUE (organizationid, assessmentprogramid);


--
-- Name: orgassessmentprogram_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY orgassessmentprogram
    ADD CONSTRAINT orgassessmentprogram_pkey PRIMARY KEY (id);


--
-- Name: otwmultiassigndetail_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY operationaltestwindowmultiassigndetail
    ADD CONSTRAINT otwmultiassigndetail_pkey PRIMARY KEY (id);


--
-- Name: pk_activity; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY activity
    ADD CONSTRAINT pk_activity PRIMARY KEY (id);


--
-- Name: pk_autoregistrationcriteria_id; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY autoregistrationcriteria
    ADD CONSTRAINT pk_autoregistrationcriteria_id PRIMARY KEY (id);


--
-- Name: pk_ccqscoreteststudent; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY ccqscore
    ADD CONSTRAINT pk_ccqscoreteststudent PRIMARY KEY (id);


--
-- Name: pk_ccqscoreteststudentrubricscore; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY ccqscoreitem
    ADD CONSTRAINT pk_ccqscoreteststudentrubricscore PRIMARY KEY (id);


--
-- Name: pk_contentareatesttypesubjectarea_id; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY contentareatesttypesubjectarea
    ADD CONSTRAINT pk_contentareatesttypesubjectarea_id PRIMARY KEY (id);


--
-- Name: pk_ddl_version; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY ddl_version
    ADD CONSTRAINT pk_ddl_version PRIMARY KEY (version);


--
-- Name: pk_enrollmenttesttypesubjectarea_id; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY enrollmenttesttypesubjectarea
    ADD CONSTRAINT pk_enrollmenttesttypesubjectarea_id PRIMARY KEY (id);


--
-- Name: pk_gradecontentareatesttypesubjectarea_id; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY gradecontentareatesttypesubjectarea
    ADD CONSTRAINT pk_gradecontentareatesttypesubjectarea_id PRIMARY KEY (contentareatesttypesubjectareaid, gradecourseid);


--
-- Name: pk_module; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY module
    ADD CONSTRAINT pk_module PRIMARY KEY (id);


--
-- Name: pk_modulereport; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY modulereport
    ADD CONSTRAINT pk_modulereport PRIMARY KEY (id);


--
-- Name: pk_organization_type; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY organizationtype
    ADD CONSTRAINT pk_organization_type PRIMARY KEY (id);


--
-- Name: pk_otw_session_rule; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY operationaltestwindowsessionrule
    ADD CONSTRAINT pk_otw_session_rule PRIMARY KEY (operationaltestwindowid, sessionruleid);


--
-- Name: pk_profile_item_attr_name_attr_container_view_options; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY profileitemattrnameattrcontainerviewoptions
    ADD CONSTRAINT pk_profile_item_attr_name_attr_container_view_options PRIMARY KEY (id);


--
-- Name: pk_profile_item_attribute; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY profileitemattribute
    ADD CONSTRAINT pk_profile_item_attribute PRIMARY KEY (id);


--
-- Name: pk_profile_item_attribute_container; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY profileitemattributecontainer
    ADD CONSTRAINT pk_profile_item_attribute_container PRIMARY KEY (id);


--
-- Name: pk_profile_item_attribute_name_attribute_container; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY profileitemattributenameattributecontainer
    ADD CONSTRAINT pk_profile_item_attribute_name_attribute_container PRIMARY KEY (id);


--
-- Name: pk_reportassessmentprogram; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY reportassessmentprogram
    ADD CONSTRAINT pk_reportassessmentprogram PRIMARY KEY (id);


--
-- Name: pk_reportassessmentprogramgroup; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY reportassessmentprogramgroup
    ADD CONSTRAINT pk_reportassessmentprogramgroup PRIMARY KEY (id);


--
-- Name: pk_restriction; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY restriction
    ADD CONSTRAINT pk_restriction PRIMARY KEY (id);


--
-- Name: pk_restrictions_organizations; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY restrictionsorganizations
    ADD CONSTRAINT pk_restrictions_organizations PRIMARY KEY (id);


--
-- Name: pk_scoringassignment; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY scoringassignment
    ADD CONSTRAINT pk_scoringassignment PRIMARY KEY (id);


--
-- Name: pk_scoringassignmentscorer; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY scoringassignmentscorer
    ADD CONSTRAINT pk_scoringassignmentscorer PRIMARY KEY (id);


--
-- Name: pk_scoringassignmentstudent; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY scoringassignmentstudent
    ADD CONSTRAINT pk_scoringassignmentstudent PRIMARY KEY (id);


--
-- Name: pk_student; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY student
    ADD CONSTRAINT pk_student PRIMARY KEY (id);


--
-- Name: pk_student_profile_item_attribute_value; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentprofileitemattributevalue
    ADD CONSTRAINT pk_student_profile_item_attribute_value PRIMARY KEY (id);


--
-- Name: pk_student_survey_response; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentsurveyresponse
    ADD CONSTRAINT pk_student_survey_response PRIMARY KEY (id);


--
-- Name: pk_studentassessmentprogram; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentassessmentprogram
    ADD CONSTRAINT pk_studentassessmentprogram PRIMARY KEY (id);


--
-- Name: pk_studentresponseaudit_id; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentresponseaudit
    ADD CONSTRAINT pk_studentresponseaudit_id PRIMARY KEY (id);


--
-- Name: pk_students_assessments; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentsassessments
    ADD CONSTRAINT pk_students_assessments PRIMARY KEY (studentid, assessmentid, contentareaid);


--
-- Name: pk_studentstestsections; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentstestsections_aart
    ADD CONSTRAINT pk_studentstestsections PRIMARY KEY (id);


--
-- Name: pk_studenttracker; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studenttracker
    ADD CONSTRAINT pk_studenttracker PRIMARY KEY (id);


--
-- Name: pk_studenttrackerband; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studenttrackerband
    ADD CONSTRAINT pk_studenttrackerband PRIMARY KEY (id);


--
-- Name: pk_subjectarea_id; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY subjectarea
    ADD CONSTRAINT pk_subjectarea_id PRIMARY KEY (id);


--
-- Name: pk_suppressedlevel; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY suppressedlevel
    ADD CONSTRAINT pk_suppressedlevel PRIMARY KEY (id);


--
-- Name: pk_survey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY survey
    ADD CONSTRAINT pk_survey PRIMARY KEY (id);


--
-- Name: pk_survey_labels; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY surveylabel
    ADD CONSTRAINT pk_survey_labels PRIMARY KEY (id);


--
-- Name: pk_survey_responses; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY surveyresponse
    ADD CONSTRAINT pk_survey_responses PRIMARY KEY (id);


--
-- Name: pk_surveyresponsescomplexitybands; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY complexitybandrules
    ADD CONSTRAINT pk_surveyresponsescomplexitybands PRIMARY KEY (id);


--
-- Name: pk_testtype_id; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testtype
    ADD CONSTRAINT pk_testtype_id PRIMARY KEY (id);


--
-- Name: pk_testtypesubjectarea_id; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testtypesubjectarea
    ADD CONSTRAINT pk_testtypesubjectarea_id PRIMARY KEY (id);


--
-- Name: pk_userassessmentprograms; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY userassessmentprogram
    ADD CONSTRAINT pk_userassessmentprograms PRIMARY KEY (id);


--
-- Name: pk_usermodule; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY usermodule
    ADD CONSTRAINT pk_usermodule PRIMARY KEY (id);


--
-- Name: pk_userpdtrainingdetails; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY userpdtrainingdetail
    ADD CONSTRAINT pk_userpdtrainingdetails PRIMARY KEY (id);


--
-- Name: pk_usersorganizations; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY usersorganizations
    ADD CONSTRAINT pk_usersorganizations PRIMARY KEY (id);


--
-- Name: policy_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY policy
    ADD CONSTRAINT policy_pkey PRIMARY KEY (id);


--
-- Name: proportionmetrics_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY proportionmetrics
    ADD CONSTRAINT proportionmetrics_pkey PRIMARY KEY (id);


--
-- Name: rawtoscalescores_id_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY rawtoscalescores
    ADD CONSTRAINT rawtoscalescores_id_pk PRIMARY KEY (id);


--
-- Name: readaloudacc_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY readaloudaccommodation
    ADD CONSTRAINT readaloudacc_pkey PRIMARY KEY (id);


--
-- Name: reportprocess_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY reportprocess
    ADD CONSTRAINT reportprocess_pk PRIMARY KEY (id);


--
-- Name: reportsmedianscore_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY reportsmedianscore
    ADD CONSTRAINT reportsmedianscore_pk PRIMARY KEY (id);


--
-- Name: reportspercentbylevel_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY reportspercentbylevel
    ADD CONSTRAINT reportspercentbylevel_pkey PRIMARY KEY (id);


--
-- Name: reportsubscores_id_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY reportsubscores
    ADD CONSTRAINT reportsubscores_id_pk PRIMARY KEY (id);


--
-- Name: reporttestlevelsubscores_id_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY reporttestlevelsubscores
    ADD CONSTRAINT reporttestlevelsubscores_id_pk PRIMARY KEY (id);


--
-- Name: restrictions_authorities_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY restrictionsauthorities
    ADD CONSTRAINT restrictions_authorities_pk PRIMARY KEY (id);


--
-- Name: restrictions_authorities_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY restrictionsauthorities
    ADD CONSTRAINT restrictions_authorities_uk UNIQUE (restrictionid, authorityid, isparent, ischild, isdifferential);


--
-- Name: roster_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY roster
    ADD CONSTRAINT roster_pk PRIMARY KEY (id);


--
-- Name: rubriccategory_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY rubriccategory
    ADD CONSTRAINT rubriccategory_pkey PRIMARY KEY (id);


--
-- Name: rubricinfo_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY rubricinfo
    ADD CONSTRAINT rubricinfo_pkey PRIMARY KEY (id);


--
-- Name: rubricscore_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY rubricscore
    ADD CONSTRAINT rubricscore_pkey PRIMARY KEY (id);


--
-- Name: sensitivitytag_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY sensitivitytag
    ADD CONSTRAINT sensitivitytag_pkey PRIMARY KEY (id);


--
-- Name: signedacc_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY signedaccommodation
    ADD CONSTRAINT signedacc_pkey PRIMARY KEY (id);


--
-- Name: specialcircumstance_id_fk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY specialcircumstance
    ADD CONSTRAINT specialcircumstance_id_fk PRIMARY KEY (id);


--
-- Name: stage_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY stage
    ADD CONSTRAINT stage_pkey PRIMARY KEY (id);


--
-- Name: statespecialcircumstance_unique_key; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY statespecialcircumstance
    ADD CONSTRAINT statespecialcircumstance_unique_key UNIQUE (stateid, specialcircumstanceid, activeflag);


--
-- Name: stimulusvariant_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY stimulusvariant
    ADD CONSTRAINT stimulusvariant_pkey PRIMARY KEY (id);


--
-- Name: stimulusvariantattachment_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY stimulusvariantattachment
    ADD CONSTRAINT stimulusvariantattachment_pkey PRIMARY KEY (id);


--
-- Name: stimulusvariantattachmentmetadata_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY stimulusvariantattachmentmetadata
    ADD CONSTRAINT stimulusvariantattachmentmetadata_pkey PRIMARY KEY (attachmentid, propertycode);


--
-- Name: stimulusvariantcontentarea_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY stimulusvariantcontentarea
    ADD CONSTRAINT stimulusvariantcontentarea_pkey PRIMARY KEY (stimulusvariantid, contentareaid);


--
-- Name: stimulusvariantgradecourse_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY stimulusvariantgradecourse
    ADD CONSTRAINT stimulusvariantgradecourse_pkey PRIMARY KEY (stimulusvariantid, gradecourseid);


--
-- Name: stimulusvarianttestingprogram_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY stimulusvarianttestingprogram
    ADD CONSTRAINT stimulusvarianttestingprogram_pkey PRIMARY KEY (stimulusvariantid, testingprogramid);


--
-- Name: studentadaptivetest_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentadaptivetest
    ADD CONSTRAINT studentadaptivetest_pkey PRIMARY KEY (id);


--
-- Name: studentadaptivetest_ukey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentadaptivetest
    ADD CONSTRAINT studentadaptivetest_ukey UNIQUE (studentstestsid);


--
-- Name: studentbandrecommendation_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentbandrecommendation
    ADD CONSTRAINT studentbandrecommendation_pkey PRIMARY KEY (id);


--
-- Name: studentnodeprobability_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentnodeprobability
    ADD CONSTRAINT studentnodeprobability_pkey PRIMARY KEY (id);


--
-- Name: studentpassword_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentpassword
    ADD CONSTRAINT studentpassword_pkey PRIMARY KEY (id);


--
-- Name: studentpnpjson_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentpnpjson
    ADD CONSTRAINT studentpnpjson_pkey PRIMARY KEY (studentid);


--
-- Name: studentreport_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentreport
    ADD CONSTRAINT studentreport_pkey PRIMARY KEY (id);


--
-- Name: studentreporttestscores_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentreporttestscores
    ADD CONSTRAINT studentreporttestscores_pkey PRIMARY KEY (id);


--
-- Name: studentresponsescore_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentresponsescore
    ADD CONSTRAINT studentresponsescore_pkey PRIMARY KEY (studentstestsectionsid, taskvariantexternalid, raterid, dimension);


--
-- Name: studentsresponseparameters_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentsresponseparameters
    ADD CONSTRAINT studentsresponseparameters_pkey PRIMARY KEY (id);


--
-- Name: studentsresponses_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentsresponses
    ADD CONSTRAINT studentsresponses_pkey PRIMARY KEY (studentstestsectionsid, taskvariantid);


--
-- Name: studentsresponses_ukey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentsresponseparameters
    ADD CONSTRAINT studentsresponses_ukey UNIQUE (studentstestsectionsid, taskvariantid);


--
-- Name: studentstests_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentstests
    ADD CONSTRAINT studentstests_pkey PRIMARY KEY (id);


--
-- Name: studentstestsections_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentstestsections
    ADD CONSTRAINT studentstestsections_pkey PRIMARY KEY (id);


--
-- Name: studentstestsectionstasks_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentstestsectionstasks
    ADD CONSTRAINT studentstestsectionstasks_pkey PRIMARY KEY (studentstestsectionsid, taskid);


--
-- Name: studentstestsectionstasksfoils_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentstestsectionstasksfoils
    ADD CONSTRAINT studentstestsectionstasksfoils_pkey PRIMARY KEY (studentstestsectionsid, taskid, foilid);


--
-- Name: studentstestshighlighter_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentstestshighlighterindex
    ADD CONSTRAINT studentstestshighlighter_pkey PRIMARY KEY (studenttestid);


--
-- Name: studentstestshistory_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentstestshistory
    ADD CONSTRAINT studentstestshistory_pkey PRIMARY KEY (id);


--
-- Name: studentsteststags_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentsteststags
    ADD CONSTRAINT studentsteststags_pkey PRIMARY KEY (studenttestid);


--
-- Name: studenttrackeroperationalteststatus_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studenttrackerblueprintstatus
    ADD CONSTRAINT studenttrackeroperationalteststatus_pkey PRIMARY KEY (studenttrackerid, operationalwindowid);


--
-- Name: subscoreframework_id_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY subscoreframework
    ADD CONSTRAINT subscoreframework_id_pk PRIMARY KEY (id);


--
-- Name: subscores_rawtoscale_id_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY subscoresrawtoscale
    ADD CONSTRAINT subscores_rawtoscale_id_pk PRIMARY KEY (id);


--
-- Name: subscoresdescription_id_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY subscoresdescription
    ADD CONSTRAINT subscoresdescription_id_pk PRIMARY KEY (id);


--
-- Name: survey_label_pre_requisite_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY surveylabelprerequisite
    ADD CONSTRAINT survey_label_pre_requisite_pk PRIMARY KEY (surveylabelid, surveyresponseid);


--
-- Name: survey_page_status_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY surveypagestatus
    ADD CONSTRAINT survey_page_status_pk PRIMARY KEY (id);


--
-- Name: survey_section_code_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY surveysection
    ADD CONSTRAINT survey_section_code_uk UNIQUE (surveysectioncode);


--
-- Name: survey_section_name_uk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY surveysection
    ADD CONSTRAINT survey_section_name_uk UNIQUE (surveysectionname);


--
-- Name: surveysection_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY surveysection
    ADD CONSTRAINT surveysection_pk PRIMARY KEY (id);


--
-- Name: tag_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY tag
    ADD CONSTRAINT tag_pkey PRIMARY KEY (id);


--
-- Name: task_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_pkey PRIMARY KEY (id);


--
-- Name: tasklayout_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY tasklayout
    ADD CONSTRAINT tasklayout_pkey PRIMARY KEY (id);


--
-- Name: tasklayoutformat_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY tasklayoutformat
    ADD CONSTRAINT tasklayoutformat_pkey PRIMARY KEY (id);


--
-- Name: tasksfoils_pk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY taskvariantsfoils
    ADD CONSTRAINT tasksfoils_pk PRIMARY KEY (taskvariantid, foilid);


--
-- Name: tasksubtype_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY tasksubtype
    ADD CONSTRAINT tasksubtype_pkey PRIMARY KEY (id);


--
-- Name: tasktype_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY tasktype
    ADD CONSTRAINT tasktype_pkey PRIMARY KEY (id);


--
-- Name: taskvariantcontentframeworkdetail_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY taskvariantcontentframeworkdetail
    ADD CONSTRAINT taskvariantcontentframeworkdetail_pkey PRIMARY KEY (taskvariantid, contentframeworkdetailid);


--
-- Name: taskvariantessentialelementlinkage_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY taskvariantessentialelementlinkage
    ADD CONSTRAINT taskvariantessentialelementlinkage_pkey PRIMARY KEY (taskvariantid, essentialelementlinkageid);


--
-- Name: taskvariantitemusage_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY taskvariantitemusage
    ADD CONSTRAINT taskvariantitemusage_pkey PRIMARY KEY (taskvariantid, itemusageid);


--
-- Name: taskvariantlearningmapnode_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY taskvariantlearningmapnode
    ADD CONSTRAINT taskvariantlearningmapnode_pkey PRIMARY KEY (id);


--
-- Name: taskvariantsstimulusvariants_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY taskvariantsstimulusvariants
    ADD CONSTRAINT taskvariantsstimulusvariants_pkey PRIMARY KEY (taskvariantid, stimulusvariantid);


--
-- Name: taskvariantstools_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY taskvariantstools
    ADD CONSTRAINT taskvariantstools_pkey PRIMARY KEY (taskvariantid, toolid);


--
-- Name: test_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY test
    ADD CONSTRAINT test_pkey PRIMARY KEY (id);


--
-- Name: testaccessibilityflag_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testaccessibilityflag
    ADD CONSTRAINT testaccessibilityflag_pkey PRIMARY KEY (testid, accessibilityflagcode);


--
-- Name: testcollection_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testcollection
    ADD CONSTRAINT testcollection_pkey PRIMARY KEY (id);


--
-- Name: testcollectiontests_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testcollectionstests
    ADD CONSTRAINT testcollectiontests_pkey PRIMARY KEY (testcollectionid, testid);


--
-- Name: testconstruct_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testconstruct
    ADD CONSTRAINT testconstruct_pkey PRIMARY KEY (id);


--
-- Name: testcutscores_id_fk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testcutscores
    ADD CONSTRAINT testcutscores_id_fk PRIMARY KEY (id);


--
-- Name: testenrollmentmethod_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testenrollmentmethod
    ADD CONSTRAINT testenrollmentmethod_pkey PRIMARY KEY (id);


--
-- Name: testformat_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testformat
    ADD CONSTRAINT testformat_pkey PRIMARY KEY (id);


--
-- Name: testingprogram_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testingprogram
    ADD CONSTRAINT testingprogram_pkey PRIMARY KEY (id);


--
-- Name: testjson_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testjson
    ADD CONSTRAINT testjson_pkey PRIMARY KEY (testid);


--
-- Name: testleitemusage_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testleitemusage
    ADD CONSTRAINT testleitemusage_pkey PRIMARY KEY (testletid, itemusageid);


--
-- Name: testlet_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testlet
    ADD CONSTRAINT testlet_pkey PRIMARY KEY (id);


--
-- Name: testletsensitivitytag_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testletsensitivitytag
    ADD CONSTRAINT testletsensitivitytag_pkey PRIMARY KEY (testletid, sensitivitytagid);


--
-- Name: testletstimulusvariant_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testletstimulusvariants
    ADD CONSTRAINT testletstimulusvariant_pkey PRIMARY KEY (testletstimulusvariantid);


--
-- Name: testpanel_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testpanel
    ADD CONSTRAINT testpanel_pkey PRIMARY KEY (id);


--
-- Name: testpanelscoring_pk1; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testpanelscoring
    ADD CONSTRAINT testpanelscoring_pk1 PRIMARY KEY (testpanelid, externaltaskvariantid, scoreorder);


--
-- Name: testpanelstage_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testpanelstage
    ADD CONSTRAINT testpanelstage_pkey PRIMARY KEY (id);


--
-- Name: testpanelstagemapping_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testpanelstagemapping
    ADD CONSTRAINT testpanelstagemapping_pkey PRIMARY KEY (id);


--
-- Name: testpanelstagetestcollection_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testpanelstagetestcollection
    ADD CONSTRAINT testpanelstagetestcollection_pkey PRIMARY KEY (id);


--
-- Name: testpart_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testpart
    ADD CONSTRAINT testpart_pkey PRIMARY KEY (id);


--
-- Name: testpriorparameter_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testpriorparameter
    ADD CONSTRAINT testpriorparameter_pkey PRIMARY KEY (testpriorparameterid);


--
-- Name: testsection_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testsection
    ADD CONSTRAINT testsection_pkey PRIMARY KEY (id);


--
-- Name: testsectioncontainer_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testsectioncontainer
    ADD CONSTRAINT testsectioncontainer_pkey PRIMARY KEY (id);


--
-- Name: testsectioncontainerconstruct_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testsectioncontainerconstruct
    ADD CONSTRAINT testsectioncontainerconstruct_pkey PRIMARY KEY (testsectioncontainerid, testconstructid);


--
-- Name: testsectioncontainerthetanode_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testsectioncontainerthetanode
    ADD CONSTRAINT testsectioncontainerthetanode_pkey PRIMARY KEY (id);


--
-- Name: testsectionresource_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testsectionresource
    ADD CONSTRAINT testsectionresource_pkey PRIMARY KEY (id);


--
-- Name: testsectionsrules_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testsectionsrules
    ADD CONSTRAINT testsectionsrules_pkey PRIMARY KEY (testsectionid, ruleid);


--
-- Name: testsectionstaskvariants_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testsectionstaskvariants
    ADD CONSTRAINT testsectionstaskvariants_pkey PRIMARY KEY (id);


--
-- Name: testsectionstools_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testsectionstools
    ADD CONSTRAINT testsectionstools_pkey PRIMARY KEY (testsectionid, toolid);


--
-- Name: testselectionstatistic_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testselectionstatistic
    ADD CONSTRAINT testselectionstatistic_pkey PRIMARY KEY (id);


--
-- Name: testsession_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT testsession_pkey PRIMARY KEY (id);


--
-- Name: testspecification_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testspecification
    ADD CONSTRAINT testspecification_pkey PRIMARY KEY (id);


--
-- Name: textaccommodation_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY textaccommodation
    ADD CONSTRAINT textaccommodation_pkey PRIMARY KEY (id);


--
-- Name: tool_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY tool
    ADD CONSTRAINT tool_pkey PRIMARY KEY (id);


--
-- Name: uc1_testenrollmentmethod; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testenrollmentmethod
    ADD CONSTRAINT uc1_testenrollmentmethod UNIQUE (assessmentprogramid, methodcode);


--
-- Name: uk_autoregistrationcriteria_ap_tp_asst_cattsa; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY autoregistrationcriteria
    ADD CONSTRAINT uk_autoregistrationcriteria_ap_tp_asst_cattsa UNIQUE (assessmentprogramid, testingprogramid, assessmentid, contentareatesttypesubjectareaid, gradecourseid);


--
-- Name: uk_ccqtestname; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY scoringassignment
    ADD CONSTRAINT uk_ccqtestname UNIQUE (ccqtestname);


--
-- Name: uk_code; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY contentarea
    ADD CONSTRAINT uk_code UNIQUE (abbreviatedname, activeflag);


--
-- Name: uk_contentareatesttypesubjectarea_contentareaid_testtypesubject; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY contentareatesttypesubjectarea
    ADD CONSTRAINT uk_contentareatesttypesubjectarea_contentareaid_testtypesubject UNIQUE (contentareaid, testtypesubjectareaid, activeflag);


--
-- Name: uk_email; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY aartuser
    ADD CONSTRAINT uk_email UNIQUE (email);


--
-- Name: uk_field_spec; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY fieldspecification
    ADD CONSTRAINT uk_field_spec UNIQUE (fieldname, mappedname);


--
-- Name: uk_module_name_assessmentprogramid; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY module
    ADD CONSTRAINT uk_module_name_assessmentprogramid UNIQUE (assessmentprogramid, name);


--
-- Name: uk_pianac_ap; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY profileitemattrnameattrcontainerviewoptions
    ADD CONSTRAINT uk_pianac_ap UNIQUE (pianacid, assessmentprogramid);


--
-- Name: uk_profile_item_attribute; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY profileitemattribute
    ADD CONSTRAINT uk_profile_item_attribute UNIQUE (attributename);


--
-- Name: uk_profile_item_attribute_container; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY profileitemattributecontainer
    ADD CONSTRAINT uk_profile_item_attribute_container UNIQUE (attributecontainer);


--
-- Name: uk_profile_item_attribute_name_attribute_container; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY profileitemattributenameattributecontainer
    ADD CONSTRAINT uk_profile_item_attribute_name_attribute_container UNIQUE (attributenameid, attributecontainerid);


--
-- Name: uk_program_name; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY assessmentprogram
    ADD CONSTRAINT uk_program_name UNIQUE (programname);


--
-- Name: uk_restriction_code; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY restriction
    ADD CONSTRAINT uk_restriction_code UNIQUE (restrictioncode);


--
-- Name: uk_restrictions_organizations; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY restrictionsorganizations
    ADD CONSTRAINT uk_restrictions_organizations UNIQUE (restrictionid, organizationid, isenforced);


--
-- Name: uk_student_survey_response; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentsurveyresponse
    ADD CONSTRAINT uk_student_survey_response UNIQUE (surveyid, surveyresponseid, activeflag);


--
-- Name: uk_studentadaptivetestfinaltheta; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentadaptivetestfinaltheta
    ADD CONSTRAINT uk_studentadaptivetestfinaltheta PRIMARY KEY (studentstestid, testconstructid);


--
-- Name: uk_studentadaptivetestthetastatus; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentadaptivetestthetastatus
    ADD CONSTRAINT uk_studentadaptivetestthetastatus PRIMARY KEY (studentstestid, testpartnumber, testsectioncontainernumber);


--
-- Name: uk_studentid_contentareaid_courseid_operationaltestwindowid; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY operationaltestwindowstudent
    ADD CONSTRAINT uk_studentid_contentareaid_courseid_operationaltestwindowid UNIQUE (studentid, contentareaid, courseid, operationaltestwindowid);


--
-- Name: uk_studentnodeprobability; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentnodeprobability
    ADD CONSTRAINT uk_studentnodeprobability UNIQUE (studentid, nodeid);


--
-- Name: uk_studentsadaptivetestsections; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY studentsadaptivetestsections
    ADD CONSTRAINT uk_studentsadaptivetestsections PRIMARY KEY (studentstestid, testpartid, testsectionid);


--
-- Name: uk_subjectarea_subjectareacode; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY subjectarea
    ADD CONSTRAINT uk_subjectarea_subjectareacode UNIQUE (subjectareacode, activeflag);


--
-- Name: uk_survey_labels_label_number; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY surveylabel
    ADD CONSTRAINT uk_survey_labels_label_number UNIQUE (labelnumber);


--
-- Name: uk_survey_responses_labelsequence_label; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY surveyresponse
    ADD CONSTRAINT uk_survey_responses_labelsequence_label UNIQUE (labelid, responseorder);


--
-- Name: uk_surveyidpagenum; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY surveypagestatus
    ADD CONSTRAINT uk_surveyidpagenum UNIQUE (surveyid, globalpagenum);


--
-- Name: uk_testtype_testtypecode; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testtype
    ADD CONSTRAINT uk_testtype_testtypecode UNIQUE (testtypecode, assessmentid, activeflag);


--
-- Name: uk_testtypesubjectarea_testtypeid_subjectareaid_assessmentid; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY testtypesubjectarea
    ADD CONSTRAINT uk_testtypesubjectarea_testtypeid_subjectareaid_assessmentid UNIQUE (testtypeid, subjectareaid, assessmentid, activeflag);


--
-- Name: uk_type_code; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY organizationtype
    ADD CONSTRAINT uk_type_code UNIQUE (typecode);


--
-- Name: uk_username; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY student
    ADD CONSTRAINT uk_username UNIQUE (username);


--
-- Name: ukey_usertestsection; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY usertestsection
    ADD CONSTRAINT ukey_usertestsection UNIQUE (usertestid, testsectionid);


--
-- Name: uploadfile_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY uploadfile
    ADD CONSTRAINT uploadfile_pkey PRIMARY KEY (id);


--
-- Name: useraudit_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY useraudit
    ADD CONSTRAINT useraudit_pkey PRIMARY KEY (id);


--
-- Name: usergroups_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY userorganizationsgroups
    ADD CONSTRAINT usergroups_pkey PRIMARY KEY (id);


--
-- Name: username; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY aartuser
    ADD CONSTRAINT username UNIQUE (username);


--
-- Name: userreportupload_id_fk; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY userreportupload
    ADD CONSTRAINT userreportupload_id_fk PRIMARY KEY (id);


--
-- Name: userresponse_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY usertestresponse
    ADD CONSTRAINT userresponse_pkey PRIMARY KEY (usertestsectionid, taskvariantid);


--
-- Name: usertest_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY usertest
    ADD CONSTRAINT usertest_pkey PRIMARY KEY (id);


--
-- Name: usertestsection_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY usertestsection
    ADD CONSTRAINT usertestsection_pkey PRIMARY KEY (id);


--
-- Name: usertestsectiontask_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY usertestsectiontask
    ADD CONSTRAINT usertestsectiontask_pkey PRIMARY KEY (usertestsectionid, taskid);


--
-- Name: usertestsectiontaskfoil_pkey; Type: CONSTRAINT; Schema: public; Owner: aart; Tablespace: 
--

ALTER TABLE ONLY usertestsectiontaskfoil
    ADD CONSTRAINT usertestsectiontaskfoil_pkey PRIMARY KEY (usertestsectionid, taskid, foilid);


--
-- Name: complexityband_fk1; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX complexityband_fk1 ON complexityband USING btree (bandcode);


--
-- Name: idx1_dailyaccesscode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx1_dailyaccesscode ON dailyaccesscode USING btree (contentareaid);


--
-- Name: idx1_groupauthoritylockdownperiod; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx1_groupauthoritylockdownperiod ON groupauthoritylockdownperiod USING btree (organizationid);


--
-- Name: idx1_organizationtreedetail; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx1_organizationtreedetail ON organizationtreedetail USING btree (schooldisplayidentifier);


--
-- Name: idx1_studenttrackerblueprintstatus_statuscode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx1_studenttrackerblueprintstatus_statuscode ON studenttrackerblueprintstatus USING btree (statuscode);


--
-- Name: idx1_testenrollmentmethod_apid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx1_testenrollmentmethod_apid ON testenrollmentmethod USING btree (assessmentprogramid);


--
-- Name: idx2_dailyaccesscode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx2_dailyaccesscode ON dailyaccesscode USING btree (gradecourseid);


--
-- Name: idx2_groupauthoritylockdownperiod; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx2_groupauthoritylockdownperiod ON groupauthoritylockdownperiod USING btree (groupauthorityid);


--
-- Name: idx2_organizationtreedetail; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx2_organizationtreedetail ON organizationtreedetail USING btree (districtid);


--
-- Name: idx3_dailyaccesscode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx3_dailyaccesscode ON dailyaccesscode USING btree (stageid);


--
-- Name: idx3_organizationtreedetail; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx3_organizationtreedetail ON organizationtreedetail USING btree (stateid);


--
-- Name: idx4_dailyaccesscode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx4_dailyaccesscode ON dailyaccesscode USING btree (effectivedate);


--
-- Name: idx5_dailyaccesscode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx5_dailyaccesscode ON dailyaccesscode USING btree (operationaltestwindowid);


--
-- Name: idx_aartuser_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_aartuser_activeflag ON aartuser USING btree (activeflag);


--
-- Name: idx_aartuser_email; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_aartuser_email ON aartuser USING btree (lower((email)::text) varchar_pattern_ops);


--
-- Name: idx_aartuser_firstname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_aartuser_firstname ON aartuser USING btree (firstname);


--
-- Name: idx_aartuser_password; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_aartuser_password ON aartuser USING btree (password);


--
-- Name: idx_aartuser_surname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_aartuser_surname ON aartuser USING btree (surname);


--
-- Name: idx_aartuser_uniquecommonidentifier; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_aartuser_uniquecommonidentifier ON aartuser USING btree (uniquecommonidentifier);


--
-- Name: idx_aartuser_username; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_aartuser_username ON aartuser USING btree (lower((username)::text) varchar_pattern_ops);


--
-- Name: idx_accessibilityfile_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_accessibilityfile_assessmentprogramid ON accessibilityfile USING btree (assessmentprogramid);


--
-- Name: idx_accessibilityfile_taskvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_accessibilityfile_taskvariantid ON accessibilityfile USING btree (taskvariantid);


--
-- Name: idx_activity_moduleid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_activity_moduleid ON activity USING btree (moduleid);


--
-- Name: idx_activity_userid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_activity_userid ON activity USING btree (userid);


--
-- Name: idx_ampexcludeditems_gradeabbr; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ampexcludeditems_gradeabbr ON ampexcludeditems USING btree (gradeabbr);


--
-- Name: idx_assessment_assessmentname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessment_assessmentname ON assessment USING btree (assessmentname);


--
-- Name: idx_assessment_autoenrollmentflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessment_autoenrollmentflag ON assessment USING btree (autoenrollmentflag);


--
-- Name: idx_assessment_testingprogram; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessment_testingprogram ON assessment USING btree (testingprogramid);


--
-- Name: idx_assessment_testingprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessment_testingprogramid ON assessment USING btree (testingprogramid);


--
-- Name: idx_assessmentprogram_abbreviatedname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessmentprogram_abbreviatedname ON assessmentprogram USING btree (abbreviatedname);


--
-- Name: idx_assessmentprogram_programname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessmentprogram_programname ON assessmentprogram USING btree (programname);


--
-- Name: idx_assessmentprogramgrades_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessmentprogramgrades_assessmentprogramid ON assessmentprogramgrades USING btree (assessmentprogramid);


--
-- Name: idx_assessmentstestcollections_assessment; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessmentstestcollections_assessment ON assessmentstestcollections USING btree (assessmentid);


--
-- Name: idx_assessmentstestcollections_assessmentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessmentstestcollections_assessmentid ON assessmentstestcollections USING btree (assessmentid);


--
-- Name: idx_assessmentstestcollections_testcollection; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessmentstestcollections_testcollection ON assessmentstestcollections USING btree (testcollectionid);


--
-- Name: idx_assessmentstestcollections_testcollectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_assessmentstestcollections_testcollectionid ON assessmentstestcollections USING btree (testcollectionid);


--
-- Name: idx_attendanceschoolid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_attendanceschoolid ON roster USING btree (attendanceschoolid);


--
-- Name: idx_authorities_authority; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_authorities_authority ON authorities USING btree (authority);


--
-- Name: idx_authorities_objecttype; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_authorities_objecttype ON authorities USING btree (objecttype);


--
-- Name: idx_autoregistrationcriteria_assessmentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_autoregistrationcriteria_assessmentid ON autoregistrationcriteria USING btree (assessmentid);


--
-- Name: idx_autoregistrationcriteria_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_autoregistrationcriteria_assessmentprogramid ON autoregistrationcriteria USING btree (assessmentprogramid);


--
-- Name: idx_autoregistrationcriteria_contentareatesttypesubjectareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_autoregistrationcriteria_contentareatesttypesubjectareaid ON autoregistrationcriteria USING btree (contentareatesttypesubjectareaid);


--
-- Name: idx_autoregistrationcriteria_gradecourseid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_autoregistrationcriteria_gradecourseid ON autoregistrationcriteria USING btree (gradecourseid);


--
-- Name: idx_autoregistrationcriteria_testingprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_autoregistrationcriteria_testingprogramid ON autoregistrationcriteria USING btree (testingprogramid);


--
-- Name: idx_batchjobschedule_allowedserver; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchjobschedule_allowedserver ON batchjobschedule USING btree (allowedserver);


--
-- Name: idx_batchstudenttracker_assessmentprogram; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchstudenttracker_assessmentprogram ON batchstudenttracker USING btree (assessmentprogram);


--
-- Name: idx_batchstudenttracker_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchstudenttracker_contentareaid ON batchstudenttracker USING btree (contentareaid);


--
-- Name: idx_batchstudenttracker_orgid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchstudenttracker_orgid ON batchstudenttracker USING btree (orgid);


--
-- Name: idx_batchstudenttrackerreason_batchstudenttrackerid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchstudenttrackerreason_batchstudenttrackerid ON batchstudenttrackerreason USING btree (batchstudenttrackerid);


--
-- Name: idx_batchstudenttrackerreason_gradecourseid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchstudenttrackerreason_gradecourseid ON batchstudenttrackerreason USING btree (gradecourseid);


--
-- Name: idx_batchstudenttrackerreason_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchstudenttrackerreason_studentid ON batchstudenttrackerreason USING btree (studentid);


--
-- Name: idx_batchstudenttrackerreason_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchstudenttrackerreason_testid ON batchstudenttrackerreason USING btree (testid);


--
-- Name: idx_batchupload_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchupload_activeflag ON batchupload USING btree (activeflag);


--
-- Name: idx_batchupload_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchupload_assessmentprogramid ON batchupload USING btree (assessmentprogramid);


--
-- Name: idx_batchupload_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchupload_contentareaid ON batchupload USING btree (contentareaid);


--
-- Name: idx_batchupload_createduser; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchupload_createduser ON batchupload USING btree (createduser);


--
-- Name: idx_batchupload_status; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchupload_status ON batchupload USING btree (status);


--
-- Name: idx_batchupload_uploadedusergroupid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchupload_uploadedusergroupid ON batchupload USING btree (uploadedusergroupid);


--
-- Name: idx_batchupload_uploadeduserorgid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchupload_uploadeduserorgid ON batchupload USING btree (uploadeduserorgid);


--
-- Name: idx_batchupload_uploadtypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchupload_uploadtypeid ON batchupload USING btree (uploadtypeid);


--
-- Name: idx_batchuploadreason_batchuploadid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchuploadreason_batchuploadid ON batchuploadreason USING btree (batchuploadid);


--
-- Name: idx_batchuploadreason_fieldname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchuploadreason_fieldname ON batchuploadreason USING btree (fieldname);


--
-- Name: idx_batchuploadreason_line; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_batchuploadreason_line ON batchuploadreason USING btree (line);


--
-- Name: idx_blueprint_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_blueprint_contentareaid ON blueprint USING btree (contentareaid);


--
-- Name: idx_blueprint_gradebandid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_blueprint_gradebandid ON blueprint USING btree (gradebandid);


--
-- Name: idx_blueprint_gradecourseid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_blueprint_gradecourseid ON blueprint USING btree (gradecourseid);


--
-- Name: idx_blueprintessentialelements_essentialelementid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_blueprintessentialelements_essentialelementid ON blueprintessentialelements USING btree (essentialelementid);


--
-- Name: idx_category_categoryname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_category_categoryname ON category USING btree (categoryname);


--
-- Name: idx_category_categorytype; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_category_categorytype ON category USING btree (categorytypeid);


--
-- Name: idx_category_categorytypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_category_categorytypeid ON category USING btree (categorytypeid);


--
-- Name: idx_category_code; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_category_code ON category USING btree (categorycode);


--
-- Name: idx_category_id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_category_id ON category USING btree (id);


--
-- Name: idx_categorytype_code; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_categorytype_code ON categorytype USING btree (typecode);


--
-- Name: idx_categorytype_typecode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_categorytype_typecode ON categorytype USING btree (typecode);


--
-- Name: idx_cmstate_comminicationmessage; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_cmstate_comminicationmessage ON communicationmessagestate USING btree (comminicationmessageid);


--
-- Name: idx_cmstate_state; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_cmstate_state ON communicationmessagestate USING btree (stateid);


--
-- Name: idx_combinedlevelmap_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_combinedlevelmap_assessmentprogramid ON combinedlevelmap USING btree (assessmentprogramid);


--
-- Name: idx_combinedlevelmap_batchuploadid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_combinedlevelmap_batchuploadid ON combinedlevelmap USING btree (batchuploadid);


--
-- Name: idx_combinedlevelmap_combinedlevel; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_combinedlevelmap_combinedlevel ON combinedlevelmap USING btree (combinedlevel);


--
-- Name: idx_combinedlevelmap_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_combinedlevelmap_gradeid ON combinedlevelmap USING btree (gradeid);


--
-- Name: idx_combinedlevelmap_performancescalescore; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_combinedlevelmap_performancescalescore ON combinedlevelmap USING btree (performancescalescore);


--
-- Name: idx_combinedlevelmap_schoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_combinedlevelmap_schoolyear ON combinedlevelmap USING btree (schoolyear);


--
-- Name: idx_combinedlevelmap_stageshighscalescore; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_combinedlevelmap_stageshighscalescore ON combinedlevelmap USING btree (stageshighscalescore);


--
-- Name: idx_combinedlevelmap_stageslowscalescore; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_combinedlevelmap_stageslowscalescore ON combinedlevelmap USING btree (stageslowscalescore);


--
-- Name: idx_combinedlevelmap_subjectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_combinedlevelmap_subjectid ON combinedlevelmap USING btree (subjectid);


--
-- Name: idx_communicationmessage_assessmentprogram; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_communicationmessage_assessmentprogram ON communicationmessage USING btree (assessmentprogramid);


--
-- Name: idx_complexityband_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_complexityband_contentareaid ON complexityband USING btree (contentareaid);


--
-- Name: idx_complexitybandrules_complexitybandid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_complexitybandrules_complexitybandid ON complexitybandrules USING btree (complexitybandid);


--
-- Name: idx_complexitybandrules_complexitybandtypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_complexitybandrules_complexitybandtypeid ON complexitybandrules USING btree (complexitybandtypeid);


--
-- Name: idx_compositestimulusvariant_compositestimulusvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_compositestimulusvariant_compositestimulusvariantid ON compositestimulusvariant USING btree (compositestimulusvariantid);


--
-- Name: idx_compositestimulusvariant_stimulusvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_compositestimulusvariant_stimulusvariantid ON compositestimulusvariant USING btree (stimulusvariantid);


--
-- Name: idx_contentarea_abbreviatedname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentarea_abbreviatedname ON contentarea USING btree (abbreviatedname);


--
-- Name: idx_contentarea_id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentarea_id ON contentarea USING btree (id);


--
-- Name: idx_contentarea_name; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentarea_name ON contentarea USING btree (name);


--
-- Name: idx_contentareatesttypesubjectarea_contentarea; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentareatesttypesubjectarea_contentarea ON contentareatesttypesubjectarea USING btree (contentareaid);


--
-- Name: idx_contentareatesttypesubjectarea_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentareatesttypesubjectarea_contentareaid ON contentareatesttypesubjectarea USING btree (contentareaid);


--
-- Name: idx_contentareatesttypesubjectarea_testtypesubjectarea; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentareatesttypesubjectarea_testtypesubjectarea ON contentareatesttypesubjectarea USING btree (testtypesubjectareaid);


--
-- Name: idx_contentareatesttypesubjectarea_testtypesubjectareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentareatesttypesubjectarea_testtypesubjectareaid ON contentareatesttypesubjectarea USING btree (testtypesubjectareaid);


--
-- Name: idx_contentframework_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentframework_assessmentprogramid ON contentframework USING btree (assessmentprogramid);


--
-- Name: idx_contentframework_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentframework_contentareaid ON contentframework USING btree (contentareaid);


--
-- Name: idx_contentframework_frameworktypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentframework_frameworktypeid ON contentframework USING btree (frameworktypeid);


--
-- Name: idx_contentframework_gradebandid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentframework_gradebandid ON contentframework USING btree (gradebandid);


--
-- Name: idx_contentframework_gradecourseid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentframework_gradecourseid ON contentframework USING btree (gradecourseid);


--
-- Name: idx_contentframeworkdetail_contentcode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentframeworkdetail_contentcode ON contentframeworkdetail USING btree (contentcode);


--
-- Name: idx_contentframeworkdetail_contentframeworkid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentframeworkdetail_contentframeworkid ON contentframeworkdetail USING btree (contentframeworkid);


--
-- Name: idx_contentgroup_foilid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentgroup_foilid ON contentgroup USING btree (foilid);


--
-- Name: idx_contentgroup_stimulusvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentgroup_stimulusvariantid ON contentgroup USING btree (stimulusvariantid);


--
-- Name: idx_contentgroup_taskvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentgroup_taskvariantid ON contentgroup USING btree (taskvariantid);


--
-- Name: idx_contentgroup_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentgroup_testid ON contentgroup USING btree (testid);


--
-- Name: idx_contentgroup_testsectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_contentgroup_testsectionid ON contentgroup USING btree (testsectionid);


--
-- Name: idx_domainaudithistory_createduserid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_domainaudithistory_createduserid ON domainaudithistory USING btree (createduserid);


--
-- Name: idx_domainaudithistory_objectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_domainaudithistory_objectid ON domainaudithistory USING btree (objectid);


--
-- Name: idx_domainaudithistory_objecttype; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_domainaudithistory_objecttype ON domainaudithistory USING btree (objecttype);


--
-- Name: idx_domainaudithistory_source; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_domainaudithistory_source ON domainaudithistory USING btree (source);


--
-- Name: idx_enrollment_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_activeflag ON enrollment USING btree (activeflag) WHERE (activeflag IS TRUE);


--
-- Name: idx_enrollment_attendanceschoolid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_attendanceschoolid ON enrollment USING btree (attendanceschoolid);


--
-- Name: idx_enrollment_aypschoolid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_aypschoolid ON enrollment USING btree (aypschoolid);


--
-- Name: idx_enrollment_currentgradelevel; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_currentgradelevel ON enrollment USING btree (currentgradelevel);


--
-- Name: idx_enrollment_currentschoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_currentschoolyear ON enrollment USING btree (currentschoolyear);


--
-- Name: idx_enrollment_exitwithdrawaltype; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_exitwithdrawaltype ON enrollment USING btree (exitwithdrawaltype);


--
-- Name: idx_enrollment_id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_id ON enrollment USING btree (id);


--
-- Name: idx_enrollment_localstudentidentifier; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_localstudentidentifier ON enrollment USING btree (localstudentidentifier);


--
-- Name: idx_enrollment_modifieduser; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_modifieduser ON enrollment USING btree (modifieduser);


--
-- Name: idx_enrollment_residencedistrictidentifier; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_residencedistrictidentifier ON enrollment USING btree (residencedistrictidentifier);


--
-- Name: idx_enrollment_restrictionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_restrictionid ON enrollment USING btree (restrictionid);


--
-- Name: idx_enrollment_source; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_source ON enrollment USING btree (source);


--
-- Name: idx_enrollment_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollment_studentid ON enrollment USING btree (studentid);


--
-- Name: idx_enrollmentrosters_eid_rid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmentrosters_eid_rid ON enrollmentsrosters USING btree (enrollmentid, rosterid);


--
-- Name: idx_enrollmentsrosters_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmentsrosters_activeflag ON enrollmentsrosters USING btree (activeflag) WHERE (activeflag IS TRUE);


--
-- Name: idx_enrollmentsrosters_courseenrollmentstatusid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmentsrosters_courseenrollmentstatusid ON enrollmentsrosters USING btree (courseenrollmentstatusid);


--
-- Name: idx_enrollmentsrosters_enrollmentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmentsrosters_enrollmentid ON enrollmentsrosters USING btree (enrollmentid);


--
-- Name: idx_enrollmentsrosters_modifieduser; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmentsrosters_modifieduser ON enrollmentsrosters USING btree (modifieduser);


--
-- Name: idx_enrollmentsrosters_rosterid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmentsrosters_rosterid ON enrollmentsrosters USING btree (rosterid);


--
-- Name: idx_enrollmentsrosters_source; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmentsrosters_source ON enrollmentsrosters USING btree (source);


--
-- Name: idx_enrollmentsrosters_trackerstatus; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmentsrosters_trackerstatus ON enrollmentsrosters USING btree (trackerstatus);


--
-- Name: idx_enrollmenttesttypesubjectarea_active; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmenttesttypesubjectarea_active ON enrollmenttesttypesubjectarea USING btree (activeflag);


--
-- Name: idx_enrollmenttesttypesubjectarea_enrollmentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmenttesttypesubjectarea_enrollmentid ON enrollmenttesttypesubjectarea USING btree (enrollmentid);


--
-- Name: idx_enrollmenttesttypesubjectarea_subjectareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmenttesttypesubjectarea_subjectareaid ON enrollmenttesttypesubjectarea USING btree (subjectareaid);


--
-- Name: idx_enrollmenttesttypesubjectarea_testtypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_enrollmenttesttypesubjectarea_testtypeid ON enrollmenttesttypesubjectarea USING btree (testtypeid);


--
-- Name: idx_essentialelementlinkagetranslationvalues_category; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_essentialelementlinkagetranslationvalues_category ON essentialelementlinkagetranslationvalues USING btree (categoryid);


--
-- Name: idx_essentialelementlinkagetranslationvalues_tvalue; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_essentialelementlinkagetranslationvalues_tvalue ON essentialelementlinkagetranslationvalues USING btree (translationvalue);


--
-- Name: idx_excludeditems_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_excludeditems_assessmentprogramid ON excludeditems USING btree (assessmentprogramid);


--
-- Name: idx_excludeditems_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_excludeditems_gradeid ON excludeditems USING btree (gradeid);


--
-- Name: idx_excludeditems_schoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_excludeditems_schoolyear ON excludeditems USING btree (schoolyear);


--
-- Name: idx_excludeditems_taskvariant; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_excludeditems_taskvariant ON excludeditems USING btree (taskvariantid);


--
-- Name: idx_exitwithoutsavetest_studenttestsectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_exitwithoutsavetest_studenttestsectionid ON exitwithoutsavetest USING btree (studenttestsectionid);


--
-- Name: idx_externalstudentreports_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_externalstudentreports_assessmentprogramid ON externalstudentreports USING btree (assessmentprogramid);


--
-- Name: idx_externalstudentreports_districtid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_externalstudentreports_districtid ON externalstudentreports USING btree (districtid);


--
-- Name: idx_externalstudentreports_filepath; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_externalstudentreports_filepath ON externalstudentreports USING btree (filepath);


--
-- Name: idx_externalstudentreports_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_externalstudentreports_gradeid ON externalstudentreports USING btree (gradeid);


--
-- Name: idx_externalstudentreports_id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_externalstudentreports_id ON externalstudentreports USING btree (id);


--
-- Name: idx_externalstudentreports_schoolid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_externalstudentreports_schoolid ON externalstudentreports USING btree (schoolid);


--
-- Name: idx_externalstudentreports_schoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_externalstudentreports_schoolyear ON externalstudentreports USING btree (schoolyear);


--
-- Name: idx_externalstudentreports_stateid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_externalstudentreports_stateid ON externalstudentreports USING btree (stateid);


--
-- Name: idx_externalstudentreports_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_externalstudentreports_studentid ON externalstudentreports USING btree (studentid);


--
-- Name: idx_externalstudentreports_subjectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_externalstudentreports_subjectid ON externalstudentreports USING btree (subjectid);


--
-- Name: idx_fieldspecificationsrecordtypes_fieldspecificationid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_fieldspecificationsrecordtypes_fieldspecificationid ON fieldspecificationsrecordtypes USING btree (fieldspecificationid);


--
-- Name: idx_fieldspecificationsrecordtypes_recordtypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_fieldspecificationsrecordtypes_recordtypeid ON fieldspecificationsrecordtypes USING btree (recordtypeid);


--
-- Name: idx_foilsstimulusvariants_foilid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_foilsstimulusvariants_foilid ON foilsstimulusvariants USING btree (foilid);


--
-- Name: idx_foilsstimulusvariants_stimulusvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_foilsstimulusvariants_stimulusvariantid ON foilsstimulusvariants USING btree (stimulusvariantid);


--
-- Name: idx_gradeband_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_gradeband_contentareaid ON gradeband USING btree (contentareaid);


--
-- Name: idx_gradebandgradecourse_gradeband; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_gradebandgradecourse_gradeband ON gradebandgradecourse USING btree (gradebandid);


--
-- Name: idx_gradebandgradecourse_gradecourse; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_gradebandgradecourse_gradecourse ON gradebandgradecourse USING btree (gradecourseid);


--
-- Name: idx_gradecontentareatesttypesubjectarea_gradecourseid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_gradecontentareatesttypesubjectarea_gradecourseid ON gradecontentareatesttypesubjectarea USING btree (gradecourseid);


--
-- Name: idx_gradecourse_abbreviatedname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_gradecourse_abbreviatedname ON gradecourse USING btree (abbreviatedname);


--
-- Name: idx_gradecourse_gradelevel; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_gradecourse_gradelevel ON gradecourse USING btree (gradelevel);


--
-- Name: idx_gradecourse_id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_gradecourse_id ON gradecourse USING btree (id);


--
-- Name: idx_gradecourse_name; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_gradecourse_name ON gradecourse USING btree (name);


--
-- Name: idx_groupauthorities_authorityid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_groupauthorities_authorityid ON groupauthorities USING btree (authorityid);


--
-- Name: idx_groupauthorities_groupid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_groupauthorities_groupid ON groupauthorities USING btree (groupid);


--
-- Name: idx_groupauthoritylockdownperiod_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_groupauthoritylockdownperiod_activeflag ON groupauthoritylockdownperiod USING btree (activeflag);


--
-- Name: idx_groupauthoritylockdownperiod_fromdate; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_groupauthoritylockdownperiod_fromdate ON groupauthoritylockdownperiod USING btree (fromdate);


--
-- Name: idx_groupauthoritylockdownperiod_todate; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_groupauthoritylockdownperiod_todate ON groupauthoritylockdownperiod USING btree (todate);


--
-- Name: idx_itemstatistic_itemstatisticname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_itemstatistic_itemstatisticname ON itemstatistic USING btree (itemstatisticname);


--
-- Name: idx_itemstatistic_taskvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_itemstatistic_taskvariantid ON itemstatistic USING btree (taskvariantid);


--
-- Name: idx_ititestsessionhistory_modifieddate; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ititestsessionhistory_modifieddate ON ititestsessionhistory USING btree (modifieddate);


--
-- Name: idx_ititestsessionhistory_rosterid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ititestsessionhistory_rosterid ON ititestsessionhistory USING btree (rosterid);


--
-- Name: idx_ititestsessionhistory_status; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ititestsessionhistory_status ON ititestsessionhistory USING btree (status);


--
-- Name: idx_ititestsessionhistory_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ititestsessionhistory_studentid ON ititestsessionhistory USING btree (studentid);


--
-- Name: idx_ititestsessionhistory_testcollectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ititestsessionhistory_testcollectionid ON ititestsessionhistory USING btree (testcollectionid);


--
-- Name: idx_ititestsessionhistory_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ititestsessionhistory_testid ON ititestsessionhistory USING btree (testid);


--
-- Name: idx_ititestsessionhistory_testsessionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ititestsessionhistory_testsessionid ON ititestsessionhistory USING btree (testsessionid);


--
-- Name: idx_ititestsessionsensitivitytags_ititestsessionhistoryid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ititestsessionsensitivitytags_ititestsessionhistoryid ON ititestsessionsensitivitytags USING btree (ititestsessionhistoryid);


--
-- Name: idx_ititestsessionsensitivitytags_sensitivitytag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ititestsessionsensitivitytags_sensitivitytag ON ititestsessionsensitivitytags USING btree (sensitivitytag);


--
-- Name: idx_ksdexmlaudit_type; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_ksdexmlaudit_type ON ksdexmlaudit USING btree (type);


--
-- Name: idx_leveldescription_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_leveldescription_assessmentprogramid ON leveldescription USING btree (assessmentprogramid);


--
-- Name: idx_leveldescription_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_leveldescription_gradeid ON leveldescription USING btree (gradeid);


--
-- Name: idx_leveldescription_subjectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_leveldescription_subjectid ON leveldescription USING btree (subjectid);


--
-- Name: idx_lmassessmentmodelrule_contentframeworkdetail; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_lmassessmentmodelrule_contentframeworkdetail ON lmassessmentmodelrule USING btree (contentframeworkdetailid);


--
-- Name: idx_lmassessmentmodelrule_contentframeworkdetailid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_lmassessmentmodelrule_contentframeworkdetailid ON lmassessmentmodelrule USING btree (contentframeworkdetailid);


--
-- Name: idx_lmassessmentmodelrule_testspecification; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_lmassessmentmodelrule_testspecification ON lmassessmentmodelrule USING btree (testspecificationid);


--
-- Name: idx_lmassessmentmodelrule_tranking; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_lmassessmentmodelrule_tranking ON lmassessmentmodelrule USING btree (ranking);


--
-- Name: idx_micromap_contentframeworkdetailid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_micromap_contentframeworkdetailid ON micromap USING btree (contentframeworkdetailid);


--
-- Name: idx_modulegroup_groupid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_modulegroup_groupid ON modulegroup USING btree (groupid);


--
-- Name: idx_modulegroup_moduleid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_modulegroup_moduleid ON modulegroup USING btree (moduleid);


--
-- Name: idx_modulereport_createduser; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_modulereport_createduser ON modulereport USING btree (createduser);


--
-- Name: idx_modulereport_groupid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_modulereport_groupid ON modulereport USING btree (groupid);


--
-- Name: idx_modulereport_reporttypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_modulereport_reporttypeid ON modulereport USING btree (reporttypeid);


--
-- Name: idx_modulereport_starttime; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_modulereport_starttime ON modulereport USING btree (starttime);


--
-- Name: idx_modulereport_stateid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_modulereport_stateid ON modulereport USING btree (stateid);


--
-- Name: idx_modulereport_statusid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_modulereport_statusid ON modulereport USING btree (statusid);


--
-- Name: idx_modulestate_stateid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_modulestate_stateid ON modulestate USING btree (stateid);


--
-- Name: idx_modulestate_statusid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_modulestate_statusid ON modulestate USING btree (statusid);


--
-- Name: idx_operationaltestwindow_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindow_assessmentprogramid ON operationaltestwindow USING btree (assessmentprogramid);


--
-- Name: idx_operationaltestwindow_effectivedate; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindow_effectivedate ON operationaltestwindow USING btree (effectivedate);


--
-- Name: idx_operationaltestwindow_expirydate; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindow_expirydate ON operationaltestwindow USING btree (expirydate);


--
-- Name: idx_operationaltestwindow_id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindow_id ON operationaltestwindow USING btree (id);


--
-- Name: idx_operationaltestwindow_suspendwindow; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindow_suspendwindow ON operationaltestwindow USING btree (suspendwindow);


--
-- Name: idx_operationaltestwindow_windowname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindow_windowname ON operationaltestwindow USING btree (windowname);


--
-- Name: idx_operationaltestwindowmultiassigndetail_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowmultiassigndetail_contentareaid ON operationaltestwindowmultiassigndetail USING btree (contentareaid);


--
-- Name: idx_operationaltestwindowmultiassigndetail_operationaltestwindo; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowmultiassigndetail_operationaltestwindo ON operationaltestwindowmultiassigndetail USING btree (operationaltestwindowid);


--
-- Name: idx_operationaltestwindowsessionrule_operationaltestwindowid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowsessionrule_operationaltestwindowid ON operationaltestwindowsessionrule USING btree (operationaltestwindowid);


--
-- Name: idx_operationaltestwindowsessionrule_sessionruleid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowsessionrule_sessionruleid ON operationaltestwindowsessionrule USING btree (sessionruleid);


--
-- Name: idx_operationaltestwindowstate_operationaltestwindowid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowstate_operationaltestwindowid ON operationaltestwindowstate USING btree (operationaltestwindowid);


--
-- Name: idx_operationaltestwindowstate_stateid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowstate_stateid ON operationaltestwindowstate USING btree (stateid);


--
-- Name: idx_operationaltestwindowstestcollections_operationaltestwindow; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowstestcollections_operationaltestwindow ON operationaltestwindowstestcollections USING btree (operationaltestwindowid);


--
-- Name: idx_operationaltestwindowstestcollections_testcollectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowstestcollections_testcollectionid ON operationaltestwindowstestcollections USING btree (testcollectionid);


--
-- Name: idx_operationaltestwindowstudent_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowstudent_activeflag ON operationaltestwindowstudent USING btree (activeflag);


--
-- Name: idx_operationaltestwindowstudent_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowstudent_contentareaid ON operationaltestwindowstudent USING btree (contentareaid);


--
-- Name: idx_operationaltestwindowstudent_courseid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowstudent_courseid ON operationaltestwindowstudent USING btree (courseid);


--
-- Name: idx_operationaltestwindowstudent_operationaltestwindowid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowstudent_operationaltestwindowid ON operationaltestwindowstudent USING btree (operationaltestwindowid);


--
-- Name: idx_operationaltestwindowstudent_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_operationaltestwindowstudent_studentid ON operationaltestwindowstudent USING btree (studentid);


--
-- Name: idx_organization_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organization_activeflag ON organization USING btree (activeflag);


--
-- Name: idx_organization_displayidentifier; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organization_displayidentifier ON organization USING btree (displayidentifier);


--
-- Name: idx_organization_id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organization_id ON organization USING btree (id);


--
-- Name: idx_organization_organizationname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organization_organizationname ON organization USING btree (organizationname);


--
-- Name: idx_organization_organizationtypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organization_organizationtypeid ON organization USING btree (organizationtypeid);


--
-- Name: idx_organization_reportprocess; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organization_reportprocess ON organization USING btree (reportprocess);


--
-- Name: idx_organizationrelation_organizationid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationrelation_organizationid ON organizationrelation USING btree (organizationid);


--
-- Name: idx_organizationrelation_parentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationrelation_parentid ON organizationrelation USING btree (parentorganizationid);


--
-- Name: idx_organizationreportdetails_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationreportdetails_assessmentprogramid ON organizationreportdetails USING btree (assessmentprogramid);


--
-- Name: idx_organizationreportdetails_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationreportdetails_contentareaid ON organizationreportdetails USING btree (contentareaid);


--
-- Name: idx_organizationreportdetails_detailedreportpath; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationreportdetails_detailedreportpath ON organizationreportdetails USING btree (detailedreportpath);


--
-- Name: idx_organizationreportdetails_gradecourseabbrname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationreportdetails_gradecourseabbrname ON organizationreportdetails USING btree (gradecourseabbrname);


--
-- Name: idx_organizationreportdetails_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationreportdetails_gradeid ON organizationreportdetails USING btree (gradeid);


--
-- Name: idx_organizationreportdetails_organizationid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationreportdetails_organizationid ON organizationreportdetails USING btree (organizationid);


--
-- Name: idx_organizationreportdetails_schoolreportpdfpath; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationreportdetails_schoolreportpdfpath ON organizationreportdetails USING btree (schoolreportpdfpath);


--
-- Name: idx_organizationreportdetails_schoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationreportdetails_schoolyear ON organizationreportdetails USING btree (schoolyear);


--
-- Name: idx_organizationtype_id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_organizationtype_id ON organizationtype USING btree (id);


--
-- Name: idx_otwsr_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_otwsr_activeflag ON operationaltestwindowsessionrule USING btree (activeflag);


--
-- Name: idx_otwsr_operationaltestwindowid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_otwsr_operationaltestwindowid ON operationaltestwindowsessionrule USING btree (operationaltestwindowid);


--
-- Name: idx_otwsr_sessionruleid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_otwsr_sessionruleid ON operationaltestwindowsessionrule USING btree (sessionruleid);


--
-- Name: idx_profileitemattribute_attributename; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_profileitemattribute_attributename ON profileitemattribute USING btree (attributename);


--
-- Name: idx_profileitemattributecontainer_attributecontainer; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_profileitemattributecontainer_attributecontainer ON profileitemattributecontainer USING btree (attributecontainer);


--
-- Name: idx_profileitemattributenameattributecontainer_acid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_profileitemattributenameattributecontainer_acid ON profileitemattributenameattributecontainer USING btree (attributecontainerid);


--
-- Name: idx_profileitemattributenameattributecontainer_attributenameid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_profileitemattributenameattributecontainer_attributenameid ON profileitemattributenameattributecontainer USING btree (attributenameid);


--
-- Name: idx_profileitemattrnameattrcontainerviewoptions_apid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_profileitemattrnameattrcontainerviewoptions_apid ON profileitemattrnameattrcontainerviewoptions USING btree (assessmentprogramid);


--
-- Name: idx_profileitemattrnameattrcontainerviewoptions_assessmentprogr; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_profileitemattrnameattrcontainerviewoptions_assessmentprogr ON profileitemattrnameattrcontainerviewoptions USING btree (assessmentprogramid);


--
-- Name: idx_profileitemattrnameattrcontainerviewoptions_pianacid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_profileitemattrnameattrcontainerviewoptions_pianacid ON profileitemattrnameattrcontainerviewoptions USING btree (pianacid);


--
-- Name: idx_proportionmetrics_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_proportionmetrics_contentareaid ON proportionmetrics USING btree (contentareaid);


--
-- Name: idx_proportionmetrics_essentialelementid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_proportionmetrics_essentialelementid ON proportionmetrics USING btree (essentialelementid);


--
-- Name: idx_proportionmetrics_gradebandid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_proportionmetrics_gradebandid ON proportionmetrics USING btree (gradebandid);


--
-- Name: idx_proportionmetrics_gradecourseid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_proportionmetrics_gradecourseid ON proportionmetrics USING btree (gradecourseid);


--
-- Name: idx_proportionmetrics_linkagelevelid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_proportionmetrics_linkagelevelid ON proportionmetrics USING btree (linkagelevelid);


--
-- Name: idx_rawtoscalescores_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_assessmentprogramid ON rawtoscalescores USING btree (assessmentprogramid);


--
-- Name: idx_rawtoscalescores_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_gradeid ON rawtoscalescores USING btree (gradeid);


--
-- Name: idx_rawtoscalescores_performance_item_weight; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_performance_item_weight ON rawtoscalescores USING btree (performance_item_weight);


--
-- Name: idx_rawtoscalescores_performance_rawscore_include_flag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_performance_rawscore_include_flag ON rawtoscalescores USING btree (performance_rawscore_include_flag);


--
-- Name: idx_rawtoscalescores_performance_subjectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_performance_subjectid ON rawtoscalescores USING btree (performance_subjectid);


--
-- Name: idx_rawtoscalescores_performance_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_performance_testid ON rawtoscalescores USING btree (performance_testid);


--
-- Name: idx_rawtoscalescores_rawscore; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_rawscore ON rawtoscalescores USING btree (rawscore);


--
-- Name: idx_rawtoscalescores_subjectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_subjectid ON rawtoscalescores USING btree (subjectid);


--
-- Name: idx_rawtoscalescores_testid1; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_testid1 ON rawtoscalescores USING btree (testid1);


--
-- Name: idx_rawtoscalescores_testid2; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_testid2 ON rawtoscalescores USING btree (testid2);


--
-- Name: idx_rawtoscalescores_testid3; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_testid3 ON rawtoscalescores USING btree (testid3);


--
-- Name: idx_rawtoscalescores_testid4; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rawtoscalescores_testid4 ON rawtoscalescores USING btree (testid4);


--
-- Name: idx_readaloudaccommodation_accessibilityfileid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_readaloudaccommodation_accessibilityfileid ON readaloudaccommodation USING btree (accessibilityfileid);


--
-- Name: idx_readaloudaccommodation_contentgroupid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_readaloudaccommodation_contentgroupid ON readaloudaccommodation USING btree (contentgroupid);


--
-- Name: idx_reportprocess_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportprocess_assessmentprogramid ON reportprocess USING btree (assessmentprogramid);


--
-- Name: idx_reportprocess_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportprocess_gradeid ON reportprocess USING btree (gradeid);


--
-- Name: idx_reportprocess_status; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportprocess_status ON reportprocess USING btree (status);


--
-- Name: idx_reportprocess_subjectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportprocess_subjectid ON reportprocess USING btree (subjectid);


--
-- Name: idx_reportprocessreason_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportprocessreason_studentid ON reportprocessreason USING btree (studentid);


--
-- Name: idx_reportsmedianscore_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsmedianscore_assessmentprogramid ON reportsmedianscore USING btree (assessmentprogramid);


--
-- Name: idx_reportsmedianscore_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsmedianscore_contentareaid ON reportsmedianscore USING btree (contentareaid);


--
-- Name: idx_reportsmedianscore_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsmedianscore_gradeid ON reportsmedianscore USING btree (gradeid);


--
-- Name: idx_reportsmedianscore_organizationid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsmedianscore_organizationid ON reportsmedianscore USING btree (organizationid);


--
-- Name: idx_reportsmedianscore_organizationtypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsmedianscore_organizationtypeid ON reportsmedianscore USING btree (organizationtypeid);


--
-- Name: idx_reportsmedianscore_schoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsmedianscore_schoolyear ON reportsmedianscore USING btree (schoolyear);


--
-- Name: idx_reportsmedianscore_subscoredefinitionname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsmedianscore_subscoredefinitionname ON reportsmedianscore USING btree (subscoredefinitionname);


--
-- Name: idx_reportspercentbylevel_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportspercentbylevel_assessmentprogramid ON reportspercentbylevel USING btree (assessmentprogramid);


--
-- Name: idx_reportspercentbylevel_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportspercentbylevel_contentareaid ON reportspercentbylevel USING btree (contentareaid);


--
-- Name: idx_reportspercentbylevel_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportspercentbylevel_gradeid ON reportspercentbylevel USING btree (gradeid);


--
-- Name: idx_reportspercentbylevel_level; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportspercentbylevel_level ON reportspercentbylevel USING btree (level);


--
-- Name: idx_reportspercentbylevel_organizationid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportspercentbylevel_organizationid ON reportspercentbylevel USING btree (organizationid);


--
-- Name: idx_reportspercentbylevel_percent; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportspercentbylevel_percent ON reportspercentbylevel USING btree (percent);


--
-- Name: idx_reportspercentbylevel_schoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportspercentbylevel_schoolyear ON reportspercentbylevel USING btree (schoolyear);


--
-- Name: idx_reportsubscores_rating; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsubscores_rating ON reportsubscores USING btree (rating);


--
-- Name: idx_reportsubscores_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsubscores_studentid ON reportsubscores USING btree (studentid);


--
-- Name: idx_reportsubscores_studentreportid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsubscores_studentreportid ON reportsubscores USING btree (studentreportid);


--
-- Name: idx_reportsubscores_subscoredefinitionname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsubscores_subscoredefinitionname ON reportsubscores USING btree (subscoredefinitionname);


--
-- Name: idx_reportsubscores_subscorerawscore; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsubscores_subscorerawscore ON reportsubscores USING btree (subscorerawscore);


--
-- Name: idx_reportsubscores_subscorescalescore; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reportsubscores_subscorescalescore ON reportsubscores USING btree (subscorescalescore);


--
-- Name: idx_reporttestlevelsubscores_createddate; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reporttestlevelsubscores_createddate ON reporttestlevelsubscores USING btree (createddate);


--
-- Name: idx_reporttestlevelsubscores_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reporttestlevelsubscores_studentid ON reporttestlevelsubscores USING btree (studentid);


--
-- Name: idx_reporttestlevelsubscores_studentreportid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reporttestlevelsubscores_studentreportid ON reporttestlevelsubscores USING btree (studentreportid);


--
-- Name: idx_reporttestlevelsubscores_subscoredefinitionname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reporttestlevelsubscores_subscoredefinitionname ON reporttestlevelsubscores USING btree (subscoredefinitionname);


--
-- Name: idx_reporttestlevelsubscores_subscorerawscore; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reporttestlevelsubscores_subscorerawscore ON reporttestlevelsubscores USING btree (subscorerawscore);


--
-- Name: idx_reporttestlevelsubscores_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_reporttestlevelsubscores_testid ON reporttestlevelsubscores USING btree (testid);


--
-- Name: idx_roster_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_roster_activeflag ON roster USING btree (activeflag) WHERE (activeflag IS TRUE);


--
-- Name: idx_roster_courseenrollmentstatusid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_roster_courseenrollmentstatusid ON roster USING btree (courseenrollmentstatusid);


--
-- Name: idx_roster_coursesectionname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_roster_coursesectionname ON roster USING btree (coursesectionname);


--
-- Name: idx_roster_currentschoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_roster_currentschoolyear ON roster USING btree (currentschoolyear);


--
-- Name: idx_roster_id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_roster_id ON roster USING btree (id);


--
-- Name: idx_roster_restrictionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_roster_restrictionid ON roster USING btree (restrictionid);


--
-- Name: idx_roster_statecourseid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_roster_statecourseid ON roster USING btree (statecourseid);


--
-- Name: idx_roster_statecoursesid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_roster_statecoursesid ON roster USING btree (statecoursesid);


--
-- Name: idx_roster_statesubjectareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_roster_statesubjectareaid ON roster USING btree (statesubjectareaid);


--
-- Name: idx_roster_teacherid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_roster_teacherid ON roster USING btree (teacherid);


--
-- Name: idx_rubricinfo_rubriccategoryid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_rubricinfo_rubriccategoryid ON rubricinfo USING btree (rubriccategoryid);


--
-- Name: idx_signedaccommodation_accessibilityfileid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_signedaccommodation_accessibilityfileid ON signedaccommodation USING btree (accessibilityfileid);


--
-- Name: idx_signedaccommodation_contentgroupid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_signedaccommodation_contentgroupid ON signedaccommodation USING btree (contentgroupid);


--
-- Name: idx_specialcircumstance_assessmentprogram; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_specialcircumstance_assessmentprogram ON specialcircumstance USING btree (assessmentprogramid);


--
-- Name: idx_specialcircumstance_cedscode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_specialcircumstance_cedscode ON specialcircumstance USING btree (cedscode);


--
-- Name: idx_specialcircumstance_specialcircumstancetype; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_specialcircumstance_specialcircumstancetype ON specialcircumstance USING btree (specialcircumstancetype);


--
-- Name: idx_stage_predecessor; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_stage_predecessor ON stage USING btree (predecessorid);


--
-- Name: idx_statespecialcircumstance_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_statespecialcircumstance_activeflag ON statespecialcircumstance USING btree (activeflag);


--
-- Name: idx_statespecialcircumstance_requireconfirmation; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_statespecialcircumstance_requireconfirmation ON statespecialcircumstance USING btree (requireconfirmation);


--
-- Name: idx_statespecialcircumstance_specialcircumstanceid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_statespecialcircumstance_specialcircumstanceid ON statespecialcircumstance USING btree (specialcircumstanceid);


--
-- Name: idx_statespecialcircumstance_stateid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_statespecialcircumstance_stateid ON statespecialcircumstance USING btree (stateid);


--
-- Name: idx_stimulusvariantattachment_filetype; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_stimulusvariantattachment_filetype ON stimulusvariantattachment USING btree (filetype);


--
-- Name: idx_stimulusvariantattachment_stimulusvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_stimulusvariantattachment_stimulusvariantid ON stimulusvariantattachment USING btree (stimulusvariantid);


--
-- Name: idx_student_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_activeflag ON student USING btree (activeflag) WHERE (activeflag IS TRUE);


--
-- Name: idx_student_comprehensiverace; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_comprehensiverace ON student USING btree (comprehensiverace);


--
-- Name: idx_student_dateofbirth; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_dateofbirth ON student USING btree (dateofbirth);


--
-- Name: idx_student_firstlanguage; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_firstlanguage ON student USING btree (firstlanguage);


--
-- Name: idx_student_gender; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_gender ON student USING btree (gender);


--
-- Name: idx_student_generationcode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_generationcode ON student USING btree (generationcode);


--
-- Name: idx_student_legalfirstname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_legalfirstname ON student USING btree (legalfirstname);


--
-- Name: idx_student_legallastname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_legallastname ON student USING btree (legallastname);


--
-- Name: idx_student_legalmiddlename; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_legalmiddlename ON student USING btree (legalmiddlename);


--
-- Name: idx_student_password; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_password ON student USING btree (password);


--
-- Name: idx_student_primarydisabilitycode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_primarydisabilitycode ON student USING btree (primarydisabilitycode);


--
-- Name: idx_student_profilestatus; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_profilestatus ON student USING btree (profilestatus);


--
-- Name: idx_student_stateid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_stateid ON student USING btree (stateid);


--
-- Name: idx_student_statestudentidentifier; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_student_statestudentidentifier ON student USING btree (statestudentidentifier);


--
-- Name: idx_studentadaptivetestfinaltheta_studentstestid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentadaptivetestfinaltheta_studentstestid ON studentadaptivetestfinaltheta USING btree (studentstestid);


--
-- Name: idx_studentadaptivetestfinaltheta_testconstructid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentadaptivetestfinaltheta_testconstructid ON studentadaptivetestfinaltheta USING btree (testconstructid);


--
-- Name: idx_studentadaptivetestthetastatus_studentstestid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentadaptivetestthetastatus_studentstestid ON studentadaptivetestthetastatus USING btree (studentstestid);


--
-- Name: idx_studentassessmentprogram_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentassessmentprogram_activeflag ON studentassessmentprogram USING btree (activeflag) WHERE (activeflag IS TRUE);


--
-- Name: idx_studentassessmentprogram_assessmentprogram; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentassessmentprogram_assessmentprogram ON studentassessmentprogram USING btree (assessmentprogramid);


--
-- Name: idx_studentassessmentprogram_student; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentassessmentprogram_student ON studentassessmentprogram USING btree (studentid);


--
-- Name: idx_studentprofileitemattributevalue_lselectedvalue; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentprofileitemattributevalue_lselectedvalue ON studentprofileitemattributevalue USING btree (lower(selectedvalue));


--
-- Name: idx_studentprofileitemattributevalue_pianacid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentprofileitemattributevalue_pianacid ON studentprofileitemattributevalue USING btree (profileitemattributenameattributecontainerid);


--
-- Name: idx_studentprofileitemattributevalue_selectedvalue; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentprofileitemattributevalue_selectedvalue ON studentprofileitemattributevalue USING btree (selectedvalue);


--
-- Name: idx_studentprofileitemattributevalue_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentprofileitemattributevalue_studentid ON studentprofileitemattributevalue USING btree (studentid);


--
-- Name: idx_studentreport_aggregates; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_aggregates ON studentreport USING btree (aggregates);


--
-- Name: idx_studentreport_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_assessmentprogramid ON studentreport USING btree (assessmentprogramid);


--
-- Name: idx_studentreport_attendanceschoolid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_attendanceschoolid ON studentreport USING btree (attendanceschoolid);


--
-- Name: idx_studentreport_combinedlevel; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_combinedlevel ON studentreport USING btree (combinedlevel);


--
-- Name: idx_studentreport_combinedlevelid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_combinedlevelid ON studentreport USING btree (combinedlevelid);


--
-- Name: idx_studentreport_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_contentareaid ON studentreport USING btree (contentareaid);


--
-- Name: idx_studentreport_districtid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_districtid ON studentreport USING btree (districtid);


--
-- Name: idx_studentreport_enrollmentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_enrollmentid ON studentreport USING btree (enrollmentid);


--
-- Name: idx_studentreport_filepath; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_filepath ON studentreport USING btree (filepath);


--
-- Name: idx_studentreport_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_gradeid ON studentreport USING btree (gradeid);


--
-- Name: idx_studentreport_incompletestatus; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_incompletestatus ON studentreport USING btree (incompletestatus);


--
-- Name: idx_studentreport_levelid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_levelid ON studentreport USING btree (levelid);


--
-- Name: idx_studentreport_mdptlevelid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_mdptlevelid ON studentreport USING btree (mdptlevelid);


--
-- Name: idx_studentreport_schoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_schoolyear ON studentreport USING btree (schoolyear);


--
-- Name: idx_studentreport_stateid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_stateid ON studentreport USING btree (stateid);


--
-- Name: idx_studentreport_status; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_status ON studentreport USING btree (status);


--
-- Name: idx_studentreport_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_studentid ON studentreport USING btree (studentid);


--
-- Name: idx_studentreport_studentperformancetestid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_studentperformancetestid ON studentreport USING btree (studentperformancetestid);


--
-- Name: idx_studentreport_studenttest1id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_studenttest1id ON studentreport USING btree (studenttest1id);


--
-- Name: idx_studentreport_studenttest2id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_studenttest2id ON studentreport USING btree (studenttest2id);


--
-- Name: idx_studentreport_studenttest3id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_studenttest3id ON studentreport USING btree (studenttest3id);


--
-- Name: idx_studentreport_studenttest4id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreport_studenttest4id ON studentreport USING btree (studenttest4id);


--
-- Name: idx_studentreporttestscores_studentreportid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentreporttestscores_studentreportid ON studentreporttestscores USING btree (studentreportid);


--
-- Name: idx_studentresponsescore_raterorder; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentresponsescore_raterorder ON studentresponsescore USING btree (raterorder);


--
-- Name: idx_studentsadaptivetestsections_studentstestid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsadaptivetestsections_studentstestid ON studentsadaptivetestsections USING btree (studentstestid);


--
-- Name: idx_studentsadaptivetestsections_testpartid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsadaptivetestsections_testpartid ON studentsadaptivetestsections USING btree (testpartid);


--
-- Name: idx_studentsadaptivetestsections_tscontainerid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsadaptivetestsections_tscontainerid ON studentsadaptivetestsections USING btree (testsectioncontainerid);


--
-- Name: idx_studentsassessments_assessmentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsassessments_assessmentid ON studentsassessments USING btree (assessmentid);


--
-- Name: idx_studentsassessments_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsassessments_contentareaid ON studentsassessments USING btree (contentareaid);


--
-- Name: idx_studentsassessments_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsassessments_studentid ON studentsassessments USING btree (studentid);


--
-- Name: idx_studentspecialcircumstance_specialcircumstanceid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentspecialcircumstance_specialcircumstanceid ON studentspecialcircumstance USING btree (specialcircumstanceid);


--
-- Name: idx_studentspecialcircumstance_studenttestid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentspecialcircumstance_studenttestid ON studentspecialcircumstance USING btree (studenttestid);


--
-- Name: idx_studentsresponseparameters_studentstestsectionsid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsresponseparameters_studentstestsectionsid ON studentsresponseparameters USING btree (studentstestsectionsid);


--
-- Name: idx_studentsresponseparameters_studentstestsid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsresponseparameters_studentstestsid ON studentsresponseparameters USING btree (studentstestsid);


--
-- Name: idx_studentsresponseparameters_taskvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsresponseparameters_taskvariantid ON studentsresponseparameters USING btree (taskvariantid);


--
-- Name: idx_studentsresponses_studentstests; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsresponses_studentstests ON studentsresponses USING btree (studentstestsid);


--
-- Name: idx_studentsresponses_test; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentsresponses_test ON studentsresponses USING btree (testid, testsectionid);


--
-- Name: idx_studentstests_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstests_activeflag ON studentstests USING btree (activeflag);


--
-- Name: idx_studentstests_enrollment; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstests_enrollment ON studentstests USING btree (enrollmentid);


--
-- Name: idx_studentstests_interimtheta; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstests_interimtheta ON studentstests USING btree (interimtheta);


--
-- Name: idx_studentstests_modifieddate; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstests_modifieddate ON studentstests USING btree (modifieddate);


--
-- Name: idx_studentstests_previousstudentstestid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstests_previousstudentstestid ON studentstests USING btree (previousstudentstestid);


--
-- Name: idx_studentstests_status; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstests_status ON studentstests USING btree (status);


--
-- Name: idx_studentstests_student; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstests_student ON studentstests USING btree (studentid);


--
-- Name: idx_studentstests_test; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstests_test ON studentstests USING btree (testid);


--
-- Name: idx_studentstests_testcollection; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstests_testcollection ON studentstests USING btree (testcollectionid);


--
-- Name: idx_studentstests_testsession; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstests_testsession ON studentstests USING btree (testsessionid);


--
-- Name: idx_studentstestsections_studentstestid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstestsections_studentstestid ON studentstestsections USING btree (studentstestid);


--
-- Name: idx_studentstestsections_testpartid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstestsections_testpartid ON studentstestsections USING btree (testpartid);


--
-- Name: idx_studentstestsections_testsectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstestsections_testsectionid ON studentstestsections USING btree (testsectionid);


--
-- Name: idx_studentstestshistory_action; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstestshistory_action ON studentstestshistory USING btree (action);


--
-- Name: idx_studentstestshistory_studentstestsid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studentstestshistory_studentstestsid ON studentstestshistory USING btree (studentstestsid);


--
-- Name: idx_studenttracker_contentarea; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studenttracker_contentarea ON studenttracker USING btree (contentareaid);


--
-- Name: idx_studenttracker_status; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studenttracker_status ON studenttracker USING btree (status);


--
-- Name: idx_studenttracker_student; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studenttracker_student ON studenttracker USING btree (studentid);


--
-- Name: idx_studenttrackerband_complexityband; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studenttrackerband_complexityband ON studenttrackerband USING btree (complexitybandid);


--
-- Name: idx_studenttrackerband_essentialelementid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studenttrackerband_essentialelementid ON studenttrackerband USING btree (essentialelementid);


--
-- Name: idx_studenttrackerband_studenttracker; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studenttrackerband_studenttracker ON studenttrackerband USING btree (studenttrackerid);


--
-- Name: idx_studenttrackerband_testsession; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_studenttrackerband_testsession ON studenttrackerband USING btree (testsessionid);


--
-- Name: idx_subscoreframework_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoreframework_assessmentprogramid ON subscoreframework USING btree (assessmentprogramid);


--
-- Name: idx_subscoreframework_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoreframework_gradeid ON subscoreframework USING btree (gradeid);


--
-- Name: idx_subscoreframework_subjectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoreframework_subjectid ON subscoreframework USING btree (subjectid);


--
-- Name: idx_subscoresdescription_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresdescription_assessmentprogramid ON subscoresdescription USING btree (assessmentprogramid);


--
-- Name: idx_subscoresdescription_report; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresdescription_report ON subscoresdescription USING btree (report);


--
-- Name: idx_subscoresdescription_schoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresdescription_schoolyear ON subscoresdescription USING btree (schoolyear);


--
-- Name: idx_subscoresdescription_sectionlinebelowflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresdescription_sectionlinebelowflag ON subscoresdescription USING btree (sectionlinebelowflag);


--
-- Name: idx_subscoresdescription_subjectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresdescription_subjectid ON subscoresdescription USING btree (subjectid);


--
-- Name: idx_subscoresdescription_subscoredefinitionname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresdescription_subscoredefinitionname ON subscoresdescription USING btree (subscoredefinitionname);


--
-- Name: idx_subscoresdescription_subscoredisplaysequence; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresdescription_subscoredisplaysequence ON subscoresdescription USING btree (subscoredisplaysequence);


--
-- Name: idx_subscoresdescription_subscorereportdisplayname; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresdescription_subscorereportdisplayname ON subscoresdescription USING btree (subscorereportdisplayname);


--
-- Name: idx_subscoresrawtoscale_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresrawtoscale_assessmentprogramid ON subscoresrawtoscale USING btree (assessmentprogramid);


--
-- Name: idx_subscoresrawtoscale_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresrawtoscale_gradeid ON subscoresrawtoscale USING btree (gradeid);


--
-- Name: idx_subscoresrawtoscale_subjectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_subscoresrawtoscale_subjectid ON subscoresrawtoscale USING btree (subjectid);


--
-- Name: idx_survey_status; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_survey_status ON survey USING btree (status);


--
-- Name: idx_survey_studentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_survey_studentid ON survey USING btree (studentid);


--
-- Name: idx_surveylabel_globalpagenum; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_surveylabel_globalpagenum ON surveylabel USING btree (globalpagenum);


--
-- Name: idx_surveylabel_labelnumber; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_surveylabel_labelnumber ON surveylabel USING btree (labelnumber);


--
-- Name: idx_surveylabel_sectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_surveylabel_sectionid ON surveylabel USING btree (sectionid);


--
-- Name: idx_surveypagestatus_surveyid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_surveypagestatus_surveyid ON surveypagestatus USING btree (surveyid);


--
-- Name: idx_surveypagestatus_surveyid_globalpagenum; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_surveypagestatus_surveyid_globalpagenum ON surveypagestatus USING btree (surveyid, globalpagenum);


--
-- Name: idx_tasksubtype_tasktypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_tasksubtype_tasktypeid ON tasksubtype USING btree (tasktypeid);


--
-- Name: idx_taskvariant_contextstimulusid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariant_contextstimulusid ON taskvariant USING btree (contextstimulusid);


--
-- Name: idx_taskvariant_externalid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariant_externalid ON taskvariant USING btree (externalid);


--
-- Name: idx_taskvariant_tasklayoutformatid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariant_tasklayoutformatid ON taskvariant USING btree (tasklayoutformatid);


--
-- Name: idx_taskvariant_tasklayoutid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariant_tasklayoutid ON taskvariant USING btree (tasklayoutid);


--
-- Name: idx_taskvariant_tasksubtypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariant_tasksubtypeid ON taskvariant USING btree (tasksubtypeid);


--
-- Name: idx_taskvariant_tasktypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariant_tasktypeid ON taskvariant USING btree (tasktypeid);


--
-- Name: idx_taskvariantlearningmapnode_foilid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariantlearningmapnode_foilid ON taskvariantlearningmapnode USING btree (foilid);


--
-- Name: idx_taskvariantlearningmapnode_nodetypecodeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariantlearningmapnode_nodetypecodeid ON taskvariantlearningmapnode USING btree (nodetypecodeid);


--
-- Name: idx_taskvariantlearningmapnode_nodeweightid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariantlearningmapnode_nodeweightid ON taskvariantlearningmapnode USING btree (nodeweightid);


--
-- Name: idx_taskvariantlearningmapnode_taskvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariantlearningmapnode_taskvariantid ON taskvariantlearningmapnode USING btree (taskvariantid);


--
-- Name: idx_taskvariantlearningmapnode_tvid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariantlearningmapnode_tvid ON taskvariantlearningmapnode USING btree (taskvariantid);


--
-- Name: idx_taskvariantsfoils_foilid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariantsfoils_foilid ON taskvariantsfoils USING btree (foilid);


--
-- Name: idx_taskvariantsfoils_taskvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariantsfoils_taskvariantid ON taskvariantsfoils USING btree (taskvariantid);


--
-- Name: idx_taskvariantsstimulusvariants_stimulusvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariantsstimulusvariants_stimulusvariantid ON taskvariantsstimulusvariants USING btree (stimulusvariantid);


--
-- Name: idx_taskvariantsstimulusvariants_taskvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_taskvariantsstimulusvariants_taskvariantid ON taskvariantsstimulusvariants USING btree (taskvariantid);


--
-- Name: idx_test_avglinkagelevel; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_test_avglinkagelevel ON test USING btree (avglinkagelevel);


--
-- Name: idx_test_contentarea; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_test_contentarea ON test USING btree (contentareaid);


--
-- Name: idx_test_externalid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_test_externalid ON test USING btree (externalid);


--
-- Name: idx_test_gradeband; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_test_gradeband ON test USING btree (gradebandid);


--
-- Name: idx_test_gradecourse; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_test_gradecourse ON test USING btree (gradecourseid);


--
-- Name: idx_test_qccomplete; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_test_qccomplete ON test USING btree (qccomplete);


--
-- Name: idx_test_status; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_test_status ON test USING btree (status);


--
-- Name: idx_test_testspecification; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_test_testspecification ON test USING btree (testspecificationid);


--
-- Name: idx_testcollection_contentarea; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcollection_contentarea ON testcollection USING btree (contentareaid);


--
-- Name: idx_testcollection_course; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcollection_course ON testcollection USING btree (courseid);


--
-- Name: idx_testcollection_externalid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcollection_externalid ON testcollection USING btree (externalid);


--
-- Name: idx_testcollection_gradeband; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcollection_gradeband ON testcollection USING btree (gradebandid);


--
-- Name: idx_testcollection_gradecourse; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcollection_gradecourse ON testcollection USING btree (gradecourseid);


--
-- Name: idx_testcollection_phasetype; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcollection_phasetype ON testcollection USING btree (phasetype);


--
-- Name: idx_testcollection_pooltype; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcollection_pooltype ON testcollection USING btree (pooltype);


--
-- Name: idx_testcollection_stage; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcollection_stage ON testcollection USING btree (stageid);


--
-- Name: idx_testcollectionstests_testcollectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcollectionstests_testcollectionid ON testcollectionstests USING btree (testcollectionid);


--
-- Name: idx_testcollectionstests_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcollectionstests_testid ON testcollectionstests USING btree (testid);


--
-- Name: idx_testconstruct_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testconstruct_testid ON testconstruct USING btree (testid);


--
-- Name: idx_testcutscores_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcutscores_assessmentprogramid ON testcutscores USING btree (assessmentprogramid);


--
-- Name: idx_testcutscores_gradeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcutscores_gradeid ON testcutscores USING btree (gradeid);


--
-- Name: idx_testcutscores_subjectid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testcutscores_subjectid ON testcutscores USING btree (subjectid);


--
-- Name: idx_testfeedbackrules_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testfeedbackrules_testid ON testfeedbackrules USING btree (testid);


--
-- Name: idx_testingprogram_assessmentprogram; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testingprogram_assessmentprogram ON testingprogram USING btree (assessmentprogramid);


--
-- Name: idx_testingprogram_programabbr; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testingprogram_programabbr ON testingprogram USING btree (programabbr);


--
-- Name: idx_testlet_displayviewid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testlet_displayviewid ON testlet USING btree (displayviewid);


--
-- Name: idx_testlet_questionviewid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testlet_questionviewid ON testlet USING btree (questionviewid);


--
-- Name: idx_testlet_testletlayoutid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testlet_testletlayoutid ON testlet USING btree (testletlayoutid);


--
-- Name: idx_testletstimulusvariants_stimulusvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testletstimulusvariants_stimulusvariantid ON testletstimulusvariants USING btree (stimulusvariantid);


--
-- Name: idx_testletstimulusvariants_testletid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testletstimulusvariants_testletid ON testletstimulusvariants USING btree (testletid);


--
-- Name: idx_testpanel_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanel_activeflag ON testpanel USING btree (activeflag);


--
-- Name: idx_testpanel_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanel_assessmentprogramid ON testpanel USING btree (assessmentprogramid);


--
-- Name: idx_testpanel_contentareaid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanel_contentareaid ON testpanel USING btree (contentareaid);


--
-- Name: idx_testpanel_gradecourseid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanel_gradecourseid ON testpanel USING btree (gradecourseid);


--
-- Name: idx_testpanelscoring_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelscoring_activeflag ON testpanelscoring USING btree (activeflag);


--
-- Name: idx_testpanelscoring_externaltaskvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelscoring_externaltaskvariantid ON testpanelscoring USING btree (externaltaskvariantid);


--
-- Name: idx_testpanelstage_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstage_activeflag ON testpanelstage USING btree (activeflag);


--
-- Name: idx_testpanelstage_stageid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstage_stageid ON testpanelstage USING btree (stageid);


--
-- Name: idx_testpanelstage_testpanelid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstage_testpanelid ON testpanelstage USING btree (testpanelid);


--
-- Name: idx_testpanelstagemapping_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstagemapping_activeflag ON testpanelstagemapping USING btree (activeflag);


--
-- Name: idx_testpanelstagemapping_externaltestid1; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstagemapping_externaltestid1 ON testpanelstagemapping USING btree (externaltestid1);


--
-- Name: idx_testpanelstagemapping_externaltestid2; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstagemapping_externaltestid2 ON testpanelstagemapping USING btree (externaltestid2);


--
-- Name: idx_testpanelstagemapping_externaltestid3; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstagemapping_externaltestid3 ON testpanelstagemapping USING btree (externaltestid3);


--
-- Name: idx_testpanelstagemapping_interimtheta1; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstagemapping_interimtheta1 ON testpanelstagemapping USING btree (interimtheta1);


--
-- Name: idx_testpanelstagemapping_interimtheta2; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstagemapping_interimtheta2 ON testpanelstagemapping USING btree (interimtheta2);


--
-- Name: idx_testpanelstagemapping_testpanelstageid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstagemapping_testpanelstageid ON testpanelstagemapping USING btree (testpanelstageid);


--
-- Name: idx_testpanelstagetestcollection_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstagetestcollection_activeflag ON testpanelstagetestcollection USING btree (activeflag);


--
-- Name: idx_testpanelstagetestcollection_externaltestcollectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstagetestcollection_externaltestcollectionid ON testpanelstagetestcollection USING btree (externaltestcollectionid);


--
-- Name: idx_testpanelstagetestcollection_testpanelstageid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpanelstagetestcollection_testpanelstageid ON testpanelstagetestcollection USING btree (testpanelstageid);


--
-- Name: idx_testpart_partnumber; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpart_partnumber ON testpart USING btree (partnumber);


--
-- Name: idx_testpart_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpart_testid ON testpart USING btree (testid);


--
-- Name: idx_testpart_testsectioncontainerid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpart_testsectioncontainerid ON testpart USING btree (testsectioncontainerid);


--
-- Name: idx_testpriorparameter_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpriorparameter_testid ON testpriorparameter USING btree (testid);


--
-- Name: idx_testpriorparameter_xtestconstructid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpriorparameter_xtestconstructid ON testpriorparameter USING btree (xtestconstructid);


--
-- Name: idx_testpriorparameter_ytestconstructid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testpriorparameter_ytestconstructid ON testpriorparameter USING btree (ytestconstructid);


--
-- Name: idx_testsection_taskdeliveryruleid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsection_taskdeliveryruleid ON testsection USING btree (taskdeliveryruleid);


--
-- Name: idx_testsection_test; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsection_test ON testsection USING btree (testid);


--
-- Name: idx_testsection_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsection_testid ON testsection USING btree (testid);


--
-- Name: idx_testsection_testsectioncontainerid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsection_testsectioncontainerid ON testsection USING btree (testsectioncontainerid);


--
-- Name: idx_testsection_toolsusageid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsection_toolsusageid ON testsection USING btree (toolsusageid);


--
-- Name: idx_testsectioncontainer_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsectioncontainer_testid ON testsectioncontainer USING btree (testid);


--
-- Name: idx_testsectioncontainerconstruct_idparametername; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsectioncontainerconstruct_idparametername ON testsectioncontainerconstruct USING btree (itemdiscriminationparametername);


--
-- Name: idx_testsectioncontainerconstruct_testconstructid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsectioncontainerconstruct_testconstructid ON testsectioncontainerconstruct USING btree (testconstructid);


--
-- Name: idx_testsectioncontainerconstruct_tscontainerid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsectioncontainerconstruct_tscontainerid ON testsectioncontainerconstruct USING btree (testsectioncontainerid);


--
-- Name: idx_testsectioncontainerthetanode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsectioncontainerthetanode ON testsectioncontainerthetanode USING btree (testsectioncontainerid);


--
-- Name: idx_testsectionresource_stimulusvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsectionresource_stimulusvariantid ON testsectionresource USING btree (stimulusvariantid);


--
-- Name: idx_testsectionresource_testsectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsectionresource_testsectionid ON testsectionresource USING btree (testsectionid);


--
-- Name: idx_testsectionstaskvariants_taskvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsectionstaskvariants_taskvariantid ON testsectionstaskvariants USING btree (taskvariantid);


--
-- Name: idx_testsectionstaskvariants_testletid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsectionstaskvariants_testletid ON testsectionstaskvariants USING btree (testletid);


--
-- Name: idx_testsectionstaskvariants_testsectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsectionstaskvariants_testsectionid ON testsectionstaskvariants USING btree (testsectionid);


--
-- Name: idx_testselectionstatistic_testsectioncontainerthetanodeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testselectionstatistic_testsectioncontainerthetanodeid ON testselectionstatistic USING btree (testsectioncontainerthetanodeid);


--
-- Name: idx_testselectionstatistic_testsectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testselectionstatistic_testsectionid ON testselectionstatistic USING btree (testsectionid);


--
-- Name: idx_testsession_attendanceschoolid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_attendanceschoolid ON testsession USING btree (attendanceschoolid);


--
-- Name: idx_testsession_gradecourseid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_gradecourseid ON testsession USING btree (gradecourseid);


--
-- Name: idx_testsession_name; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_name ON testsession USING btree (name);


--
-- Name: idx_testsession_operationaltestwindowid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_operationaltestwindowid ON testsession USING btree (operationaltestwindowid);


--
-- Name: idx_testsession_rosterid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_rosterid ON testsession USING btree (rosterid);


--
-- Name: idx_testsession_schoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_schoolyear ON testsession USING btree (schoolyear);


--
-- Name: idx_testsession_source; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_source ON testsession USING btree (source);


--
-- Name: idx_testsession_stageid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_stageid ON testsession USING btree (stageid);


--
-- Name: idx_testsession_status; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_status ON testsession USING btree (status);


--
-- Name: idx_testsession_subjectarea; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_subjectarea ON testsession USING btree (subjectareaid);


--
-- Name: idx_testsession_test; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_test ON testsession USING btree (testid);


--
-- Name: idx_testsession_testcollection; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_testcollection ON testsession USING btree (testcollectionid);


--
-- Name: idx_testsession_testpanelid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_testpanelid ON testsession USING btree (testpanelid);


--
-- Name: idx_testsession_testtypeid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_testtypeid ON testsession USING btree (testtypeid);


--
-- Name: idx_testsession_windowexpirydate; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testsession_windowexpirydate ON testsession USING btree (windowexpirydate);


--
-- Name: idx_testspecification_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testspecification_activeflag ON testspecification USING btree (activeflag);


--
-- Name: idx_testspecification_contentpool; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testspecification_contentpool ON testspecification USING btree (contentpool);


--
-- Name: idx_testspecification_externalid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testspecification_externalid ON testspecification USING btree (externalid);


--
-- Name: idx_testspecification_phase; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testspecification_phase ON testspecification USING btree (phase);


--
-- Name: idx_testtype_testtypecode; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testtype_testtypecode ON testtype USING btree (testtypecode);


--
-- Name: idx_testtypesubjectarea_subjectarea; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testtypesubjectarea_subjectarea ON testtypesubjectarea USING btree (subjectareaid);


--
-- Name: idx_testtypesubjectarea_testtype; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_testtypesubjectarea_testtype ON testtypesubjectarea USING btree (testtypeid);


--
-- Name: idx_textaccommodation_contentgroupid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_textaccommodation_contentgroupid ON textaccommodation USING btree (contentgroupid);


--
-- Name: idx_userassessmentprogram_aartuser; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_userassessmentprogram_aartuser ON userassessmentprogram USING btree (aartuserid);


--
-- Name: idx_userassessmentprogram_assessmentprogram; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_userassessmentprogram_assessmentprogram ON userassessmentprogram USING btree (assessmentprogramid);


--
-- Name: idx_usermodule_enrollmentstatusid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usermodule_enrollmentstatusid ON usermodule USING btree (enrollmentstatusid);


--
-- Name: idx_usermodule_moduleid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usermodule_moduleid ON usermodule USING btree (moduleid);


--
-- Name: idx_usermodule_stateid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usermodule_stateid ON usermodule USING btree (stateid);


--
-- Name: idx_usermodule_userid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usermodule_userid ON usermodule USING btree (userid);


--
-- Name: idx_userorganizationsgroups_groupid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_userorganizationsgroups_groupid ON userorganizationsgroups USING btree (groupid);


--
-- Name: idx_userorganizationsgroups_userorganizationid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_userorganizationsgroups_userorganizationid ON userorganizationsgroups USING btree (userorganizationid);


--
-- Name: idx_userpasswordreset_aart_user_id; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_userpasswordreset_aart_user_id ON userpasswordreset USING btree (aart_user_id);


--
-- Name: idx_userpdtrainingdetail_currentschoolyear; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_userpdtrainingdetail_currentschoolyear ON userpdtrainingdetail USING btree (currentschoolyear);


--
-- Name: idx_userpdtrainingdetail_user; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_userpdtrainingdetail_user ON userpdtrainingdetail USING btree (userid);


--
-- Name: idx_usersecurityagreement_aartuser; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usersecurityagreement_aartuser ON usersecurityagreement USING btree (aartuserid);


--
-- Name: idx_usersecurityagreement_aartuserid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usersecurityagreement_aartuserid ON usersecurityagreement USING btree (aartuserid);


--
-- Name: idx_usersecurityagreement_assessmentprogram; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usersecurityagreement_assessmentprogram ON usersecurityagreement USING btree (assessmentprogramid);


--
-- Name: idx_usersecurityagreement_assessmentprogramid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usersecurityagreement_assessmentprogramid ON usersecurityagreement USING btree (assessmentprogramid);


--
-- Name: idx_usersorganizations_aartuserid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usersorganizations_aartuserid ON usersorganizations USING btree (aartuserid);


--
-- Name: idx_usersorganizations_organizationid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usersorganizations_organizationid ON usersorganizations USING btree (organizationid);


--
-- Name: idx_usertest_activeflag; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usertest_activeflag ON usertest USING btree (activeflag);


--
-- Name: idx_usertest_testid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usertest_testid ON usertest USING btree (testid);


--
-- Name: idx_usertest_usermoduleid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usertest_usermoduleid ON usertest USING btree (usermoduleid);


--
-- Name: idx_usertestresponse_foilid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usertestresponse_foilid ON usertestresponse USING btree (foilid);


--
-- Name: idx_usertestresponse_taskvariantid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usertestresponse_taskvariantid ON usertestresponse USING btree (taskvariantid);


--
-- Name: idx_usertestresponse_testsectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usertestresponse_testsectionid ON usertestresponse USING btree (testsectionid);


--
-- Name: idx_usertestresponse_usertestsectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usertestresponse_usertestsectionid ON usertestresponse USING btree (usertestsectionid);


--
-- Name: idx_usertestsection_testsectionid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usertestsection_testsectionid ON usertestsection USING btree (testsectionid);


--
-- Name: idx_usertestsection_usertestid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX idx_usertestsection_usertestid ON usertestsection USING btree (usertestid);


--
-- Name: student_composite_index; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX student_composite_index ON studentprofileitemattributevalue USING btree (studentid, profileitemattributenameattributecontainerid);


--
-- Name: studentauditstudentid; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX studentauditstudentid ON studentaudit USING btree (studentid);


--
-- Name: uk_content_area_name_idx; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX uk_content_area_name_idx ON contentarea USING btree (lower((name)::text));


--
-- Name: useraudit_userid_logouttime_idx; Type: INDEX; Schema: public; Owner: aart; Tablespace: 
--

CREATE INDEX useraudit_userid_logouttime_idx ON useraudit USING btree (userid, logouttime);


--
-- Name: _RETURN; Type: RULE; Schema: public; Owner: aart
--

CREATE RULE "_RETURN" AS ON SELECT TO answered_item_summary_by_node DO INSTEAD SELECT st.id AS students_tests_id, st.studentid AS student_id, st.testid AS test_id, st.testcollectionid AS test_collection_id, tvln.nodecode AS node_key, cfd.contentcode AS content_framework_detail_code, count(DISTINCT tvf.taskvariantid) AS no_of_answered_items FROM studentsresponses_aart sr, taskvariantsfoils tvf, taskvariantlearningmapnode tvln, taskvariantcontentframeworkdetail tvcfd, contentframeworkdetail cfd, studentstests st WHERE (((((((sr.studentstestsid = st.id) AND (tvcfd.contentframeworkdetailid = cfd.id)) AND (tvcfd.isprimary = true)) AND (tvcfd.taskvariantid = tvf.taskvariantid)) AND (sr.taskvariantid = tvf.taskvariantid)) AND (tvf.taskvariantid = tvln.taskvariantid)) AND ((tvf.foilid = sr.foilid) OR (((((tvf.foilid IS NULL) AND (sr.response IS NOT NULL)) AND (sr.response ~~ '[%]'::text)) AND (btrim(btrim(sr.response, '['::text), ']'::text) ~ similar_escape('(\d+)(,\s*\d+)*'::text, NULL::text))) AND (tvf.foilid = ANY (string_to_integer_array(sr.response)))))) GROUP BY st.id, st.studentid, st.testid, tvln.nodecode, cfd.contentcode;


--
-- Name: _RETURN; Type: RULE; Schema: public; Owner: aart
--

CREATE RULE "_RETURN" AS ON SELECT TO correct_response_summary_by_node DO INSTEAD SELECT st.id AS students_tests_id, st.studentid AS student_id, st.testid AS test_id, st.testcollectionid AS test_collection_id, tvln.nodecode AS node_key, cfd.contentcode AS content_framework_detail_code, count(DISTINCT tvf.foilid) AS no_of_correct_responses, sum(nvl((tvf.responsescore)::bigint)) AS total_raw_score FROM studentsresponses_aart sr, taskvariantsfoils tvf, taskvariantlearningmapnode tvln, taskvariantcontentframeworkdetail tvcfd, contentframeworkdetail cfd, studentstests st WHERE (((((((((sr.studentstestsid = st.id) AND (tvcfd.contentframeworkdetailid = cfd.id)) AND (tvcfd.isprimary = true)) AND (tvcfd.taskvariantid = tvf.taskvariantid)) AND (sr.taskvariantid = tvf.taskvariantid)) AND (tvf.taskvariantid = tvln.taskvariantid)) AND (tvf.foilid = sr.foilid)) AND (tvf.correctresponse IS NOT NULL)) AND (tvf.correctresponse = true)) GROUP BY st.id, st.studentid, st.testid, tvln.nodecode, cfd.contentcode UNION ALL SELECT st.id AS students_tests_id, st.studentid AS student_id, st.testid AS test_id, st.testcollectionid AS test_collection_id, tvln.nodecode AS node_key, cfd.contentcode AS content_framework_detail_code, count(DISTINCT tvf.foilid) AS no_of_correct_responses, sum(nvl((tvf.responsescore)::bigint)) AS total_raw_score FROM studentsresponses_aart sr, taskvariantsfoils tvf, taskvariantlearningmapnode tvln, taskvariantcontentframeworkdetail tvcfd, contentframeworkdetail cfd, studentstests st WHERE (((((((((((((sr.studentstestsid = st.id) AND (tvcfd.contentframeworkdetailid = cfd.id)) AND (tvcfd.isprimary = true)) AND (tvcfd.taskvariantid = tvf.taskvariantid)) AND (sr.taskvariantid = tvf.taskvariantid)) AND (tvf.taskvariantid = tvln.taskvariantid)) AND (tvf.foilid IS NULL)) AND (sr.response IS NOT NULL)) AND (sr.response ~~ '[%]'::text)) AND (btrim(btrim(sr.response, '['::text), ']'::text) ~ similar_escape('(\d+)(,\s*\d+)*'::text, NULL::text))) AND (tvf.foilid = ANY (string_to_integer_array(sr.response)))) AND (tvf.correctresponse IS NOT NULL)) AND (tvf.correctresponse = true)) GROUP BY st.id, st.studentid, st.testid, tvln.nodecode, cfd.contentcode;


--
-- Name: _RETURN; Type: RULE; Schema: public; Owner: aart
--

CREATE RULE "_RETURN" AS ON SELECT TO in_correct_response_summary_by_node DO INSTEAD SELECT st.id AS students_tests_id, st.studentid AS student_id, st.testid AS test_id, st.testcollectionid AS test_collection_id, tvln.nodecode AS node_key, cfd.contentcode AS content_framework_detail_code, count(DISTINCT tvf.foilid) AS no_of_in_correct_responses, sum(nvl((tvf.responsescore)::bigint)) AS total_raw_score FROM studentsresponses_aart sr, taskvariantsfoils tvf, taskvariantlearningmapnode tvln, taskvariantcontentframeworkdetail tvcfd, contentframeworkdetail cfd, studentstests st WHERE ((((((((sr.studentstestsid = st.id) AND (tvcfd.contentframeworkdetailid = cfd.id)) AND (tvcfd.isprimary = true)) AND (tvcfd.taskvariantid = tvf.taskvariantid)) AND (sr.taskvariantid = tvf.taskvariantid)) AND (tvf.taskvariantid = tvln.taskvariantid)) AND (tvf.foilid = sr.foilid)) AND ((tvf.correctresponse IS NULL) OR (tvf.correctresponse = false))) GROUP BY st.id, st.studentid, st.testid, tvln.nodecode, cfd.contentcode UNION ALL SELECT st.id AS students_tests_id, st.studentid AS student_id, st.testid AS test_id, st.testcollectionid AS test_collection_id, tvln.nodecode AS node_key, cfd.contentcode AS content_framework_detail_code, count(DISTINCT tvf.foilid) AS no_of_in_correct_responses, sum(nvl((tvf.responsescore)::bigint)) AS total_raw_score FROM studentsresponses_aart sr, taskvariantsfoils tvf, taskvariantlearningmapnode tvln, taskvariantcontentframeworkdetail tvcfd, contentframeworkdetail cfd, studentstests st WHERE ((((((((((((sr.studentstestsid = st.id) AND (tvcfd.contentframeworkdetailid = cfd.id)) AND (tvcfd.isprimary = true)) AND (tvcfd.taskvariantid = tvf.taskvariantid)) AND (sr.taskvariantid = tvf.taskvariantid)) AND (tvf.taskvariantid = tvln.taskvariantid)) AND (tvf.foilid IS NULL)) AND (sr.response IS NOT NULL)) AND (sr.response ~~ '[%]'::text)) AND (btrim(btrim(sr.response, '['::text), ']'::text) ~ similar_escape('(\d+)(,\s*\d+)*'::text, NULL::text))) AND (tvf.foilid = ANY (string_to_integer_array(sr.response)))) AND ((tvf.correctresponse IS NULL) OR (tvf.correctresponse = false))) GROUP BY st.id, st.studentid, st.testid, tvln.nodecode, cfd.contentcode;


--
-- Name: _RETURN; Type: RULE; Schema: public; Owner: aart
--

CREATE RULE "_RETURN" AS ON SELECT TO total_item_summary_by_node DO INSTEAD SELECT st.id AS students_tests_id, st.studentid AS student_id, st.testid AS test_id, st.testcollectionid AS test_collection_id, tvln.nodecode AS node_key, cfd.contentcode AS content_framework_detail_code, cfd.description AS content_framework_detail_description, count(1) AS total_items_presented, tss.name AS test_session_name FROM studentstests st, category ststat, categorytype metatype, testsection ts, testsectionstaskvariants tstv, taskvariantcontentframeworkdetail tvcfd, contentframeworkdetail cfd, taskvariantlearningmapnode tvln, testsession tss WHERE (((((((((((st.testsessionid = tss.id) AND (tvcfd.contentframeworkdetailid = cfd.id)) AND (tvcfd.isprimary = true)) AND (tvcfd.taskvariantid = tstv.taskvariantid)) AND (st.testid = ts.testid)) AND (tstv.testsectionid = ts.id)) AND (st.status = ststat.id)) AND ((ststat.categorycode)::text <> 'unused'::text)) AND (metatype.id = ststat.categorytypeid)) AND ((metatype.typecode)::text = 'STUDENT_TEST_STATUS'::text)) AND (tstv.taskvariantid = tvln.taskvariantid)) GROUP BY st.id, st.studentid, st.testid, tvln.nodecode, cfd.contentcode, cfd.description, tss.name;


--
-- Name: aartuser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usersorganizations
    ADD CONSTRAINT aartuser_fk FOREIGN KEY (aartuserid) REFERENCES aartuser(id);


--
-- Name: accessibilityfile_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY accessibilityfile
    ADD CONSTRAINT accessibilityfile_fk1 FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id) MATCH FULL;


--
-- Name: accessibilityfile_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY accessibilityfile
    ADD CONSTRAINT accessibilityfile_fk2 FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id) MATCH FULL;


--
-- Name: activity_createduser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY activity
    ADD CONSTRAINT activity_createduser_fk FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: activity_modifieduser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY activity
    ADD CONSTRAINT activity_modifieduser_fk FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: activity_moduleid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY activity
    ADD CONSTRAINT activity_moduleid_fk FOREIGN KEY (moduleid) REFERENCES module(id);


--
-- Name: activity_userid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY activity
    ADD CONSTRAINT activity_userid_fk FOREIGN KEY (userid) REFERENCES aartuser(id);


--
-- Name: assessment_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsassessments
    ADD CONSTRAINT assessment_fk FOREIGN KEY (assessmentid) REFERENCES assessment(id);


--
-- Name: assessment_testingprogramid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY assessment
    ADD CONSTRAINT assessment_testingprogramid_fk FOREIGN KEY (testingprogramid) REFERENCES testingprogram(id);


--
-- Name: assessmentprogramgrades_assessmentprogram_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY assessmentprogramgrades
    ADD CONSTRAINT assessmentprogramgrades_assessmentprogram_fk FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: assessmentstests_assessmentid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY assessmentstestcollections
    ADD CONSTRAINT assessmentstests_assessmentid_fkey FOREIGN KEY (assessmentid) REFERENCES assessment(id);


--
-- Name: assessmentstests_testcollectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY assessmentstestcollections
    ADD CONSTRAINT assessmentstests_testcollectionid_fkey FOREIGN KEY (testcollectionid) REFERENCES testcollection(id);


--
-- Name: attendance_school_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollment
    ADD CONSTRAINT attendance_school_fk FOREIGN KEY (attendanceschoolid) REFERENCES organization(id);


--
-- Name: authority_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restrictionsauthorities
    ADD CONSTRAINT authority_fk FOREIGN KEY (authorityid) REFERENCES authorities(id);


--
-- Name: aypschoolid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollment
    ADD CONSTRAINT aypschoolid_fk FOREIGN KEY (aypschoolid) REFERENCES organization(id);


--
-- Name: batchreportprocessreason_reportprocessid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportprocessreason
    ADD CONSTRAINT batchreportprocessreason_reportprocessid_fkey FOREIGN KEY (reportprocessid) REFERENCES reportprocess(id);


--
-- Name: batchstudenttracker_assessmentprogram_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchstudenttracker
    ADD CONSTRAINT batchstudenttracker_assessmentprogram_fkey FOREIGN KEY (assessmentprogram) REFERENCES assessmentprogram(id);


--
-- Name: batchstudenttracker_contentareaid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchstudenttracker
    ADD CONSTRAINT batchstudenttracker_contentareaid_fkey FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: batchstudenttracker_createduser_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchstudenttracker
    ADD CONSTRAINT batchstudenttracker_createduser_fkey FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: batchstudenttracker_orgid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchstudenttracker
    ADD CONSTRAINT batchstudenttracker_orgid_fkey FOREIGN KEY (orgid) REFERENCES organization(id);


--
-- Name: batchstudenttrackerreason_batchstudenttrackerid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchstudenttrackerreason
    ADD CONSTRAINT batchstudenttrackerreason_batchstudenttrackerid_fkey FOREIGN KEY (batchstudenttrackerid) REFERENCES batchstudenttracker(id);


--
-- Name: batchstudenttrackerreason_gradecourseid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchstudenttrackerreason
    ADD CONSTRAINT batchstudenttrackerreason_gradecourseid_fkey FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: batchstudenttrackerreason_studentid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchstudenttrackerreason
    ADD CONSTRAINT batchstudenttrackerreason_studentid_fkey FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: batchupload_createduser_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchupload
    ADD CONSTRAINT batchupload_createduser_fkey FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: batchupload_uploadtypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchupload
    ADD CONSTRAINT batchupload_uploadtypeid_fkey FOREIGN KEY (uploadtypeid) REFERENCES category(id);


--
-- Name: batchuploadreason_batchuploadid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY batchuploadreason
    ADD CONSTRAINT batchuploadreason_batchuploadid_fkey FOREIGN KEY (batchuploadid) REFERENCES batchupload(id);


--
-- Name: blueprint_contentareaid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY blueprint
    ADD CONSTRAINT blueprint_contentareaid_fkey FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: blueprint_gradebandid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY blueprint
    ADD CONSTRAINT blueprint_gradebandid_fkey FOREIGN KEY (gradebandid) REFERENCES gradeband(id);


--
-- Name: blueprint_gradecourseid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY blueprint
    ADD CONSTRAINT blueprint_gradecourseid_fkey FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: blueprintessentialelements_essentialelementid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY blueprintessentialelements
    ADD CONSTRAINT blueprintessentialelements_essentialelementid_fkey FOREIGN KEY (essentialelementid) REFERENCES contentframeworkdetail(id);


--
-- Name: brailleacc_accessibilityfileid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY brailleaccommodation
    ADD CONSTRAINT brailleacc_accessibilityfileid_fkey FOREIGN KEY (accessibilityfileid) REFERENCES accessibilityfile(id) MATCH FULL;


--
-- Name: brailleacc_contentgroupid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY brailleaccommodation
    ADD CONSTRAINT brailleacc_contentgroupid_fkey FOREIGN KEY (contentgroupid) REFERENCES contentgroup(id) MATCH FULL;


--
-- Name: category_type_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY category
    ADD CONSTRAINT category_type_fk FOREIGN KEY (categorytypeid) REFERENCES categorytype(id);


--
-- Name: ccqscoreid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ccqscoreitem
    ADD CONSTRAINT ccqscoreid_fk FOREIGN KEY (ccqscoreid) REFERENCES ccqscore(id);


--
-- Name: cmstate_comminicationmessageid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY communicationmessageorgassessmentprogram
    ADD CONSTRAINT cmstate_comminicationmessageid_fk FOREIGN KEY (comminicationmessageid) REFERENCES communicationmessage(id) ON DELETE CASCADE;


--
-- Name: cmstate_comminicationmessageid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY communicationmessagestate
    ADD CONSTRAINT cmstate_comminicationmessageid_fk FOREIGN KEY (comminicationmessageid) REFERENCES communicationmessage(id) ON DELETE CASCADE;


--
-- Name: cmstate_organizationid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY communicationmessageorgassessmentprogram
    ADD CONSTRAINT cmstate_organizationid_fk FOREIGN KEY (organizationid) REFERENCES organization(id) ON DELETE CASCADE;


--
-- Name: cmstate_stateid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY communicationmessagestate
    ADD CONSTRAINT cmstate_stateid_fk FOREIGN KEY (stateid) REFERENCES organization(id) ON DELETE CASCADE;


--
-- Name: cognitivetaxonomydimension_cognitivetaxonomyid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY cognitivetaxonomydimension
    ADD CONSTRAINT cognitivetaxonomydimension_cognitivetaxonomyid_fkey FOREIGN KEY (cognitivetaxonomyid) REFERENCES cognitivetaxonomy(id);


--
-- Name: combinedlevelmap_batchuploadid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY combinedlevelmap
    ADD CONSTRAINT combinedlevelmap_batchuploadid_fk FOREIGN KEY (batchuploadid) REFERENCES batchupload(id);


--
-- Name: commband_student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY student
    ADD CONSTRAINT commband_student_fk FOREIGN KEY (commbandid) REFERENCES category(id);


--
-- Name: compositestimulusvariant_compositestimulusvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY compositestimulusvariant
    ADD CONSTRAINT compositestimulusvariant_compositestimulusvariantid_fkey FOREIGN KEY (compositestimulusvariantid) REFERENCES stimulusvariant(id) MATCH FULL;


--
-- Name: compositestimulusvariant_stimulusvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY compositestimulusvariant
    ADD CONSTRAINT compositestimulusvariant_stimulusvariantid_fkey FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id) MATCH FULL;


--
-- Name: content_area_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsassessments
    ADD CONSTRAINT content_area_fk FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: contentareaid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationcontentarea
    ADD CONSTRAINT contentareaid FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: contentframework_assessmentprogram_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentframework
    ADD CONSTRAINT contentframework_assessmentprogram_fkey FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id) MATCH FULL;


--
-- Name: contentframework_contentareaid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentframework
    ADD CONSTRAINT contentframework_contentareaid_fkey FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: contentframework_frameworktypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentframework
    ADD CONSTRAINT contentframework_frameworktypeid_fkey FOREIGN KEY (frameworktypeid) REFERENCES frameworktype(id);


--
-- Name: contentframework_gradebandid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentframework
    ADD CONSTRAINT contentframework_gradebandid_fkey FOREIGN KEY (gradebandid) REFERENCES gradeband(id);


--
-- Name: contentframework_gradecourseid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentframework
    ADD CONSTRAINT contentframework_gradecourseid_fkey FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: contentframeworkdetail_contentframeworkid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentframeworkdetail
    ADD CONSTRAINT contentframeworkdetail_contentframeworkid_fkey FOREIGN KEY (contentframeworkid) REFERENCES contentframework(id);


--
-- Name: contentgroup_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentgroup
    ADD CONSTRAINT contentgroup_fk1 FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id) MATCH FULL;


--
-- Name: contentgroup_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentgroup
    ADD CONSTRAINT contentgroup_fk2 FOREIGN KEY (foilid) REFERENCES foil(id) MATCH FULL;


--
-- Name: contentgroup_stimulusvariantid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentgroup
    ADD CONSTRAINT contentgroup_stimulusvariantid_fk FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id) MATCH FULL;


--
-- Name: contentgroup_stimulusvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentgroup
    ADD CONSTRAINT contentgroup_stimulusvariantid_fkey FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id) MATCH FULL;


--
-- Name: contentgroup_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentgroup
    ADD CONSTRAINT contentgroup_testid_fkey FOREIGN KEY (testid) REFERENCES test(id) MATCH FULL;


--
-- Name: contentgroup_testsectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentgroup
    ADD CONSTRAINT contentgroup_testsectionid_fkey FOREIGN KEY (testsectionid) REFERENCES testsection(id) MATCH FULL;


--
-- Name: course_enrollment_status_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY roster
    ADD CONSTRAINT course_enrollment_status_fk FOREIGN KEY (courseenrollmentstatusid) REFERENCES category(id);


--
-- Name: course_gradecourse_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY roster
    ADD CONSTRAINT course_gradecourse_fk FOREIGN KEY (statecoursesid) REFERENCES gradecourse(id);


--
-- Name: current_grade_level_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollment
    ADD CONSTRAINT current_grade_level_fk FOREIGN KEY (currentgradelevel) REFERENCES gradecourse(id);


--
-- Name: dailyaccesscode_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY dailyaccesscode
    ADD CONSTRAINT dailyaccesscode_fk1 FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: dailyaccesscode_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY dailyaccesscode
    ADD CONSTRAINT dailyaccesscode_fk2 FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: dailyaccesscode_fk3; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY dailyaccesscode
    ADD CONSTRAINT dailyaccesscode_fk3 FOREIGN KEY (stageid) REFERENCES stage(id);


--
-- Name: dailyaccesscode_fk4; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY dailyaccesscode
    ADD CONSTRAINT dailyaccesscode_fk4 FOREIGN KEY (operationaltestwindowid) REFERENCES operationaltestwindow(id);


--
-- Name: eeltv_category_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY essentialelementlinkagetranslationvalues
    ADD CONSTRAINT eeltv_category_fk FOREIGN KEY (categoryid) REFERENCES category(id);


--
-- Name: elaband_student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY student
    ADD CONSTRAINT elaband_student_fk FOREIGN KEY (elabandid) REFERENCES category(id);


--
-- Name: enrollment_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmentsrosters
    ADD CONSTRAINT enrollment_fk FOREIGN KEY (enrollmentid) REFERENCES enrollment(id);


--
-- Name: enrollmentsrosters_course_status_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmentsrosters
    ADD CONSTRAINT enrollmentsrosters_course_status_fk FOREIGN KEY (courseenrollmentstatusid) REFERENCES category(id);


--
-- Name: excludeditems_batchuploadid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY excludeditems
    ADD CONSTRAINT excludeditems_batchuploadid_fk FOREIGN KEY (batchuploadid) REFERENCES batchupload(id);


--
-- Name: field_specifications_record_types_field_specification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY fieldspecificationsrecordtypes
    ADD CONSTRAINT field_specifications_record_types_field_specification_id_fkey FOREIGN KEY (fieldspecificationid) REFERENCES fieldspecification(id);


--
-- Name: field_specifications_record_types_record_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY fieldspecificationsrecordtypes
    ADD CONSTRAINT field_specifications_record_types_record_type_id_fkey FOREIGN KEY (recordtypeid) REFERENCES category(id);


--
-- Name: finalelaband_student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY student
    ADD CONSTRAINT finalelaband_student_fk FOREIGN KEY (finalelabandid) REFERENCES category(id);


--
-- Name: finalmathband_student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY student
    ADD CONSTRAINT finalmathband_student_fk FOREIGN KEY (finalmathbandid) REFERENCES category(id);


--
-- Name: fk1_testenrollmentmethod; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testenrollmentmethod
    ADD CONSTRAINT fk1_testenrollmentmethod FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: fk_aartuser_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY aartuser
    ADD CONSTRAINT fk_aartuser_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_aartuser_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY aartuser
    ADD CONSTRAINT fk_aartuser_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_authorities_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY authorities
    ADD CONSTRAINT fk_authorities_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_authorities_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY authorities
    ADD CONSTRAINT fk_authorities_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_autoenrollmentmethodid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindow
    ADD CONSTRAINT fk_autoenrollmentmethodid FOREIGN KEY (testenrollmentmethodid) REFERENCES testenrollmentmethod(id);


--
-- Name: fk_autoregistrationcriteria_assessmentid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY autoregistrationcriteria
    ADD CONSTRAINT fk_autoregistrationcriteria_assessmentid FOREIGN KEY (assessmentid) REFERENCES assessment(id) MATCH FULL;


--
-- Name: fk_autoregistrationcriteria_assessmentprogramid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY autoregistrationcriteria
    ADD CONSTRAINT fk_autoregistrationcriteria_assessmentprogramid FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id) MATCH FULL;


--
-- Name: fk_autoregistrationcriteria_contentareatesttypesubjectareaid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY autoregistrationcriteria
    ADD CONSTRAINT fk_autoregistrationcriteria_contentareatesttypesubjectareaid FOREIGN KEY (contentareatesttypesubjectareaid) REFERENCES contentareatesttypesubjectarea(id) MATCH FULL;


--
-- Name: fk_autoregistrationcriteria_gradecourseid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY autoregistrationcriteria
    ADD CONSTRAINT fk_autoregistrationcriteria_gradecourseid FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id) MATCH FULL;


--
-- Name: fk_autoregistrationcriteria_testingprogramid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY autoregistrationcriteria
    ADD CONSTRAINT fk_autoregistrationcriteria_testingprogramid FOREIGN KEY (testingprogramid) REFERENCES testingprogram(id) MATCH FULL;


--
-- Name: fk_category_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY category
    ADD CONSTRAINT fk_category_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_category_type_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY categorytype
    ADD CONSTRAINT fk_category_type_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_category_type_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY categorytype
    ADD CONSTRAINT fk_category_type_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_category_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY category
    ADD CONSTRAINT fk_category_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_contentareaid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowmultiassigndetail
    ADD CONSTRAINT fk_contentareaid FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: fk_contentareatesttypesubjectarea_contentareaid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentareatesttypesubjectarea
    ADD CONSTRAINT fk_contentareatesttypesubjectarea_contentareaid FOREIGN KEY (contentareaid) REFERENCES contentarea(id) MATCH FULL;


--
-- Name: fk_contentareatesttypesubjectarea_stageid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentareatesttypesubjectarea
    ADD CONSTRAINT fk_contentareatesttypesubjectarea_stageid FOREIGN KEY (stageid) REFERENCES stage(id) MATCH FULL;


--
-- Name: fk_contentareatesttypesubjectarea_testtypesubjectareaid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY contentareatesttypesubjectarea
    ADD CONSTRAINT fk_contentareatesttypesubjectarea_testtypesubjectareaid FOREIGN KEY (testtypesubjectareaid) REFERENCES testtypesubjectarea(id) MATCH FULL;


--
-- Name: fk_displayview_id; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testlet
    ADD CONSTRAINT fk_displayview_id FOREIGN KEY (displayviewid) REFERENCES category(id);


--
-- Name: fk_enrollment_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollment
    ADD CONSTRAINT fk_enrollment_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_enrollment_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollment
    ADD CONSTRAINT fk_enrollment_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_enrollmentid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstests
    ADD CONSTRAINT fk_enrollmentid FOREIGN KEY (enrollmentid) REFERENCES enrollment(id);


--
-- Name: fk_enrollmentsrosters_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmentsrosters
    ADD CONSTRAINT fk_enrollmentsrosters_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_enrollmentsrosters_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmentsrosters
    ADD CONSTRAINT fk_enrollmentsrosters_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_enrollmenttesttypesubjectarea_enrollmentid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmenttesttypesubjectarea
    ADD CONSTRAINT fk_enrollmenttesttypesubjectarea_enrollmentid_fk FOREIGN KEY (enrollmentid) REFERENCES enrollment(id) MATCH FULL;


--
-- Name: fk_enrollmenttesttypesubjectarea_subjectareaid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmenttesttypesubjectarea
    ADD CONSTRAINT fk_enrollmenttesttypesubjectarea_subjectareaid_fk FOREIGN KEY (subjectareaid) REFERENCES subjectarea(id) MATCH FULL;


--
-- Name: fk_enrollmenttesttypesubjectarea_testtypeid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmenttesttypesubjectarea
    ADD CONSTRAINT fk_enrollmenttesttypesubjectarea_testtypeid_fk FOREIGN KEY (testtypeid) REFERENCES testtype(id) MATCH FULL;


--
-- Name: fk_fieldspecification_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY fieldspecification
    ADD CONSTRAINT fk_fieldspecification_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_fieldspecification_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY fieldspecification
    ADD CONSTRAINT fk_fieldspecification_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_fieldspecificationsrecordtypes_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY fieldspecificationsrecordtypes
    ADD CONSTRAINT fk_fieldspecificationsrecordtypes_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_fieldspecificationsrecordtypes_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY fieldspecificationsrecordtypes
    ADD CONSTRAINT fk_fieldspecificationsrecordtypes_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_foil_id; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantlearningmapnode
    ADD CONSTRAINT fk_foil_id FOREIGN KEY (foilid) REFERENCES foil(id);


--
-- Name: fk_gradecontentareatesttypesubjectarea_gradecourseid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY gradecontentareatesttypesubjectarea
    ADD CONSTRAINT fk_gradecontentareatesttypesubjectarea_gradecourseid FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id) MATCH FULL;


--
-- Name: fk_group_authorities_authority; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groupauthorities
    ADD CONSTRAINT fk_group_authorities_authority FOREIGN KEY (authorityid) REFERENCES authorities(id);


--
-- Name: fk_group_authorities_group; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groupauthorities
    ADD CONSTRAINT fk_group_authorities_group FOREIGN KEY (groupid) REFERENCES groups(id);


--
-- Name: fk_group_members_group; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userorganizationsgroups
    ADD CONSTRAINT fk_group_members_group FOREIGN KEY (groupid) REFERENCES groups(id);


--
-- Name: fk_groupauthorities_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groupauthorities
    ADD CONSTRAINT fk_groupauthorities_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_groupauthorities_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groupauthorities
    ADD CONSTRAINT fk_groupauthorities_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_groups_organization; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groups
    ADD CONSTRAINT fk_groups_organization FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: fk_groups_organizationtype; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groups
    ADD CONSTRAINT fk_groups_organizationtype FOREIGN KEY (organizationtypeid) REFERENCES organizationtype(id);


--
-- Name: fk_grp_created_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groups
    ADD CONSTRAINT fk_grp_created_user FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_grp_updated_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groups
    ADD CONSTRAINT fk_grp_updated_user FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_interfacerequesthistory_modulereportid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY interfacerequesthistory
    ADD CONSTRAINT fk_interfacerequesthistory_modulereportid FOREIGN KEY (modulereportid) REFERENCES modulereport(id) MATCH FULL;


--
-- Name: fk_itisensitivity_historyid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ititestsessionsensitivitytags
    ADD CONSTRAINT fk_itisensitivity_historyid FOREIGN KEY (ititestsessionhistoryid) REFERENCES ititestsessionhistory(id);


--
-- Name: fk_itisensitivity_tagid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ititestsessionsensitivitytags
    ADD CONSTRAINT fk_itisensitivity_tagid FOREIGN KEY (sensitivitytag) REFERENCES sensitivitytag(id);


--
-- Name: fk_ititsh_created_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ititestsessionhistory
    ADD CONSTRAINT fk_ititsh_created_user FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_ititsh_rosterid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ititestsessionhistory
    ADD CONSTRAINT fk_ititsh_rosterid FOREIGN KEY (rosterid) REFERENCES roster(id);


--
-- Name: fk_ititsh_status; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ititestsessionhistory
    ADD CONSTRAINT fk_ititsh_status FOREIGN KEY (status) REFERENCES category(id);


--
-- Name: fk_ititsh_studentid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ititestsessionhistory
    ADD CONSTRAINT fk_ititsh_studentid FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: fk_ititsh_testcollection; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ititestsessionhistory
    ADD CONSTRAINT fk_ititsh_testcollection FOREIGN KEY (testcollectionid) REFERENCES testcollection(id);


--
-- Name: fk_ititsh_updated_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ititestsessionhistory
    ADD CONSTRAINT fk_ititsh_updated_user FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_modulegroup_module; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulegroup
    ADD CONSTRAINT fk_modulegroup_module FOREIGN KEY (moduleid) REFERENCES module(id) MATCH FULL;


--
-- Name: fk_modulegroup_tag; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulegroup
    ADD CONSTRAINT fk_modulegroup_tag FOREIGN KEY (groupid) REFERENCES groups(id) MATCH FULL;


--
-- Name: fk_modulereport_group; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulereport
    ADD CONSTRAINT fk_modulereport_group FOREIGN KEY (groupid) REFERENCES groups(id);


--
-- Name: fk_modulereport_state; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulereport
    ADD CONSTRAINT fk_modulereport_state FOREIGN KEY (stateid) REFERENCES organization(id) MATCH FULL;


--
-- Name: fk_modulereport_status; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulereport
    ADD CONSTRAINT fk_modulereport_status FOREIGN KEY (statusid) REFERENCES category(id);


--
-- Name: fk_modulestate_module; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulestate
    ADD CONSTRAINT fk_modulestate_module FOREIGN KEY (moduleid) REFERENCES module(id) MATCH FULL;


--
-- Name: fk_modulestate_state; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulestate
    ADD CONSTRAINT fk_modulestate_state FOREIGN KEY (stateid) REFERENCES organization(id) MATCH FULL;


--
-- Name: fk_moduletag_module; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY moduletag
    ADD CONSTRAINT fk_moduletag_module FOREIGN KEY (moduleid) REFERENCES module(id) MATCH FULL;


--
-- Name: fk_moduletag_tag; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY moduletag
    ADD CONSTRAINT fk_moduletag_tag FOREIGN KEY (tagid) REFERENCES tag(id) MATCH FULL;


--
-- Name: fk_nodetypecode_id; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantlearningmapnode
    ADD CONSTRAINT fk_nodetypecode_id FOREIGN KEY (nodetypecodeid) REFERENCES category(id);


--
-- Name: fk_nodeweight_id; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantlearningmapnode
    ADD CONSTRAINT fk_nodeweight_id FOREIGN KEY (nodeweightid) REFERENCES category(id);


--
-- Name: fk_operationaltestwindowid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowmultiassigndetail
    ADD CONSTRAINT fk_operationaltestwindowid FOREIGN KEY (operationaltestwindowid) REFERENCES operationaltestwindow(id);


--
-- Name: fk_org_created_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organization
    ADD CONSTRAINT fk_org_created_user FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_org_updated_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organization
    ADD CONSTRAINT fk_org_updated_user FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_organizationhierarchy_organization; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationhierarchy
    ADD CONSTRAINT fk_organizationhierarchy_organization FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: fk_organizationhierarchy_organizationtype; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationhierarchy
    ADD CONSTRAINT fk_organizationhierarchy_organizationtype FOREIGN KEY (organizationtypeid) REFERENCES organizationtype(id);


--
-- Name: fk_organizationtype_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationtype
    ADD CONSTRAINT fk_organizationtype_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_organizationtype_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationtype
    ADD CONSTRAINT fk_organizationtype_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_orgassessmentprogram_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY orgassessmentprogram
    ADD CONSTRAINT fk_orgassessmentprogram_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_orgassessmentprogram_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY orgassessmentprogram
    ADD CONSTRAINT fk_orgassessmentprogram_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_orgrel_created_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationrelation
    ADD CONSTRAINT fk_orgrel_created_user FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_orgrel_updated_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationrelation
    ADD CONSTRAINT fk_orgrel_updated_user FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_otw_session_rule_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowsessionrule
    ADD CONSTRAINT fk_otw_session_rule_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_otw_session_rule_otw; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowsessionrule
    ADD CONSTRAINT fk_otw_session_rule_otw FOREIGN KEY (operationaltestwindowid) REFERENCES operationaltestwindow(id);


--
-- Name: fk_otw_session_rule_session_rule_id; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowsessionrule
    ADD CONSTRAINT fk_otw_session_rule_session_rule_id FOREIGN KEY (sessionruleid) REFERENCES category(id);


--
-- Name: fk_otw_session_rule_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowsessionrule
    ADD CONSTRAINT fk_otw_session_rule_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_pianacvo_assessmentprogram; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY profileitemattrnameattrcontainerviewoptions
    ADD CONSTRAINT fk_pianacvo_assessmentprogram FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: fk_pianacvo_profileitemattributenameattributecontainer; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY profileitemattrnameattrcontainerviewoptions
    ADD CONSTRAINT fk_pianacvo_profileitemattributenameattributecontainer FOREIGN KEY (pianacid) REFERENCES profileitemattributenameattributecontainer(id);


--
-- Name: fk_policy_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY policy
    ADD CONSTRAINT fk_policy_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_policy_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY policy
    ADD CONSTRAINT fk_policy_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_previousstatus; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsections
    ADD CONSTRAINT fk_previousstatus FOREIGN KEY (previousstatusid) REFERENCES category(id);


--
-- Name: fk_profile_item_attributename_attribute_container_attribute_con; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY profileitemattributenameattributecontainer
    ADD CONSTRAINT fk_profile_item_attributename_attribute_container_attribute_con FOREIGN KEY (attributecontainerid) REFERENCES profileitemattributecontainer(id);


--
-- Name: fk_profile_item_attributename_attribute_container_attribute_nam; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY profileitemattributenameattributecontainer
    ADD CONSTRAINT fk_profile_item_attributename_attribute_container_attribute_nam FOREIGN KEY (attributenameid) REFERENCES profileitemattribute(id);


--
-- Name: fk_questionview_id; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testlet
    ADD CONSTRAINT fk_questionview_id FOREIGN KEY (questionviewid) REFERENCES category(id);


--
-- Name: fk_restricted_resource_type_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restriction
    ADD CONSTRAINT fk_restricted_resource_type_fk FOREIGN KEY (restrictedresourcetypeid) REFERENCES category(id);


--
-- Name: fk_restriction_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restriction
    ADD CONSTRAINT fk_restriction_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_restriction_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restriction
    ADD CONSTRAINT fk_restriction_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_restrictionsauthorities_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restrictionsauthorities
    ADD CONSTRAINT fk_restrictionsauthorities_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_restrictionsauthorities_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restrictionsauthorities
    ADD CONSTRAINT fk_restrictionsauthorities_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_restrictionsorganizations_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restrictionsorganizations
    ADD CONSTRAINT fk_restrictionsorganizations_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_restrictionsorganizations_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restrictionsorganizations
    ADD CONSTRAINT fk_restrictionsorganizations_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_roster_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY roster
    ADD CONSTRAINT fk_roster_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_roster_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY roster
    ADD CONSTRAINT fk_roster_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_st_created_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstests
    ADD CONSTRAINT fk_st_created_user FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_st_updated_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstests
    ADD CONSTRAINT fk_st_updated_user FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_stage_predecessorid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stage
    ADD CONSTRAINT fk_stage_predecessorid FOREIGN KEY (predecessorid) REFERENCES stage(id);


--
-- Name: fk_student; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY survey
    ADD CONSTRAINT fk_student FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: fk_student_survey_response_survey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsurveyresponse
    ADD CONSTRAINT fk_student_survey_response_survey FOREIGN KEY (surveyid) REFERENCES survey(id);


--
-- Name: fk_student_survey_response_survey_response; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsurveyresponse
    ADD CONSTRAINT fk_student_survey_response_survey_response FOREIGN KEY (surveyresponseid) REFERENCES surveyresponse(id);


--
-- Name: fk_studentadaptivetest_assignedstudentstestsid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentadaptivetest
    ADD CONSTRAINT fk_studentadaptivetest_assignedstudentstestsid FOREIGN KEY (nextstudentstestsid) REFERENCES studentstests(id);


--
-- Name: fk_studentadaptivetest_studentstestsid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentadaptivetest
    ADD CONSTRAINT fk_studentadaptivetest_studentstestsid FOREIGN KEY (studentstestsid) REFERENCES studentstests(id);


--
-- Name: fk_studentadaptivetestfinaltheta_studentstestid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentadaptivetestfinaltheta
    ADD CONSTRAINT fk_studentadaptivetestfinaltheta_studentstestid FOREIGN KEY (studentstestid) REFERENCES studentstests(id);


--
-- Name: fk_studentadaptivetestfinaltheta_testsectioncontainerid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentadaptivetestfinaltheta
    ADD CONSTRAINT fk_studentadaptivetestfinaltheta_testsectioncontainerid FOREIGN KEY (testconstructid) REFERENCES testconstruct(id);


--
-- Name: fk_studentadaptivetestthetastatus_studentstestid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentadaptivetestthetastatus
    ADD CONSTRAINT fk_studentadaptivetestthetastatus_studentstestid FOREIGN KEY (studentstestid) REFERENCES studentstests(id);


--
-- Name: fk_studentadaptivetestthetastatus_testpartid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentadaptivetestthetastatus
    ADD CONSTRAINT fk_studentadaptivetestthetastatus_testpartid FOREIGN KEY (testpartid) REFERENCES testpart(id);


--
-- Name: fk_studentadaptivetestthetastatus_testsectioncontainerid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentadaptivetestthetastatus
    ADD CONSTRAINT fk_studentadaptivetestthetastatus_testsectioncontainerid FOREIGN KEY (testsectioncontainerid) REFERENCES testsectioncontainer(id);


--
-- Name: fk_studentresponseaudit_createduser; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentresponseaudit
    ADD CONSTRAINT fk_studentresponseaudit_createduser FOREIGN KEY (createduser) REFERENCES aartuser(id) MATCH FULL;


--
-- Name: fk_studentresponsescore_nsc; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentresponsescore
    ADD CONSTRAINT fk_studentresponsescore_nsc FOREIGN KEY (nonscorablecodeid) REFERENCES category(id);


--
-- Name: fk_students_tests_status; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstests
    ADD CONSTRAINT fk_students_tests_status FOREIGN KEY (status) REFERENCES category(id);


--
-- Name: fk_studentsadaptivetestsections_partid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsadaptivetestsections
    ADD CONSTRAINT fk_studentsadaptivetestsections_partid FOREIGN KEY (testpartid) REFERENCES testpart(id);


--
-- Name: fk_studentsadaptivetestsections_studentstestid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsadaptivetestsections
    ADD CONSTRAINT fk_studentsadaptivetestsections_studentstestid FOREIGN KEY (studentstestid) REFERENCES studentstests(id);


--
-- Name: fk_studentsadaptivetestsections_taskvariantid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsadaptivetestsections
    ADD CONSTRAINT fk_studentsadaptivetestsections_taskvariantid FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id);


--
-- Name: fk_studentsadaptivetestsections_testsectioncontainerid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsadaptivetestsections
    ADD CONSTRAINT fk_studentsadaptivetestsections_testsectioncontainerid FOREIGN KEY (testsectioncontainerid) REFERENCES testsectioncontainer(id);


--
-- Name: fk_studentsadaptivetestsections_testsectioncontainerthetanodeid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsadaptivetestsections
    ADD CONSTRAINT fk_studentsadaptivetestsections_testsectioncontainerthetanodeid FOREIGN KEY (testsectioncontainerthetanodeid) REFERENCES testsectioncontainerthetanode(id);


--
-- Name: fk_studentsadaptivetestsections_testsectionid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsadaptivetestsections
    ADD CONSTRAINT fk_studentsadaptivetestsections_testsectionid FOREIGN KEY (testsectionid) REFERENCES testsection(id);


--
-- Name: fk_studentsassessments_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsassessments
    ADD CONSTRAINT fk_studentsassessments_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_studentsassessments_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsassessments
    ADD CONSTRAINT fk_studentsassessments_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_studentspecialcircumstance_specialcircumstanceid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentspecialcircumstance
    ADD CONSTRAINT fk_studentspecialcircumstance_specialcircumstanceid FOREIGN KEY (specialcircumstanceid) REFERENCES specialcircumstance(id);


--
-- Name: fk_studentspecialcircumstance_studenttestid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentspecialcircumstance
    ADD CONSTRAINT fk_studentspecialcircumstance_studenttestid FOREIGN KEY (studenttestid) REFERENCES studentstests(id);


--
-- Name: fk_studentsresponseparameters_studentstestsectionsid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsresponseparameters
    ADD CONSTRAINT fk_studentsresponseparameters_studentstestsectionsid FOREIGN KEY (studentstestsectionsid) REFERENCES studentstestsections(id);


--
-- Name: fk_studentsresponseparameters_studentstestsid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsresponseparameters
    ADD CONSTRAINT fk_studentsresponseparameters_studentstestsid FOREIGN KEY (studentstestsid) REFERENCES studentstests(id);


--
-- Name: fk_studentsresponseparameters_taskvariantid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsresponseparameters
    ADD CONSTRAINT fk_studentsresponseparameters_taskvariantid FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id);


--
-- Name: fk_studentsresponseparameters_testid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsresponseparameters
    ADD CONSTRAINT fk_studentsresponseparameters_testid FOREIGN KEY (testid) REFERENCES test(id);


--
-- Name: fk_studentstestsectionid_testsectioid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY exitwithoutsavetest
    ADD CONSTRAINT fk_studentstestsectionid_testsectioid FOREIGN KEY (studenttestsectionid) REFERENCES studentstestsections(id);


--
-- Name: fk_studentstestsections_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsections
    ADD CONSTRAINT fk_studentstestsections_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_studentstestsections_status; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsections
    ADD CONSTRAINT fk_studentstestsections_status FOREIGN KEY (statusid) REFERENCES category(id);


--
-- Name: fk_studentstestsections_studentstestid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsections
    ADD CONSTRAINT fk_studentstestsections_studentstestid FOREIGN KEY (studentstestid) REFERENCES studentstests(id);


--
-- Name: fk_studentstestsections_testpartid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsections
    ADD CONSTRAINT fk_studentstestsections_testpartid FOREIGN KEY (testpartid) REFERENCES testpart(id);


--
-- Name: fk_studentstestsections_testsectionid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsections
    ADD CONSTRAINT fk_studentstestsections_testsectionid FOREIGN KEY (testsectionid) REFERENCES testsection(id);


--
-- Name: fk_studentstestsections_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsections
    ADD CONSTRAINT fk_studentstestsections_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_studentstestshistory_acteduser; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestshistory
    ADD CONSTRAINT fk_studentstestshistory_acteduser FOREIGN KEY (acteduser) REFERENCES aartuser(id) MATCH FULL;


--
-- Name: fk_studentstestshistory_studentstestsid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestshistory
    ADD CONSTRAINT fk_studentstestshistory_studentstestsid FOREIGN KEY (studentstestsid) REFERENCES studentstests(id) MATCH FULL;


--
-- Name: fk_studenttracker_contentarea; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studenttracker
    ADD CONSTRAINT fk_studenttracker_contentarea FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: fk_studenttracker_student; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studenttracker
    ADD CONSTRAINT fk_studenttracker_student FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: fk_studenttrackerband_complexityband; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studenttrackerband
    ADD CONSTRAINT fk_studenttrackerband_complexityband FOREIGN KEY (complexitybandid) REFERENCES complexityband(id);


--
-- Name: fk_studenttrackerband_contentarea; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studenttrackerband
    ADD CONSTRAINT fk_studenttrackerband_contentarea FOREIGN KEY (studenttrackerid) REFERENCES studenttracker(id);


--
-- Name: fk_studenttrackerband_testsession; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studenttrackerband
    ADD CONSTRAINT fk_studenttrackerband_testsession FOREIGN KEY (testsessionid) REFERENCES testsession(id);


--
-- Name: fk_suppressedlevel_ca; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY suppressedlevel
    ADD CONSTRAINT fk_suppressedlevel_ca FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: fk_suppressedlevel_gc; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY suppressedlevel
    ADD CONSTRAINT fk_suppressedlevel_gc FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: fk_survey_labels_section_id; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveylabel
    ADD CONSTRAINT fk_survey_labels_section_id FOREIGN KEY (sectionid) REFERENCES category(id);


--
-- Name: fk_survey_page_status_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveypagestatus
    ADD CONSTRAINT fk_survey_page_status_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_survey_page_status_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveypagestatus
    ADD CONSTRAINT fk_survey_page_status_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_survey_responses_label_id; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveyresponse
    ADD CONSTRAINT fk_survey_responses_label_id FOREIGN KEY (labelid) REFERENCES surveylabel(id);


--
-- Name: fk_survey_section_updusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveysection
    ADD CONSTRAINT fk_survey_section_updusr FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_surveysection_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveysection
    ADD CONSTRAINT fk_surveysection_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_tag_crdusr; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY tag
    ADD CONSTRAINT fk_tag_crdusr FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_taskvariant_id; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantlearningmapnode
    ADD CONSTRAINT fk_taskvariant_id FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id);


--
-- Name: fk_testcollection_stageid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testcollection
    ADD CONSTRAINT fk_testcollection_stageid FOREIGN KEY (stageid) REFERENCES stage(id);


--
-- Name: fk_testletlayout_id; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testlet
    ADD CONSTRAINT fk_testletlayout_id FOREIGN KEY (testletlayoutid) REFERENCES category(id);


--
-- Name: fk_testtypesubjectarea_assessmentid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testtype
    ADD CONSTRAINT fk_testtypesubjectarea_assessmentid FOREIGN KEY (assessmentid) REFERENCES assessment(id) MATCH FULL;


--
-- Name: fk_testtypesubjectarea_subjectareaid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testtypesubjectarea
    ADD CONSTRAINT fk_testtypesubjectarea_subjectareaid FOREIGN KEY (subjectareaid) REFERENCES subjectarea(id) MATCH FULL;


--
-- Name: fk_testtypesubjectarea_testtypeid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testtypesubjectarea
    ADD CONSTRAINT fk_testtypesubjectarea_testtypeid FOREIGN KEY (testtypeid) REFERENCES testtype(id) MATCH FULL;


--
-- Name: fk_ts_created_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT fk_ts_created_user FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: fk_ts_updated_user; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT fk_ts_updated_user FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: fk_userorganizationid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userorganizationsgroups
    ADD CONSTRAINT fk_userorganizationid FOREIGN KEY (userorganizationid) REFERENCES usersorganizations(id);


--
-- Name: fk_userpasswordreset_aartuserid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userpasswordreset
    ADD CONSTRAINT fk_userpasswordreset_aartuserid FOREIGN KEY (aart_user_id) REFERENCES aartuser(id);


--
-- Name: fk_usertestsection_status; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestsection
    ADD CONSTRAINT fk_usertestsection_status FOREIGN KEY (statusid) REFERENCES category(id);


--
-- Name: fk_usertestsection_testsectionid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestsection
    ADD CONSTRAINT fk_usertestsection_testsectionid FOREIGN KEY (testsectionid) REFERENCES testsection(id);


--
-- Name: fk_usertestsection_usertestid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestsection
    ADD CONSTRAINT fk_usertestsection_usertestid FOREIGN KEY (usertestid) REFERENCES usertest(id);


--
-- Name: fk_ut_status; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertest
    ADD CONSTRAINT fk_ut_status FOREIGN KEY (status) REFERENCES category(id);


--
-- Name: fk_ut_usermodule; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertest
    ADD CONSTRAINT fk_ut_usermodule FOREIGN KEY (usermoduleid) REFERENCES usermodule(id);


--
-- Name: foil_parentfoilid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY foil
    ADD CONSTRAINT foil_parentfoilid_fkey FOREIGN KEY (parentfoilid) REFERENCES foil(id);


--
-- Name: foilsstimulusvariants_foilid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY foilsstimulusvariants
    ADD CONSTRAINT foilsstimulusvariants_foilid_fkey FOREIGN KEY (foilid) REFERENCES foil(id);


--
-- Name: foilsstimulusvariants_stimulusvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY foilsstimulusvariants
    ADD CONSTRAINT foilsstimulusvariants_stimulusvariantid_fkey FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id);


--
-- Name: frameworklevel_frameworktypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY frameworklevel
    ADD CONSTRAINT frameworklevel_frameworktypeid_fkey FOREIGN KEY (frameworktypeid) REFERENCES frameworktype(id);


--
-- Name: frameworktype_assessmentprogram_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY frameworktype
    ADD CONSTRAINT frameworktype_assessmentprogram_fkey FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id) MATCH FULL;


--
-- Name: gradeband_contentarea_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY gradeband
    ADD CONSTRAINT gradeband_contentarea_fk FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: gradebandgradecourse_gradeband_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY gradebandgradecourse
    ADD CONSTRAINT gradebandgradecourse_gradeband_fk FOREIGN KEY (gradebandid) REFERENCES gradeband(id);


--
-- Name: gradebandgradecourse_gradecourse_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY gradebandgradecourse
    ADD CONSTRAINT gradebandgradecourse_gradecourse_fk FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: gradecourse_assessmentprogramgrades_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY gradecourse
    ADD CONSTRAINT gradecourse_assessmentprogramgrades_fk1 FOREIGN KEY (assessmentprogramgradesid) REFERENCES assessmentprogramgrades(id);


--
-- Name: gradecourse_contentarea_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY gradecourse
    ADD CONSTRAINT gradecourse_contentarea_fk FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: groupauthoritylockdownperiod_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groupauthoritylockdownperiod
    ADD CONSTRAINT groupauthoritylockdownperiod_fk1 FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: groupauthoritylockdownperiod_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY groupauthoritylockdownperiod
    ADD CONSTRAINT groupauthoritylockdownperiod_fk2 FOREIGN KEY (groupauthorityid) REFERENCES groupauthorities(id);


--
-- Name: itemstatistic_assessmentprogramid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY itemstatistic
    ADD CONSTRAINT itemstatistic_assessmentprogramid_fkey FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: itemstatistic_taskvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY itemstatistic
    ADD CONSTRAINT itemstatistic_taskvariantid_fkey FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id) MATCH FULL;


--
-- Name: itemstatistic_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY itemstatistic
    ADD CONSTRAINT itemstatistic_testid_fkey FOREIGN KEY (testid) REFERENCES test(id);


--
-- Name: leveldescription_batchuploadid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY leveldescription
    ADD CONSTRAINT leveldescription_batchuploadid_fk FOREIGN KEY (batchuploadid) REFERENCES batchupload(id);


--
-- Name: lmassessmentmodelrule_contentframeworkdetailid_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY lmassessmentmodelrule
    ADD CONSTRAINT lmassessmentmodelrule_contentframeworkdetailid_fk2 FOREIGN KEY (contentframeworkdetailid) REFERENCES contentframeworkdetail(id) MATCH FULL;


--
-- Name: mathband_student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY student
    ADD CONSTRAINT mathband_student_fk FOREIGN KEY (mathbandid) REFERENCES category(id);


--
-- Name: micromap_contentframeworkdetailid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY micromap
    ADD CONSTRAINT micromap_contentframeworkdetailid_fk FOREIGN KEY (contentframeworkdetailid) REFERENCES contentframeworkdetail(id);


--
-- Name: module_assessmentprogram_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY module
    ADD CONSTRAINT module_assessmentprogram_fk FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: module_createduser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY module
    ADD CONSTRAINT module_createduser_fk FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: module_createduser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usermodule
    ADD CONSTRAINT module_createduser_fk FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: module_createduser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY micromap
    ADD CONSTRAINT module_createduser_fk FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: module_modifieduser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY module
    ADD CONSTRAINT module_modifieduser_fk FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: module_modifieduser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usermodule
    ADD CONSTRAINT module_modifieduser_fk FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: module_modifieduser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY micromap
    ADD CONSTRAINT module_modifieduser_fk FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: module_status_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY module
    ADD CONSTRAINT module_status_fk FOREIGN KEY (statusid) REFERENCES category(id);


--
-- Name: modulestate_status_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY modulestate
    ADD CONSTRAINT modulestate_status_fk FOREIGN KEY (statusid) REFERENCES category(id);


--
-- Name: ooperationaltestwindowstestcollections_operationaltestwindowid_; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowstestcollections
    ADD CONSTRAINT ooperationaltestwindowstestcollections_operationaltestwindowid_ FOREIGN KEY (operationaltestwindowid) REFERENCES operationaltestwindow(id);


--
-- Name: operationaltestwindowstate_operationaltestwindowid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowstate
    ADD CONSTRAINT operationaltestwindowstate_operationaltestwindowid FOREIGN KEY (operationaltestwindowid) REFERENCES operationaltestwindow(id);


--
-- Name: operationaltestwindowstestcollections_testcollectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowstestcollections
    ADD CONSTRAINT operationaltestwindowstestcollections_testcollectionid_fkey FOREIGN KEY (testcollectionid) REFERENCES testcollection(id);


--
-- Name: operationaltestwindowstudent_operationaltestwindowid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowstudent
    ADD CONSTRAINT operationaltestwindowstudent_operationaltestwindowid_fk FOREIGN KEY (operationaltestwindowid) REFERENCES operationaltestwindow(id);


--
-- Name: operationaltestwindowstudent_studentid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY operationaltestwindowstudent
    ADD CONSTRAINT operationaltestwindowstudent_studentid_fk FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: org_expdatetype_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organization
    ADD CONSTRAINT org_expdatetype_fk FOREIGN KEY (expirationdatetype) REFERENCES category(id);


--
-- Name: organization_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restrictionsorganizations
    ADD CONSTRAINT organization_fk FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: organization_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationrelation
    ADD CONSTRAINT organization_fk FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: organization_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usersorganizations
    ADD CONSTRAINT organization_fk FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: organizationid; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationcontentarea
    ADD CONSTRAINT organizationid FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: organizationreportdetails_batchreportprocessid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationreportdetails
    ADD CONSTRAINT organizationreportdetails_batchreportprocessid_fk FOREIGN KEY (batchreportprocessid) REFERENCES reportprocess(id) ON DELETE CASCADE;


--
-- Name: organizationtreedetail_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationtreedetail
    ADD CONSTRAINT organizationtreedetail_fk1 FOREIGN KEY (schoolid) REFERENCES organization(id);


--
-- Name: organizationtreedetail_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationtreedetail
    ADD CONSTRAINT organizationtreedetail_fk2 FOREIGN KEY (districtid) REFERENCES organization(id);


--
-- Name: organizationtreedetail_fk3; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationtreedetail
    ADD CONSTRAINT organizationtreedetail_fk3 FOREIGN KEY (stateid) REFERENCES organization(id);


--
-- Name: orgassessmentprogram_assessmentprogramid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY orgassessmentprogram
    ADD CONSTRAINT orgassessmentprogram_assessmentprogramid_fkey FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: orgassessmentprogram_organizationid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY orgassessmentprogram
    ADD CONSTRAINT orgassessmentprogram_organizationid_fkey FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: page_status_survey_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveypagestatus
    ADD CONSTRAINT page_status_survey_fk FOREIGN KEY (surveyid) REFERENCES survey(id);


--
-- Name: parent_organization_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY organizationrelation
    ADD CONSTRAINT parent_organization_fk FOREIGN KEY (parentorganizationid) REFERENCES organization(id);


--
-- Name: parent_survey_section_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveysection
    ADD CONSTRAINT parent_survey_section_fk FOREIGN KEY (parentsurveysectionid) REFERENCES surveysection(id);


--
-- Name: policy_organizationid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY policy
    ADD CONSTRAINT policy_organizationid_fkey FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: proportionmetrics_contentareaid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY proportionmetrics
    ADD CONSTRAINT proportionmetrics_contentareaid_fkey FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: proportionmetrics_essentialelementid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY proportionmetrics
    ADD CONSTRAINT proportionmetrics_essentialelementid_fkey FOREIGN KEY (essentialelementid) REFERENCES contentframeworkdetail(id);


--
-- Name: proportionmetrics_gradebandid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY proportionmetrics
    ADD CONSTRAINT proportionmetrics_gradebandid_fkey FOREIGN KEY (gradebandid) REFERENCES gradeband(id);


--
-- Name: proportionmetrics_gradecourseid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY proportionmetrics
    ADD CONSTRAINT proportionmetrics_gradecourseid_fkey FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: proportionmetrics_linkagelevelid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY proportionmetrics
    ADD CONSTRAINT proportionmetrics_linkagelevelid_fkey FOREIGN KEY (linkagelevelid) REFERENCES category(id);


--
-- Name: rawtoscalescores_batchuploadid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY rawtoscalescores
    ADD CONSTRAINT rawtoscalescores_batchuploadid_fk FOREIGN KEY (batchuploadid) REFERENCES batchupload(id);


--
-- Name: readaloudacc_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY readaloudaccommodation
    ADD CONSTRAINT readaloudacc_fk1 FOREIGN KEY (contentgroupid) REFERENCES contentgroup(id) MATCH FULL;


--
-- Name: readaloudacc_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY readaloudaccommodation
    ADD CONSTRAINT readaloudacc_fk2 FOREIGN KEY (accessibilityfileid) REFERENCES accessibilityfile(id) MATCH FULL;


--
-- Name: reportassessmentprogram_assessmentprogramid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportassessmentprogram
    ADD CONSTRAINT reportassessmentprogram_assessmentprogramid_fk FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: reportassessmentprogram_authorityid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportassessmentprogram
    ADD CONSTRAINT reportassessmentprogram_authorityid_fk FOREIGN KEY (authorityid) REFERENCES authorities(id);


--
-- Name: reportassessmentprogram_reporttypeid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportassessmentprogram
    ADD CONSTRAINT reportassessmentprogram_reporttypeid_fk FOREIGN KEY (reporttypeid) REFERENCES category(id);


--
-- Name: reportassessmentprogram_stateid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportassessmentprogram
    ADD CONSTRAINT reportassessmentprogram_stateid_fk FOREIGN KEY (stateid) REFERENCES organization(id);


--
-- Name: reportassessmentprogram_subjectid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportassessmentprogram
    ADD CONSTRAINT reportassessmentprogram_subjectid_fk FOREIGN KEY (subjectid) REFERENCES contentarea(id);


--
-- Name: reportassessmentprogramgroup_groupsid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportassessmentprogramgroup
    ADD CONSTRAINT reportassessmentprogramgroup_groupsid_fk FOREIGN KEY (groupid) REFERENCES groups(id);


--
-- Name: reportassessmentprogramgroup_reportassessmentprogramid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportassessmentprogramgroup
    ADD CONSTRAINT reportassessmentprogramgroup_reportassessmentprogramid_fk FOREIGN KEY (reportassessmentprogramid) REFERENCES reportassessmentprogram(id);


--
-- Name: reportprocess_createduser_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportprocess
    ADD CONSTRAINT reportprocess_createduser_fkey FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: reportprocessrecordcounts_batchreportprocessid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportprocessrecordcounts
    ADD CONSTRAINT reportprocessrecordcounts_batchreportprocessid_fk FOREIGN KEY (batchreportprocessid) REFERENCES reportprocess(id);


--
-- Name: reportsmedianscore_organizationid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportsmedianscore
    ADD CONSTRAINT reportsmedianscore_organizationid_fkey FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: reportsmedianscore_organizationtypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportsmedianscore
    ADD CONSTRAINT reportsmedianscore_organizationtypeid_fkey FOREIGN KEY (organizationtypeid) REFERENCES organizationtype(id);


--
-- Name: reportspercentbylevel_organizationid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportspercentbylevel
    ADD CONSTRAINT reportspercentbylevel_organizationid_fk FOREIGN KEY (organizationid) REFERENCES organization(id);


--
-- Name: reportsubscores_studentid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportsubscores
    ADD CONSTRAINT reportsubscores_studentid_fk FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: reportsubscores_studentreportid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportsubscores
    ADD CONSTRAINT reportsubscores_studentreportid_fk FOREIGN KEY (studentreportid) REFERENCES studentreport(id);


--
-- Name: reporttestlevelsubscores_studentid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reporttestlevelsubscores
    ADD CONSTRAINT reporttestlevelsubscores_studentid_fk FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: reporttestlevelsubscores_studentreportid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reporttestlevelsubscores
    ADD CONSTRAINT reporttestlevelsubscores_studentreportid_fk FOREIGN KEY (studentreportid) REFERENCES studentreport(id);


--
-- Name: reporttestlevelsubscores_testid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reporttestlevelsubscores
    ADD CONSTRAINT reporttestlevelsubscores_testid_fk FOREIGN KEY (testid) REFERENCES test(id);


--
-- Name: restriction_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restrictionsauthorities
    ADD CONSTRAINT restriction_fk FOREIGN KEY (restrictionid) REFERENCES restriction(id);


--
-- Name: restriction_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY restrictionsorganizations
    ADD CONSTRAINT restriction_fk FOREIGN KEY (restrictionid) REFERENCES restriction(id);


--
-- Name: restriction_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY roster
    ADD CONSTRAINT restriction_fk FOREIGN KEY (restrictionid) REFERENCES restriction(id);


--
-- Name: restriction_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollment
    ADD CONSTRAINT restriction_fk FOREIGN KEY (restrictionid) REFERENCES restriction(id);


--
-- Name: roster_attendance_school_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY roster
    ADD CONSTRAINT roster_attendance_school_fk FOREIGN KEY (attendanceschoolid) REFERENCES organization(id);


--
-- Name: roster_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmentsrosters
    ADD CONSTRAINT roster_fk FOREIGN KEY (rosterid) REFERENCES roster(id);


--
-- Name: rubriccategory_taskvariantid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY rubricscore
    ADD CONSTRAINT rubriccategory_taskvariantid_fk FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id) MATCH FULL;


--
-- Name: rubriccategory_taskvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY rubriccategory
    ADD CONSTRAINT rubriccategory_taskvariantid_fkey FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id) MATCH FULL;


--
-- Name: rubriccategoryid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ccqscoreitem
    ADD CONSTRAINT rubriccategoryid_fk FOREIGN KEY (rubriccategoryid) REFERENCES rubriccategory(id);


--
-- Name: rubricinfo_rubriccategoryid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY rubricinfo
    ADD CONSTRAINT rubricinfo_rubriccategoryid_fkey FOREIGN KEY (rubriccategoryid) REFERENCES rubriccategory(id) MATCH FULL;


--
-- Name: scorerid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY scoringassignmentscorer
    ADD CONSTRAINT scorerid_fk FOREIGN KEY (scorerid) REFERENCES aartuser(id);


--
-- Name: scoringassignmentid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY scoringassignmentstudent
    ADD CONSTRAINT scoringassignmentid_fk FOREIGN KEY (scoringassignmentid) REFERENCES scoringassignment(id);


--
-- Name: scoringassignmentid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY scoringassignmentscorer
    ADD CONSTRAINT scoringassignmentid_fk FOREIGN KEY (scoringassignmentid) REFERENCES scoringassignment(id);


--
-- Name: scoringassignmentscorerid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ccqscore
    ADD CONSTRAINT scoringassignmentscorerid_fk FOREIGN KEY (scoringassignmentscorerid) REFERENCES scoringassignmentscorer(id);


--
-- Name: scoringassignmentstudentid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY ccqscore
    ADD CONSTRAINT scoringassignmentstudentid_fk FOREIGN KEY (scoringassignmentstudentid) REFERENCES scoringassignmentstudent(id);


--
-- Name: sensitivitytag_contentareaid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY sensitivitytag
    ADD CONSTRAINT sensitivitytag_contentareaid_fkey FOREIGN KEY (contentareaid) REFERENCES contentarea(id) MATCH FULL;


--
-- Name: signedacc_accessibilityfileid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY signedaccommodation
    ADD CONSTRAINT signedacc_accessibilityfileid_fkey FOREIGN KEY (accessibilityfileid) REFERENCES accessibilityfile(id) MATCH FULL;


--
-- Name: signedacc_contentgroupid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY signedaccommodation
    ADD CONSTRAINT signedacc_contentgroupid_fkey FOREIGN KEY (contentgroupid) REFERENCES contentgroup(id) MATCH FULL;


--
-- Name: source_student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY roster
    ADD CONSTRAINT source_student_fk FOREIGN KEY (source) REFERENCES category(id);


--
-- Name: source_student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollmentsrosters
    ADD CONSTRAINT source_student_fk FOREIGN KEY (source) REFERENCES category(id);


--
-- Name: source_student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollment
    ADD CONSTRAINT source_student_fk FOREIGN KEY (source) REFERENCES category(id);


--
-- Name: specialcircumstance_assessmentprogramid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY specialcircumstance
    ADD CONSTRAINT specialcircumstance_assessmentprogramid_fkey FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: srcb_complexityband__fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY complexitybandrules
    ADD CONSTRAINT srcb_complexityband__fk FOREIGN KEY (complexitybandid) REFERENCES category(id);


--
-- Name: srcb_complexitybandtype__fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY complexitybandrules
    ADD CONSTRAINT srcb_complexitybandtype__fk FOREIGN KEY (complexitybandtypeid) REFERENCES category(id);


--
-- Name: stage_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanelstage
    ADD CONSTRAINT stage_fk1 FOREIGN KEY (stageid) REFERENCES stage(id);


--
-- Name: state_subject_area_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY roster
    ADD CONSTRAINT state_subject_area_fk FOREIGN KEY (statesubjectareaid) REFERENCES contentarea(id);


--
-- Name: statespecialcircumstance_specialcircumstanceid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY statespecialcircumstance
    ADD CONSTRAINT statespecialcircumstance_specialcircumstanceid_fkey FOREIGN KEY (specialcircumstanceid) REFERENCES specialcircumstance(id);


--
-- Name: statespecialcircumstance_stateid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY statespecialcircumstance
    ADD CONSTRAINT statespecialcircumstance_stateid_fkey FOREIGN KEY (stateid) REFERENCES organization(id);


--
-- Name: stimulusvariant_contentareaid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariant
    ADD CONSTRAINT stimulusvariant_contentareaid_fkey FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: stimulusvariant_gradecourseid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariant
    ADD CONSTRAINT stimulusvariant_gradecourseid_fkey FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: stimulusvariant_stimulusformatid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariant
    ADD CONSTRAINT stimulusvariant_stimulusformatid_fkey FOREIGN KEY (stimulusformatid) REFERENCES category(id);


--
-- Name: stimulusvariant_testingprogramid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariant
    ADD CONSTRAINT stimulusvariant_testingprogramid_fkey FOREIGN KEY (testingprogramid) REFERENCES testingprogram(id);


--
-- Name: stimulusvariantattachment_stimulusvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariantattachment
    ADD CONSTRAINT stimulusvariantattachment_stimulusvariantid_fkey FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id);


--
-- Name: stimulusvariantattachmentmetadata_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariantattachmentmetadata
    ADD CONSTRAINT stimulusvariantattachmentmetadata_fk1 FOREIGN KEY (attachmentid) REFERENCES stimulusvariantattachment(id) MATCH FULL;


--
-- Name: stimulusvariantcontentarea_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariantcontentarea
    ADD CONSTRAINT stimulusvariantcontentarea_fk1 FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id) MATCH FULL;


--
-- Name: stimulusvariantcontentarea_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariantcontentarea
    ADD CONSTRAINT stimulusvariantcontentarea_fk2 FOREIGN KEY (contentareaid) REFERENCES contentarea(id) MATCH FULL;


--
-- Name: stimulusvariantgradecourse_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariantgradecourse
    ADD CONSTRAINT stimulusvariantgradecourse_fk1 FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id) MATCH FULL;


--
-- Name: stimulusvariantgradecourse_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvariantgradecourse
    ADD CONSTRAINT stimulusvariantgradecourse_fk2 FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id) MATCH FULL;


--
-- Name: stimulusvarianttestingprogram_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvarianttestingprogram
    ADD CONSTRAINT stimulusvarianttestingprogram_fk1 FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id) MATCH FULL;


--
-- Name: stimulusvarianttestingprogram_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY stimulusvarianttestingprogram
    ADD CONSTRAINT stimulusvarianttestingprogram_fk2 FOREIGN KEY (testingprogramid) REFERENCES testingprogram(id) MATCH FULL;


--
-- Name: student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentsassessments
    ADD CONSTRAINT student_fk FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentprofileitemattributevalue
    ADD CONSTRAINT student_fk FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: student_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY enrollment
    ADD CONSTRAINT student_fk FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: student_stateid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY student
    ADD CONSTRAINT student_stateid_fk FOREIGN KEY (stateid) REFERENCES organization(id);


--
-- Name: studentassmentprgm_assessmentprogramid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentassessmentprogram
    ADD CONSTRAINT studentassmentprgm_assessmentprogramid_fk FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: studentassmentprgm_studentid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentassessmentprogram
    ADD CONSTRAINT studentassmentprgm_studentid_fk FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: studentbandrecommendation_contentareaid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentbandrecommendation
    ADD CONSTRAINT studentbandrecommendation_contentareaid_fkey FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: studentbandrecommendation_recofinalband_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentbandrecommendation
    ADD CONSTRAINT studentbandrecommendation_recofinalband_fkey FOREIGN KEY (recofinalband) REFERENCES category(id);


--
-- Name: studentbandrecommendation_studentid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentbandrecommendation
    ADD CONSTRAINT studentbandrecommendation_studentid_fkey FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: studentbandrecommendation_testcollectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentbandrecommendation
    ADD CONSTRAINT studentbandrecommendation_testcollectionid_fkey FOREIGN KEY (testcollectionid) REFERENCES testcollection(id);


--
-- Name: studentbandrecommendation_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentbandrecommendation
    ADD CONSTRAINT studentbandrecommendation_testid_fkey FOREIGN KEY (testid) REFERENCES test(id);


--
-- Name: studentbandrecommendation_usedbandid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentbandrecommendation
    ADD CONSTRAINT studentbandrecommendation_usedbandid_fkey FOREIGN KEY (usedbandid) REFERENCES category(id);


--
-- Name: studentbandrecommendation_usedessentialelementid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentbandrecommendation
    ADD CONSTRAINT studentbandrecommendation_usedessentialelementid_fkey FOREIGN KEY (usedessentialelementid) REFERENCES contentframeworkdetail(id);


--
-- Name: studentid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY scoringassignmentstudent
    ADD CONSTRAINT studentid_fk FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: studentnodeprobability_studentid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentnodeprobability
    ADD CONSTRAINT studentnodeprobability_studentid_fkey FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: studentreport_attendanceschoolid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentreport
    ADD CONSTRAINT studentreport_attendanceschoolid_fk FOREIGN KEY (attendanceschoolid) REFERENCES organization(id);


--
-- Name: studentreport_batchreportprocessid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentreport
    ADD CONSTRAINT studentreport_batchreportprocessid_fk FOREIGN KEY (batchreportprocessid) REFERENCES reportprocess(id);


--
-- Name: studentreport_batchreportprocessid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY reportspercentbylevel
    ADD CONSTRAINT studentreport_batchreportprocessid_fk FOREIGN KEY (batchreportprocessid) REFERENCES reportprocess(id);


--
-- Name: studentreport_combinedlevelid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentreport
    ADD CONSTRAINT studentreport_combinedlevelid_fk FOREIGN KEY (combinedlevelid) REFERENCES leveldescription(id);


--
-- Name: studentreport_districtid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentreport
    ADD CONSTRAINT studentreport_districtid_fk FOREIGN KEY (districtid) REFERENCES organization(id);


--
-- Name: studentreport_levelid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentreport
    ADD CONSTRAINT studentreport_levelid_fk FOREIGN KEY (levelid) REFERENCES leveldescription(id);


--
-- Name: studentreport_mdptlevelid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentreport
    ADD CONSTRAINT studentreport_mdptlevelid_fk FOREIGN KEY (mdptlevelid) REFERENCES leveldescription(id);


--
-- Name: studentreport_stateid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentreport
    ADD CONSTRAINT studentreport_stateid_fk FOREIGN KEY (stateid) REFERENCES organization(id);


--
-- Name: studentreport_studentid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentreport
    ADD CONSTRAINT studentreport_studentid_fk FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: studentreporttestscores_studentreportid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentreporttestscores
    ADD CONSTRAINT studentreporttestscores_studentreportid_fk FOREIGN KEY (studentreportid) REFERENCES studentreport(id);


--
-- Name: studentresponsescorerater_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentresponsescorerater
    ADD CONSTRAINT studentresponsescorerater_fkey1 FOREIGN KEY (userid) REFERENCES aartuser(id);


--
-- Name: studentspecialcircumstance_approvedby_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentspecialcircumstance
    ADD CONSTRAINT studentspecialcircumstance_approvedby_fkey FOREIGN KEY (approvedby) REFERENCES aartuser(id);


--
-- Name: studentspecialcircumstance_status_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentspecialcircumstance
    ADD CONSTRAINT studentspecialcircumstance_status_fkey FOREIGN KEY (status) REFERENCES category(id);


--
-- Name: studentstests_status_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstests
    ADD CONSTRAINT studentstests_status_fk FOREIGN KEY (status) REFERENCES category(id);


--
-- Name: studentstests_studentid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstests
    ADD CONSTRAINT studentstests_studentid_fkey FOREIGN KEY (studentid) REFERENCES student(id);


--
-- Name: studentstests_testcollectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstests
    ADD CONSTRAINT studentstests_testcollectionid_fkey FOREIGN KEY (testcollectionid) REFERENCES testcollection(id);


--
-- Name: studentstests_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstests
    ADD CONSTRAINT studentstests_testid_fkey FOREIGN KEY (testid) REFERENCES test(id);


--
-- Name: studentstests_testsessionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstests
    ADD CONSTRAINT studentstests_testsessionid_fkey FOREIGN KEY (testsessionid) REFERENCES testsession(id);


--
-- Name: studentstestsectionstasks_studentstestsectionsid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsectionstasks
    ADD CONSTRAINT studentstestsectionstasks_studentstestsectionsid_fkey FOREIGN KEY (studentstestsectionsid) REFERENCES studentstestsections(id);


--
-- Name: studentstestsectionstasks_taskid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsectionstasks
    ADD CONSTRAINT studentstestsectionstasks_taskid_fkey FOREIGN KEY (taskid) REFERENCES taskvariant(id);


--
-- Name: studentstestsectionstasksfoils_foilid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsectionstasksfoils
    ADD CONSTRAINT studentstestsectionstasksfoils_foilid_fkey FOREIGN KEY (foilid) REFERENCES foil(id);


--
-- Name: studentstestsectionstasksfoils_studentstestsectionstasks_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsectionstasksfoils
    ADD CONSTRAINT studentstestsectionstasksfoils_studentstestsectionstasks_fkey FOREIGN KEY (studentstestsectionsid) REFERENCES studentstestsections(id);


--
-- Name: studentstestsectionstasksfoils_taskid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studentstestsectionstasksfoils
    ADD CONSTRAINT studentstestsectionstasksfoils_taskid_fkey FOREIGN KEY (taskid) REFERENCES taskvariant(id);


--
-- Name: studentstestsid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY scoringassignmentstudent
    ADD CONSTRAINT studentstestsid_fk FOREIGN KEY (studentstestsid) REFERENCES studentstests(id);


--
-- Name: studenttrackerband_essentialelementid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studenttrackerband
    ADD CONSTRAINT studenttrackerband_essentialelementid_fkey FOREIGN KEY (essentialelementid) REFERENCES contentframeworkdetail(id);


--
-- Name: studenttrackeroperationalteststatus_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studenttrackerblueprintstatus
    ADD CONSTRAINT studenttrackeroperationalteststatus_fk1 FOREIGN KEY (studenttrackerid) REFERENCES studenttracker(id);


--
-- Name: studenttrackeroperationalteststatus_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY studenttrackerblueprintstatus
    ADD CONSTRAINT studenttrackeroperationalteststatus_fk2 FOREIGN KEY (operationalwindowid) REFERENCES operationaltestwindow(id);


--
-- Name: subscoreframework_batchuploadid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY subscoreframework
    ADD CONSTRAINT subscoreframework_batchuploadid_fk FOREIGN KEY (batchuploadid) REFERENCES batchupload(id);


--
-- Name: subscores_rawtoscale_batchuploadid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY subscoresrawtoscale
    ADD CONSTRAINT subscores_rawtoscale_batchuploadid_fk FOREIGN KEY (batchuploadid) REFERENCES batchupload(id);


--
-- Name: subscoresdescription_batchuploadid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY subscoresdescription
    ADD CONSTRAINT subscoresdescription_batchuploadid_fk FOREIGN KEY (batchuploadid) REFERENCES batchupload(id);


--
-- Name: survey_label_pre_requisite_survey_label_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveylabelprerequisite
    ADD CONSTRAINT survey_label_pre_requisite_survey_label_id_fkey FOREIGN KEY (surveylabelid) REFERENCES surveylabel(id);


--
-- Name: survey_label_pre_requisite_surveyresponseid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY surveylabelprerequisite
    ADD CONSTRAINT survey_label_pre_requisite_surveyresponseid_fkey FOREIGN KEY (surveyresponseid) REFERENCES surveyresponse(id);


--
-- Name: task_alternatepathway_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_alternatepathway_fkey FOREIGN KEY (alternatepathwayid) REFERENCES category(id);


--
-- Name: task_cognitivetaxonomydimensionid2_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_cognitivetaxonomydimensionid2_fkey FOREIGN KEY (cognitivetaxonomydimensionid2) REFERENCES cognitivetaxonomydimension(id);


--
-- Name: task_cognitivetaxonomydimensionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_cognitivetaxonomydimensionid_fkey FOREIGN KEY (cognitivetaxonomydimensionid) REFERENCES cognitivetaxonomydimension(id);


--
-- Name: task_cognitivetaxonomyid2_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_cognitivetaxonomyid2_fkey FOREIGN KEY (cognitivetaxonomyid2) REFERENCES cognitivetaxonomy(id);


--
-- Name: task_cognitivetaxonomyid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_cognitivetaxonomyid_fkey FOREIGN KEY (cognitivetaxonomyid) REFERENCES cognitivetaxonomy(id);


--
-- Name: task_contentareaid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_contentareaid_fkey FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: task_essentialelementlinkage_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_essentialelementlinkage_fkey FOREIGN KEY (essentialelementlinkageid) REFERENCES category(id);


--
-- Name: task_frameworktypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_frameworktypeid_fkey FOREIGN KEY (frameworktypeid) REFERENCES frameworktype(id);


--
-- Name: task_gradecourse_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_gradecourse_fkey FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: task_reporttasklayoutformatid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_reporttasklayoutformatid_fkey FOREIGN KEY (reporttasklayoutformatid) REFERENCES tasklayoutformat(id);


--
-- Name: task_tasklayoutformatid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_tasklayoutformatid_fkey FOREIGN KEY (tasklayoutformatid) REFERENCES tasklayoutformat(id);


--
-- Name: task_tasklayoutid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_tasklayoutid_fkey FOREIGN KEY (tasklayoutid) REFERENCES tasklayout(id);


--
-- Name: task_tasktypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_tasktypeid_fkey FOREIGN KEY (tasktypeid) REFERENCES tasktype(id);


--
-- Name: task_testingprogramid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_testingprogramid_fkey FOREIGN KEY (testingprogramid) REFERENCES testingprogram(id);


--
-- Name: task_testletaccess_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT task_testletaccess_fkey FOREIGN KEY (testletaccessid) REFERENCES category(id);


--
-- Name: taskfoils_taskvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectionstaskvariants
    ADD CONSTRAINT taskfoils_taskvariantid_fkey FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id);


--
-- Name: tasklayout_tasktypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY tasklayout
    ADD CONSTRAINT tasklayout_tasktypeid_fkey FOREIGN KEY (tasktypeid) REFERENCES tasktype(id);


--
-- Name: tasksfoils_foilid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantsfoils
    ADD CONSTRAINT tasksfoils_foilid_fkey FOREIGN KEY (foilid) REFERENCES foil(id);


--
-- Name: tasksubtype_tasktypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY tasksubtype
    ADD CONSTRAINT tasksubtype_tasktypeid_fkey FOREIGN KEY (tasktypeid) REFERENCES tasktype(id) MATCH FULL;


--
-- Name: taskvariant_gradebandid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT taskvariant_gradebandid_fkey FOREIGN KEY (gradebandid) REFERENCES gradeband(id) MATCH FULL;


--
-- Name: taskvariant_tasksubtypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariant
    ADD CONSTRAINT taskvariant_tasksubtypeid_fkey FOREIGN KEY (tasksubtypeid) REFERENCES tasksubtype(id) MATCH FULL;


--
-- Name: taskvariantcontentframeworkdetail_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantcontentframeworkdetail
    ADD CONSTRAINT taskvariantcontentframeworkdetail_fk1 FOREIGN KEY (contentframeworkdetailid) REFERENCES contentframeworkdetail(id) MATCH FULL;


--
-- Name: taskvariantcontentframeworkdetail_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantcontentframeworkdetail
    ADD CONSTRAINT taskvariantcontentframeworkdetail_fk2 FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id) MATCH FULL;


--
-- Name: taskvariantessentialelementlinkage_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantessentialelementlinkage
    ADD CONSTRAINT taskvariantessentialelementlinkage_fk1 FOREIGN KEY (essentialelementlinkageid) REFERENCES category(id) MATCH FULL;


--
-- Name: taskvariantessentialelementlinkage_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantessentialelementlinkage
    ADD CONSTRAINT taskvariantessentialelementlinkage_fk2 FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id) MATCH FULL;


--
-- Name: taskvariantitemusage_itemusageid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantitemusage
    ADD CONSTRAINT taskvariantitemusage_itemusageid_fkey FOREIGN KEY (itemusageid) REFERENCES category(id);


--
-- Name: taskvariantitemusage_taskvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantitemusage
    ADD CONSTRAINT taskvariantitemusage_taskvariantid_fkey FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id);


--
-- Name: taskvariantitemusage_testletid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testleitemusage
    ADD CONSTRAINT taskvariantitemusage_testletid_fkey FOREIGN KEY (testletid) REFERENCES testlet(id);


--
-- Name: taskvariantsfoils_taskvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantsfoils
    ADD CONSTRAINT taskvariantsfoils_taskvariantid_fkey FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id);


--
-- Name: taskvariantsstimulusvariants_stimulusvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantsstimulusvariants
    ADD CONSTRAINT taskvariantsstimulusvariants_stimulusvariantid_fkey FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id);


--
-- Name: taskvariantsstimulusvariants_taskvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantsstimulusvariants
    ADD CONSTRAINT taskvariantsstimulusvariants_taskvariantid_fkey FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id);


--
-- Name: taskvariantstools_taskvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantstools
    ADD CONSTRAINT taskvariantstools_taskvariantid_fkey FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id);


--
-- Name: taskvariantstools_toolid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY taskvariantstools
    ADD CONSTRAINT taskvariantstools_toolid_fkey FOREIGN KEY (toolid) REFERENCES tool(id);


--
-- Name: teacher_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY roster
    ADD CONSTRAINT teacher_fk FOREIGN KEY (teacherid) REFERENCES aartuser(id);


--
-- Name: test_contentareaid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY test
    ADD CONSTRAINT test_contentareaid_fkey FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: test_gradebandid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY test
    ADD CONSTRAINT test_gradebandid_fkey FOREIGN KEY (gradebandid) REFERENCES gradeband(id) MATCH FULL;


--
-- Name: test_gradecourseid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY test
    ADD CONSTRAINT test_gradecourseid_fkey FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: test_session_test_coll_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT test_session_test_coll_fk FOREIGN KEY (testcollectionid) REFERENCES testcollection(id);


--
-- Name: test_status_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY test
    ADD CONSTRAINT test_status_fkey FOREIGN KEY (status) REFERENCES category(id);


--
-- Name: test_testidid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testaccessibilityflag
    ADD CONSTRAINT test_testidid_fkey FOREIGN KEY (testid) REFERENCES test(id) MATCH FULL;


--
-- Name: test_testspecificationid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY test
    ADD CONSTRAINT test_testspecificationid_fk FOREIGN KEY (testspecificationid) REFERENCES testspecification(id);


--
-- Name: test_unpublishreasonid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY test
    ADD CONSTRAINT test_unpublishreasonid_fkey FOREIGN KEY (unpublishreasonid) REFERENCES category(id) MATCH FULL;


--
-- Name: testcollection_contentareaid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testcollection
    ADD CONSTRAINT testcollection_contentareaid_fkey FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: testcollection_courseid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testcollection
    ADD CONSTRAINT testcollection_courseid_fkey FOREIGN KEY (courseid) REFERENCES gradecourse(id);


--
-- Name: testcollection_gradebandid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testcollection
    ADD CONSTRAINT testcollection_gradebandid_fkey FOREIGN KEY (gradebandid) REFERENCES gradeband(id);


--
-- Name: testcollection_gradecourseid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testcollection
    ADD CONSTRAINT testcollection_gradecourseid_fkey FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: testcollectionstests_testcollectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testcollectionstests
    ADD CONSTRAINT testcollectionstests_testcollectionid_fkey FOREIGN KEY (testcollectionid) REFERENCES testcollection(id);


--
-- Name: testcollectionstests_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testcollectionstests
    ADD CONSTRAINT testcollectionstests_testid_fkey FOREIGN KEY (testid) REFERENCES test(id);


--
-- Name: testconstruct_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testconstruct
    ADD CONSTRAINT testconstruct_testid_fkey FOREIGN KEY (testid) REFERENCES test(id) MATCH FULL;


--
-- Name: testcutscores_batchuploadid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testcutscores
    ADD CONSTRAINT testcutscores_batchuploadid_fk FOREIGN KEY (batchuploadid) REFERENCES batchupload(id);


--
-- Name: testfeedbackrules_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testfeedbackrules
    ADD CONSTRAINT testfeedbackrules_testid_fkey FOREIGN KEY (testid) REFERENCES test(id) MATCH FULL;


--
-- Name: testingprogram_assessmentprogramid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testingprogram
    ADD CONSTRAINT testingprogram_assessmentprogramid_fkey FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: testleitemusage_itemusageid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testleitemusage
    ADD CONSTRAINT testleitemusage_itemusageid_fkey FOREIGN KEY (itemusageid) REFERENCES category(id);


--
-- Name: testlet_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testlet
    ADD CONSTRAINT testlet_fk1 FOREIGN KEY (contentareaid) REFERENCES contentarea(id) MATCH FULL;


--
-- Name: testlet_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testlet
    ADD CONSTRAINT testlet_fk2 FOREIGN KEY (testingprogramid) REFERENCES testingprogram(id) MATCH FULL;


--
-- Name: testlet_fk3; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testlet
    ADD CONSTRAINT testlet_fk3 FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id) MATCH FULL;


--
-- Name: testletsensitivitytag_sensitivitytagid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testletsensitivitytag
    ADD CONSTRAINT testletsensitivitytag_sensitivitytagid_fk FOREIGN KEY (sensitivitytagid) REFERENCES sensitivitytag(id) MATCH FULL;


--
-- Name: testletsensitivitytag_testletid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testletsensitivitytag
    ADD CONSTRAINT testletsensitivitytag_testletid_fk FOREIGN KEY (testletid) REFERENCES testlet(id) MATCH FULL;


--
-- Name: testletstimulusvariants_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testletstimulusvariants
    ADD CONSTRAINT testletstimulusvariants_fk1 FOREIGN KEY (testletid) REFERENCES testlet(id) MATCH FULL;


--
-- Name: testletstimulusvariants_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testletstimulusvariants
    ADD CONSTRAINT testletstimulusvariants_fk2 FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id) MATCH FULL;


--
-- Name: testpanel_assessmentprogramid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanel
    ADD CONSTRAINT testpanel_assessmentprogramid_fkey FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: testpanel_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanel
    ADD CONSTRAINT testpanel_fk1 FOREIGN KEY (testingprogramid) REFERENCES testingprogram(id);


--
-- Name: testpanel_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanelstage
    ADD CONSTRAINT testpanel_fk1 FOREIGN KEY (testpanelid) REFERENCES testpanel(id) MATCH FULL;


--
-- Name: testpanel_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanel
    ADD CONSTRAINT testpanel_fk2 FOREIGN KEY (contentareaid) REFERENCES contentarea(id);


--
-- Name: testpanel_fk4; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanel
    ADD CONSTRAINT testpanel_fk4 FOREIGN KEY (gradebandid) REFERENCES gradeband(id);


--
-- Name: testpanel_fk5; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanel
    ADD CONSTRAINT testpanel_fk5 FOREIGN KEY (assessmentid) REFERENCES assessment(id);


--
-- Name: testpanelfk3; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanel
    ADD CONSTRAINT testpanelfk3 FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: testpanelscoring_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanelscoring
    ADD CONSTRAINT testpanelscoring_fk1 FOREIGN KEY (testpanelid) REFERENCES testpanel(id) MATCH FULL;


--
-- Name: testpanelstagemapping_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanelstagemapping
    ADD CONSTRAINT testpanelstagemapping_fk1 FOREIGN KEY (testpanelstageid) REFERENCES testpanelstage(id) MATCH FULL;


--
-- Name: testpanelstagetestcollection_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpanelstagetestcollection
    ADD CONSTRAINT testpanelstagetestcollection_fk1 FOREIGN KEY (testpanelstageid) REFERENCES testpanelstage(id);


--
-- Name: testpart_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpart
    ADD CONSTRAINT testpart_testid_fkey FOREIGN KEY (testid) REFERENCES test(id) MATCH FULL;


--
-- Name: testpart_testsectioncontainerid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpart
    ADD CONSTRAINT testpart_testsectioncontainerid_fkey FOREIGN KEY (testsectioncontainerid) REFERENCES testsectioncontainer(id) MATCH FULL;


--
-- Name: testpriorparameter_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpriorparameter
    ADD CONSTRAINT testpriorparameter_fk1 FOREIGN KEY (testid) REFERENCES test(id) MATCH FULL;


--
-- Name: testpriorparameter_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpriorparameter
    ADD CONSTRAINT testpriorparameter_fk2 FOREIGN KEY (xtestconstructid) REFERENCES testconstruct(id) MATCH FULL;


--
-- Name: testpriorparameter_fk3; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testpriorparameter
    ADD CONSTRAINT testpriorparameter_fk3 FOREIGN KEY (ytestconstructid) REFERENCES testconstruct(id) MATCH FULL;


--
-- Name: testsection_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsection
    ADD CONSTRAINT testsection_testid_fkey FOREIGN KEY (testid) REFERENCES test(id);


--
-- Name: testsection_testsectioncontainerid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsection
    ADD CONSTRAINT testsection_testsectioncontainerid_fkey FOREIGN KEY (testsectioncontainerid) REFERENCES testsectioncontainer(id) MATCH FULL;


--
-- Name: testsection_toolsusageid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsection
    ADD CONSTRAINT testsection_toolsusageid_fkey FOREIGN KEY (toolsusageid) REFERENCES category(id);


--
-- Name: testsectioncontainer_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectioncontainer
    ADD CONSTRAINT testsectioncontainer_testid_fkey FOREIGN KEY (testid) REFERENCES test(id) MATCH FULL;


--
-- Name: testsectioncontainerconstruct_testconstructid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectioncontainerconstruct
    ADD CONSTRAINT testsectioncontainerconstruct_testconstructid_fkey FOREIGN KEY (testconstructid) REFERENCES testconstruct(id) MATCH FULL;


--
-- Name: testsectioncontainerconstruct_testsectioncontainerid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectioncontainerconstruct
    ADD CONSTRAINT testsectioncontainerconstruct_testsectioncontainerid_fkey FOREIGN KEY (testsectioncontainerid) REFERENCES testsectioncontainer(id) MATCH FULL;


--
-- Name: testsectioncontainerthetanode_testsectioncontainerid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectioncontainerthetanode
    ADD CONSTRAINT testsectioncontainerthetanode_testsectioncontainerid_fkey FOREIGN KEY (testsectioncontainerid) REFERENCES testsectioncontainer(id) MATCH FULL;


--
-- Name: testsectionresource_stimulusvariant_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectionresource
    ADD CONSTRAINT testsectionresource_stimulusvariant_fk FOREIGN KEY (stimulusvariantid) REFERENCES stimulusvariant(id);


--
-- Name: testsectionresource_testsection_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectionresource
    ADD CONSTRAINT testsectionresource_testsection_fk FOREIGN KEY (testsectionid) REFERENCES testsection(id);


--
-- Name: testsectionsrules_ruleid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectionsrules
    ADD CONSTRAINT testsectionsrules_ruleid_fkey FOREIGN KEY (ruleid) REFERENCES category(id);


--
-- Name: testsectionsrules_testsectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectionsrules
    ADD CONSTRAINT testsectionsrules_testsectionid_fkey FOREIGN KEY (testsectionid) REFERENCES testsection(id);


--
-- Name: testsectionstasks_testletid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectionstaskvariants
    ADD CONSTRAINT testsectionstasks_testletid_fkey FOREIGN KEY (testletid) REFERENCES testlet(id) MATCH FULL;


--
-- Name: testsectionstasks_testsectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectionstaskvariants
    ADD CONSTRAINT testsectionstasks_testsectionid_fkey FOREIGN KEY (testsectionid) REFERENCES testsection(id);


--
-- Name: testsectionstools_testsectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectionstools
    ADD CONSTRAINT testsectionstools_testsectionid_fkey FOREIGN KEY (testsectionid) REFERENCES testsection(id);


--
-- Name: testsectionstools_toolid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsectionstools
    ADD CONSTRAINT testsectionstools_toolid_fkey FOREIGN KEY (toolid) REFERENCES tool(id);


--
-- Name: testselectionstatistic_testsectioncontainerthetanodeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testselectionstatistic
    ADD CONSTRAINT testselectionstatistic_testsectioncontainerthetanodeid_fkey FOREIGN KEY (testsectioncontainerthetanodeid) REFERENCES testsectioncontainerthetanode(id) MATCH FULL;


--
-- Name: testselectionstatistic_testsectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testselectionstatistic
    ADD CONSTRAINT testselectionstatistic_testsectionid_fkey FOREIGN KEY (testsectionid) REFERENCES testsection(id) MATCH FULL;


--
-- Name: testsession_attendanceschoolid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT testsession_attendanceschoolid_fk FOREIGN KEY (attendanceschoolid) REFERENCES organization(id);


--
-- Name: testsession_gradecourseid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT testsession_gradecourseid_fk FOREIGN KEY (gradecourseid) REFERENCES gradecourse(id);


--
-- Name: testsession_operationaltestwindowid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT testsession_operationaltestwindowid_fk FOREIGN KEY (operationaltestwindowid) REFERENCES operationaltestwindow(id);


--
-- Name: testsession_rosterid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT testsession_rosterid_fkey FOREIGN KEY (rosterid) REFERENCES roster(id);


--
-- Name: testsession_stageid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT testsession_stageid_fk FOREIGN KEY (stageid) REFERENCES stage(id);


--
-- Name: testsession_status_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT testsession_status_fkey FOREIGN KEY (status) REFERENCES category(id);


--
-- Name: testsession_testtypeid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY testsession
    ADD CONSTRAINT testsession_testtypeid_fk FOREIGN KEY (testtypeid) REFERENCES testtype(id);


--
-- Name: testsessionid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY scoringassignment
    ADD CONSTRAINT testsessionid_fk FOREIGN KEY (testsessionid) REFERENCES testsession(id);


--
-- Name: textaccommodation_fk1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY textaccommodation
    ADD CONSTRAINT textaccommodation_fk1 FOREIGN KEY (contentgroupid) REFERENCES contentgroup(id) MATCH FULL;


--
-- Name: textaccommodation_fk2; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY textaccommodation
    ADD CONSTRAINT textaccommodation_fk2 FOREIGN KEY (varianttypeid) REFERENCES category(id) MATCH FULL;


--
-- Name: textaccommodation_fk3; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY textaccommodation
    ADD CONSTRAINT textaccommodation_fk3 FOREIGN KEY (accommodationtypeid) REFERENCES category(id) MATCH FULL;


--
-- Name: uploadfile_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY uploadfile
    ADD CONSTRAINT uploadfile_fkey1 FOREIGN KEY (statusid) REFERENCES category(id);


--
-- Name: userassmentprgm_aartuserid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userassessmentprogram
    ADD CONSTRAINT userassmentprgm_aartuserid_fk FOREIGN KEY (aartuserid) REFERENCES aartuser(id);


--
-- Name: userassmentprgm_assessmentprogramid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userassessmentprogram
    ADD CONSTRAINT userassmentprgm_assessmentprogramid_fk FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: useraudit_userid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY useraudit
    ADD CONSTRAINT useraudit_userid_fkey FOREIGN KEY (userid) REFERENCES aartuser(id);


--
-- Name: usermodule_category_enrollmentstatusid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usermodule
    ADD CONSTRAINT usermodule_category_enrollmentstatusid_fk FOREIGN KEY (enrollmentstatusid) REFERENCES category(id);


--
-- Name: usermodule_module_moduleid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usermodule
    ADD CONSTRAINT usermodule_module_moduleid_fk FOREIGN KEY (moduleid) REFERENCES module(id);


--
-- Name: usermodule_user_userid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usermodule
    ADD CONSTRAINT usermodule_user_userid_fk FOREIGN KEY (userid) REFERENCES aartuser(id);


--
-- Name: userpdtrainingdetails_createduser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userpdtrainingdetail
    ADD CONSTRAINT userpdtrainingdetails_createduser_fk FOREIGN KEY (createduser) REFERENCES aartuser(id);


--
-- Name: userpdtrainingdetails_modifieduser_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userpdtrainingdetail
    ADD CONSTRAINT userpdtrainingdetails_modifieduser_fk FOREIGN KEY (modifieduser) REFERENCES aartuser(id);


--
-- Name: userpdtrainingdetails_userid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userpdtrainingdetail
    ADD CONSTRAINT userpdtrainingdetails_userid_fk FOREIGN KEY (userid) REFERENCES aartuser(id);


--
-- Name: userreportupload_aartuserid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userreportupload
    ADD CONSTRAINT userreportupload_aartuserid_fk FOREIGN KEY (aartuserid) REFERENCES aartuser(id) MATCH FULL;


--
-- Name: userreportupload_category_filetypeid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY userreportupload
    ADD CONSTRAINT userreportupload_category_filetypeid_fk FOREIGN KEY (filetypeid) REFERENCES category(id);


--
-- Name: userresponse_foilid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestresponse
    ADD CONSTRAINT userresponse_foilid_fkey FOREIGN KEY (foilid) REFERENCES foil(id);


--
-- Name: userresponse_taskvariantid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestresponse
    ADD CONSTRAINT userresponse_taskvariantid_fkey FOREIGN KEY (taskvariantid) REFERENCES taskvariant(id);


--
-- Name: userresponse_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestresponse
    ADD CONSTRAINT userresponse_testid_fkey FOREIGN KEY (testid) REFERENCES test(id);


--
-- Name: userresponse_userid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestresponse
    ADD CONSTRAINT userresponse_userid_fkey FOREIGN KEY (userid) REFERENCES aartuser(id);


--
-- Name: userresponse_usertestsectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestresponse
    ADD CONSTRAINT userresponse_usertestsectionid_fkey FOREIGN KEY (usertestsectionid) REFERENCES usertestsection(id);


--
-- Name: usersecurityagreement_aartuserid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usersecurityagreement
    ADD CONSTRAINT usersecurityagreement_aartuserid_fk FOREIGN KEY (aartuserid) REFERENCES aartuser(id);


--
-- Name: usersecurityagreement_assessmentprogramid_fk; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usersecurityagreement
    ADD CONSTRAINT usersecurityagreement_assessmentprogramid_fk FOREIGN KEY (assessmentprogramid) REFERENCES assessmentprogram(id);


--
-- Name: usertestsectiontask_taskid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestsectiontask
    ADD CONSTRAINT usertestsectiontask_taskid_fkey FOREIGN KEY (taskid) REFERENCES taskvariant(id);


--
-- Name: usertestsectiontask_usertestsectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestsectiontask
    ADD CONSTRAINT usertestsectiontask_usertestsectionid_fkey FOREIGN KEY (usertestsectionid) REFERENCES usertestsection(id);


--
-- Name: usertestsectiontaskfoil_foilid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestsectiontaskfoil
    ADD CONSTRAINT usertestsectiontaskfoil_foilid_fkey FOREIGN KEY (foilid) REFERENCES foil(id);


--
-- Name: usertestsectiontaskfoil_taskid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestsectiontaskfoil
    ADD CONSTRAINT usertestsectiontaskfoil_taskid_fkey FOREIGN KEY (taskid) REFERENCES taskvariant(id);


--
-- Name: usertestsectiontaskfoil_usertestsectionid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertestsectiontaskfoil
    ADD CONSTRAINT usertestsectiontaskfoil_usertestsectionid_fkey FOREIGN KEY (usertestsectionid) REFERENCES usertestsection(id);


--
-- Name: ut_testid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aart
--

ALTER TABLE ONLY usertest
    ADD CONSTRAINT ut_testid_fkey FOREIGN KEY (testid) REFERENCES test(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: addglobalsystemadminrole(text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION addglobalsystemadminrole(emailaddress text) FROM PUBLIC;
REVOKE ALL ON FUNCTION addglobalsystemadminrole(emailaddress text) FROM aart;
GRANT ALL ON FUNCTION addglobalsystemadminrole(emailaddress text) TO aart;
GRANT ALL ON FUNCTION addglobalsystemadminrole(emailaddress text) TO PUBLIC;


--
-- Name: addnewenrollment(character varying, character varying, character varying, character varying, character varying, bigint, date, date, date, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION addnewenrollment(statestudent_identifier character varying, localstate_stuid character varying, aypsch character varying, attsch character varying, district character varying, schoolyear bigint, schentrydate date, distentrydate date, state_entrydate date, grade character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION addnewenrollment(statestudent_identifier character varying, localstate_stuid character varying, aypsch character varying, attsch character varying, district character varying, schoolyear bigint, schentrydate date, distentrydate date, state_entrydate date, grade character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION addnewenrollment(statestudent_identifier character varying, localstate_stuid character varying, aypsch character varying, attsch character varying, district character varying, schoolyear bigint, schentrydate date, distentrydate date, state_entrydate date, grade character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION addnewenrollment(statestudent_identifier character varying, localstate_stuid character varying, aypsch character varying, attsch character varying, district character varying, schoolyear bigint, schentrydate date, distentrydate date, state_entrydate date, grade character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: addon(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION addon(i bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION addon(i bigint) FROM aart;
GRANT ALL ON FUNCTION addon(i bigint) TO aart;
GRANT ALL ON FUNCTION addon(i bigint) TO PUBLIC;


--
-- Name: addorupdateresponse(bigint, bigint, bigint, bigint, bigint, bigint, bigint, text, numeric); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION addorupdateresponse(in_studentid bigint, in_testid bigint, in_testsectionid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION addorupdateresponse(in_studentid bigint, in_testid bigint, in_testsectionid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) FROM aart;
GRANT ALL ON FUNCTION addorupdateresponse(in_studentid bigint, in_testid bigint, in_testsectionid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) TO aart;
GRANT ALL ON FUNCTION addorupdateresponse(in_studentid bigint, in_testid bigint, in_testsectionid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) TO PUBLIC;


--
-- Name: addorupdateresponseparameters(bigint, bigint, bigint, bigint, numeric, numeric, numeric, numeric, integer); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION addorupdateresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_score numeric, in_avalue numeric, in_bvalue numeric, in_b2value numeric, in_formulacode integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION addorupdateresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_score numeric, in_avalue numeric, in_bvalue numeric, in_b2value numeric, in_formulacode integer) FROM aart;
GRANT ALL ON FUNCTION addorupdateresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_score numeric, in_avalue numeric, in_bvalue numeric, in_b2value numeric, in_formulacode integer) TO aart;
GRANT ALL ON FUNCTION addorupdateresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint, in_score numeric, in_avalue numeric, in_bvalue numeric, in_b2value numeric, in_formulacode integer) TO PUBLIC;


--
-- Name: addorupdatestudentadaptivetest(bigint, bigint, text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION addorupdatestudentadaptivetest(in_studenttestid bigint, in_nextexternaltestid bigint, in_message text) FROM PUBLIC;
REVOKE ALL ON FUNCTION addorupdatestudentadaptivetest(in_studenttestid bigint, in_nextexternaltestid bigint, in_message text) FROM aart;
GRANT ALL ON FUNCTION addorupdatestudentadaptivetest(in_studenttestid bigint, in_nextexternaltestid bigint, in_message text) TO aart;
GRANT ALL ON FUNCTION addorupdatestudentadaptivetest(in_studenttestid bigint, in_nextexternaltestid bigint, in_message text) TO PUBLIC;


--
-- Name: addstudenttorosterwithcourse(character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION addstudenttorosterwithcourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION addstudenttorosterwithcourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION addstudenttorosterwithcourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION addstudenttorosterwithcourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: addstudenttorosterwithnocourse(character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION addstudenttorosterwithnocourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION addstudenttorosterwithnocourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION addstudenttorosterwithnocourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION addstudenttorosterwithnocourse(state_student_identifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: calculate_avg_linkage_level(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION calculate_avg_linkage_level(publishedtestid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION calculate_avg_linkage_level(publishedtestid bigint) FROM aart;
GRANT ALL ON FUNCTION calculate_avg_linkage_level(publishedtestid bigint) TO aart;
GRANT ALL ON FUNCTION calculate_avg_linkage_level(publishedtestid bigint) TO PUBLIC;


--
-- Name: calculate_max_score(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION calculate_max_score(publishedtestid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION calculate_max_score(publishedtestid bigint) FROM aart;
GRANT ALL ON FUNCTION calculate_max_score(publishedtestid bigint) TO aart;
GRANT ALL ON FUNCTION calculate_max_score(publishedtestid bigint) TO PUBLIC;


--
-- Name: calculaterecommendedcomplexityband(bigint, bigint, bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION calculaterecommendedcomplexityband(studenttestsid bigint, stbandid bigint, incontentareaid bigint, schoolyear bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION calculaterecommendedcomplexityband(studenttestsid bigint, stbandid bigint, incontentareaid bigint, schoolyear bigint) FROM aart;
GRANT ALL ON FUNCTION calculaterecommendedcomplexityband(studenttestsid bigint, stbandid bigint, incontentareaid bigint, schoolyear bigint) TO aart;
GRANT ALL ON FUNCTION calculaterecommendedcomplexityband(studenttestsid bigint, stbandid bigint, incontentareaid bigint, schoolyear bigint) TO PUBLIC;


--
-- Name: changeeductorandrosternameonrosterwithcourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION changeeductorandrosternameonrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION changeeductorandrosternameonrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION changeeductorandrosternameonrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION changeeductorandrosternameonrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: changeeductorandrosternameonrosterwithnocourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION changeeductorandrosternameonrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION changeeductorandrosternameonrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION changeeductorandrosternameonrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION changeeductorandrosternameonrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: changeeductoronrosterwithcourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION changeeductoronrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION changeeductoronrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION changeeductoronrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION changeeductoronrosterwithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: changeeductoronrosterwithnocourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION changeeductoronrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION changeeductoronrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION changeeductoronrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION changeeductoronrosterwithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, old_teacher_uniquecommonid character varying, new_teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: changerosternamewithcourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION changerosternamewithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION changerosternamewithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION changerosternamewithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION changerosternamewithcourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: changerosternamewithnocourse(character varying, bigint, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION changerosternamewithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION changerosternamewithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION changerosternamewithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION changerosternamewithnocourse(att_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, old_roster_name character varying, new_roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: changesubjectonrosterwithnocourse(character varying, character varying, character varying, character varying, character varying, bigint, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION changesubjectonrosterwithnocourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION changesubjectonrosterwithnocourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION changesubjectonrosterwithnocourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION changesubjectonrosterwithnocourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: changesuborcourseonrosterwithcourse(character varying, character varying, character varying, character varying, character varying, character varying, character varying, bigint, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION changesuborcourseonrosterwithcourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, old_course_abbrname character varying, new_course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION changesuborcourseonrosterwithcourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, old_course_abbrname character varying, new_course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION changesuborcourseonrosterwithcourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, old_course_abbrname character varying, new_course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION changesuborcourseonrosterwithcourse(att_sch_displayidentifier character varying, old_subject_abbrname character varying, new_subject_abbrname character varying, old_course_abbrname character varying, new_course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, schoolyear bigint, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: check_student_pnp_and_stage4_test_availability(text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION check_student_pnp_and_stage4_test_availability(studentidentifier text) FROM PUBLIC;
REVOKE ALL ON FUNCTION check_student_pnp_and_stage4_test_availability(studentidentifier text) FROM aart;
GRANT ALL ON FUNCTION check_student_pnp_and_stage4_test_availability(studentidentifier text) TO aart;
GRANT ALL ON FUNCTION check_student_pnp_and_stage4_test_availability(studentidentifier text) TO PUBLIC;


--
-- Name: clearresponseparameters(bigint, bigint, bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION clearresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION clearresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint) FROM aart;
GRANT ALL ON FUNCTION clearresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint) TO aart;
GRANT ALL ON FUNCTION clearresponseparameters(in_testid bigint, in_studenttestid bigint, in_studenttestsectionid bigint, in_taskid bigint) TO PUBLIC;


--
-- Name: contracting_organization_id(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION contracting_organization_id(childid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION contracting_organization_id(childid bigint) FROM aart;
GRANT ALL ON FUNCTION contracting_organization_id(childid bigint) TO aart;
GRANT ALL ON FUNCTION contracting_organization_id(childid bigint) TO PUBLIC;


--
-- Name: convert_to_cpassorg(text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION convert_to_cpassorg(in_orgdisplayidentifer text) FROM PUBLIC;
REVOKE ALL ON FUNCTION convert_to_cpassorg(in_orgdisplayidentifer text) FROM aart;
GRANT ALL ON FUNCTION convert_to_cpassorg(in_orgdisplayidentifer text) TO aart;
GRANT ALL ON FUNCTION convert_to_cpassorg(in_orgdisplayidentifer text) TO PUBLIC;


--
-- Name: correct_student_enrollment(text, text, text, text, integer); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer) FROM aart;
GRANT ALL ON FUNCTION correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer) TO aart;
GRANT ALL ON FUNCTION correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer) TO PUBLIC;


--
-- Name: correct_student_enrollment(text, text, text, text, integer, integer); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer, _operationaltestwindowid integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer, _operationaltestwindowid integer) FROM aart;
GRANT ALL ON FUNCTION correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer, _operationaltestwindowid integer) TO aart;
GRANT ALL ON FUNCTION correct_student_enrollment(_state_student_identifier text, _subject text, _current_school text, _future_school text, _schoolyear integer, _operationaltestwindowid integer) TO PUBLIC;


--
-- Name: createnewrosterwithnocourse(character varying[], character varying, character varying, bigint, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION createnewrosterwithnocourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION createnewrosterwithnocourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION createnewrosterwithnocourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION createnewrosterwithnocourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: createnewrosterwithsubandcourse(character varying[], character varying, character varying, bigint, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION createnewrosterwithsubandcourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION createnewrosterwithsubandcourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION createnewrosterwithsubandcourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION createnewrosterwithsubandcourse(state_student_identifiers character varying[], att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: enrollments_count(text, bigint, bigint, bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION enrollments_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "EnrollCount" bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION enrollments_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "EnrollCount" bigint) FROM aart;
GRANT ALL ON FUNCTION enrollments_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "EnrollCount" bigint) TO aart;
GRANT ALL ON FUNCTION enrollments_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "EnrollCount" bigint) TO PUBLIC;


--
-- Name: exitstudent(character varying, character varying, character varying, numeric, date, bigint, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION exitstudent(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, exitreason numeric, exitdate date, schoolyear bigint, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION exitstudent(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, exitreason numeric, exitdate date, schoolyear bigint, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION exitstudent(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, exitreason numeric, exitdate date, schoolyear bigint, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION exitstudent(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, exitreason numeric, exitdate date, schoolyear bigint, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: explode_array(anyarray); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION explode_array(in_array anyarray) FROM PUBLIC;
REVOKE ALL ON FUNCTION explode_array(in_array anyarray) FROM aart;
GRANT ALL ON FUNCTION explode_array(in_array anyarray) TO aart;
GRANT ALL ON FUNCTION explode_array(in_array anyarray) TO PUBLIC;


--
-- Name: generate_student_password(); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION generate_student_password() FROM PUBLIC;
REVOKE ALL ON FUNCTION generate_student_password() FROM aart;
GRANT ALL ON FUNCTION generate_student_password() TO aart;
GRANT ALL ON FUNCTION generate_student_password() TO PUBLIC;


--
-- Name: get_adaptive_subsections(bigint, bigint, bigint, integer, integer, integer, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION get_adaptive_subsections(_testid bigint, _testpartid bigint, _testsectioncontainerid bigint, _thetaindex integer, _selectednumberofsubsections integer, _administratednumberofsubsections integer, _studentstestid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION get_adaptive_subsections(_testid bigint, _testpartid bigint, _testsectioncontainerid bigint, _thetaindex integer, _selectednumberofsubsections integer, _administratednumberofsubsections integer, _studentstestid bigint) FROM aart;
GRANT ALL ON FUNCTION get_adaptive_subsections(_testid bigint, _testpartid bigint, _testsectioncontainerid bigint, _thetaindex integer, _selectednumberofsubsections integer, _administratednumberofsubsections integer, _studentstestid bigint) TO aart;
GRANT ALL ON FUNCTION get_adaptive_subsections(_testid bigint, _testpartid bigint, _testsectioncontainerid bigint, _thetaindex integer, _selectednumberofsubsections integer, _administratednumberofsubsections integer, _studentstestid bigint) TO PUBLIC;


--
-- Name: get_adaptive_test(bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION get_adaptive_test(_testid bigint, _studentstestid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION get_adaptive_test(_testid bigint, _studentstestid bigint) FROM aart;
GRANT ALL ON FUNCTION get_adaptive_test(_testid bigint, _studentstestid bigint) TO aart;
GRANT ALL ON FUNCTION get_adaptive_test(_testid bigint, _studentstestid bigint) TO PUBLIC;


--
-- Name: get_random_number(integer, integer); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION get_random_number(integer, integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION get_random_number(integer, integer) FROM aart;
GRANT ALL ON FUNCTION get_random_number(integer, integer) TO aart;
GRANT ALL ON FUNCTION get_random_number(integer, integer) TO PUBLIC;


--
-- Name: getstudentassessmentprogram(bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION getstudentassessmentprogram(sid bigint, schoolyear bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION getstudentassessmentprogram(sid bigint, schoolyear bigint) FROM aart;
GRANT ALL ON FUNCTION getstudentassessmentprogram(sid bigint, schoolyear bigint) TO aart;
GRANT ALL ON FUNCTION getstudentassessmentprogram(sid bigint, schoolyear bigint) TO PUBLIC;


--
-- Name: identify_breached_testforms(text[], text, text, text, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) FROM PUBLIC;
REVOKE ALL ON FUNCTION identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) FROM aart;
GRANT ALL ON FUNCTION identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) TO aart;
GRANT ALL ON FUNCTION identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) TO PUBLIC;


--
-- Name: identify_breached_testforms(text[], text, text, text, bigint, text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, _state text, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) FROM PUBLIC;
REVOKE ALL ON FUNCTION identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, _state text, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) FROM aart;
GRANT ALL ON FUNCTION identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, _state text, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) TO aart;
GRANT ALL ON FUNCTION identify_breached_testforms(_statestudentidentifiers text[], _breachedtestsession text, _grade text, _stage text, _currentschoolyear bigint, _state text, OUT "StudentIdentifier" text, OUT "BreachedFormId" bigint, OUT "BreachedFormName" text, OUT "TestcollectionId" bigint, OUT "TestCollectionName" text) TO PUBLIC;


--
-- Name: inactivatestudenttestfromoldschool(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION inactivatestudenttestfromoldschool(old_sch_studentstestid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION inactivatestudenttestfromoldschool(old_sch_studentstestid bigint) FROM aart;
GRANT ALL ON FUNCTION inactivatestudenttestfromoldschool(old_sch_studentstestid bigint) TO aart;
GRANT ALL ON FUNCTION inactivatestudenttestfromoldschool(old_sch_studentstestid bigint) TO PUBLIC;


--
-- Name: inactivatestuteststrackerititestsessions(bigint, bigint, bigint, bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION inactivatestuteststrackerititestsessions(studenttestsid bigint, inactivestutestsecstatusid bigint, inactivestuteststatusid bigint, testsession_id bigint, student_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION inactivatestuteststrackerititestsessions(studenttestsid bigint, inactivestutestsecstatusid bigint, inactivestuteststatusid bigint, testsession_id bigint, student_id bigint) FROM aart;
GRANT ALL ON FUNCTION inactivatestuteststrackerititestsessions(studenttestsid bigint, inactivestutestsecstatusid bigint, inactivestuteststatusid bigint, testsession_id bigint, student_id bigint) TO aart;
GRANT ALL ON FUNCTION inactivatestuteststrackerititestsessions(studenttestsid bigint, inactivestutestsecstatusid bigint, inactivestuteststatusid bigint, testsession_id bigint, student_id bigint) TO PUBLIC;


--
-- Name: insert_adaptive_testsection(bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION insert_adaptive_testsection(_testpartid bigint, _studentstestid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION insert_adaptive_testsection(_testpartid bigint, _studentstestid bigint) FROM aart;
GRANT ALL ON FUNCTION insert_adaptive_testsection(_testpartid bigint, _studentstestid bigint) TO aart;
GRANT ALL ON FUNCTION insert_adaptive_testsection(_testpartid bigint, _studentstestid bigint) TO PUBLIC;


--
-- Name: insert_lockdown_date(text, timestamp with time zone, timestamp with time zone); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION insert_lockdown_date(statedisplayidentifier text, fromdate timestamp with time zone, todate timestamp with time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION insert_lockdown_date(statedisplayidentifier text, fromdate timestamp with time zone, todate timestamp with time zone) FROM aart;
GRANT ALL ON FUNCTION insert_lockdown_date(statedisplayidentifier text, fromdate timestamp with time zone, todate timestamp with time zone) TO aart;
GRANT ALL ON FUNCTION insert_lockdown_date(statedisplayidentifier text, fromdate timestamp with time zone, todate timestamp with time zone) TO PUBLIC;


--
-- Name: move_to_newtest(bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION move_to_newtest(epnewtestid bigint, epoldtestid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION move_to_newtest(epnewtestid bigint, epoldtestid bigint) FROM aart;
GRANT ALL ON FUNCTION move_to_newtest(epnewtestid bigint, epoldtestid bigint) TO aart;
GRANT ALL ON FUNCTION move_to_newtest(epnewtestid bigint, epoldtestid bigint) TO PUBLIC;


--
-- Name: moveandinactivatestudentstestsfromoldschooltonewschool(bigint, bigint, bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION moveandinactivatestudentstestsfromoldschooltonewschool(correct_enrollmentid bigint, correct_sch_testsessionid bigint, correct_sch_stuentstestid bigint, old_sch_studentstestid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION moveandinactivatestudentstestsfromoldschooltonewschool(correct_enrollmentid bigint, correct_sch_testsessionid bigint, correct_sch_stuentstestid bigint, old_sch_studentstestid bigint) FROM aart;
GRANT ALL ON FUNCTION moveandinactivatestudentstestsfromoldschooltonewschool(correct_enrollmentid bigint, correct_sch_testsessionid bigint, correct_sch_stuentstestid bigint, old_sch_studentstestid bigint) TO aart;
GRANT ALL ON FUNCTION moveandinactivatestudentstestsfromoldschooltonewschool(correct_enrollmentid bigint, correct_sch_testsessionid bigint, correct_sch_stuentstestid bigint, old_sch_studentstestid bigint) TO PUBLIC;


--
-- Name: movecompletedtestsandresetstwithcourse(bigint, bigint, bigint, bigint, bigint, bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION movecompletedtestsandresetstwithcourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, course_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION movecompletedtestsandresetstwithcourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, course_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) FROM aart;
GRANT ALL ON FUNCTION movecompletedtestsandresetstwithcourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, course_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) TO aart;
GRANT ALL ON FUNCTION movecompletedtestsandresetstwithcourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, course_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) TO PUBLIC;


--
-- Name: movecompletedtestsandresetstwithnocourse(bigint, bigint, bigint, bigint, bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION movecompletedtestsandresetstwithnocourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION movecompletedtestsandresetstwithnocourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) FROM aart;
GRANT ALL ON FUNCTION movecompletedtestsandresetstwithnocourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) TO aart;
GRANT ALL ON FUNCTION movecompletedtestsandresetstwithnocourse(student_id bigint, enrollment_id bigint, subjectarea_id bigint, new_roster_id bigint, school_year bigint, attendance_schid bigint) TO PUBLIC;


--
-- Name: movectsfromrosterwithcourse(character varying, character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION movectsfromrosterwithcourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, course_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION movectsfromrosterwithcourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, course_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION movectsfromrosterwithcourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, course_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION movectsfromrosterwithcourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, course_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: movectsfromrosterwithnocourse(character varying, character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION movectsfromrosterwithnocourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION movectsfromrosterwithnocourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION movectsfromrosterwithnocourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION movectsfromrosterwithnocourse(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, old_roster_teacheridentifier character varying, schoolyear bigint, new_aypsch character varying, new_attsch character varying, sub_abbrname character varying, old_roster_name character varying, new_roster_teacheridentifier character varying, new_roster_name character varying, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: non_empty_id(bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION non_empty_id(i bigint, j bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION non_empty_id(i bigint, j bigint) FROM aart;
GRANT ALL ON FUNCTION non_empty_id(i bigint, j bigint) TO aart;
GRANT ALL ON FUNCTION non_empty_id(i bigint, j bigint) TO PUBLIC;


--
-- Name: nvl(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION nvl(i bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION nvl(i bigint) FROM aart;
GRANT ALL ON FUNCTION nvl(i bigint) TO aart;
GRANT ALL ON FUNCTION nvl(i bigint) TO PUBLIC;


--
-- Name: nvltest(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION nvltest(testsessionid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION nvltest(testsessionid bigint) FROM aart;
GRANT ALL ON FUNCTION nvltest(testsessionid bigint) TO aart;
GRANT ALL ON FUNCTION nvltest(testsessionid bigint) TO PUBLIC;


--
-- Name: organization_child_tree(bigint, integer); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION organization_child_tree(parentid bigint, currentlevel integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION organization_child_tree(parentid bigint, currentlevel integer) FROM aart;
GRANT ALL ON FUNCTION organization_child_tree(parentid bigint, currentlevel integer) TO aart;
GRANT ALL ON FUNCTION organization_child_tree(parentid bigint, currentlevel integer) TO PUBLIC;


--
-- Name: organization_children(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION organization_children(parentid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION organization_children(parentid bigint) FROM aart;
GRANT ALL ON FUNCTION organization_children(parentid bigint) TO aart;
GRANT ALL ON FUNCTION organization_children(parentid bigint) TO PUBLIC;


--
-- Name: organization_children_oftype(bigint, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION organization_children_oftype(parentid bigint, typecode character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION organization_children_oftype(parentid bigint, typecode character varying) FROM aart;
GRANT ALL ON FUNCTION organization_children_oftype(parentid bigint, typecode character varying) TO aart;
GRANT ALL ON FUNCTION organization_children_oftype(parentid bigint, typecode character varying) TO PUBLIC;


--
-- Name: organization_parent(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION organization_parent(childid bigint, OUT id bigint, OUT organizationname character varying, OUT displayidentifier character varying, OUT organizationtypeid bigint, OUT welcomemessage character varying, OUT buildinguniqueness bigint, OUT schoolstartdate timestamp with time zone, OUT schoolenddate timestamp with time zone, OUT contractingorganization boolean, OUT expirepasswords boolean, OUT expirationdatetype bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION organization_parent(childid bigint, OUT id bigint, OUT organizationname character varying, OUT displayidentifier character varying, OUT organizationtypeid bigint, OUT welcomemessage character varying, OUT buildinguniqueness bigint, OUT schoolstartdate timestamp with time zone, OUT schoolenddate timestamp with time zone, OUT contractingorganization boolean, OUT expirepasswords boolean, OUT expirationdatetype bigint) FROM aart;
GRANT ALL ON FUNCTION organization_parent(childid bigint, OUT id bigint, OUT organizationname character varying, OUT displayidentifier character varying, OUT organizationtypeid bigint, OUT welcomemessage character varying, OUT buildinguniqueness bigint, OUT schoolstartdate timestamp with time zone, OUT schoolenddate timestamp with time zone, OUT contractingorganization boolean, OUT expirepasswords boolean, OUT expirationdatetype bigint) TO aart;
GRANT ALL ON FUNCTION organization_parent(childid bigint, OUT id bigint, OUT organizationname character varying, OUT displayidentifier character varying, OUT organizationtypeid bigint, OUT welcomemessage character varying, OUT buildinguniqueness bigint, OUT schoolstartdate timestamp with time zone, OUT schoolenddate timestamp with time zone, OUT contractingorganization boolean, OUT expirepasswords boolean, OUT expirationdatetype bigint) TO PUBLIC;


--
-- Name: organization_parent_tree(bigint, integer); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION organization_parent_tree(childid bigint, currentlevel integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION organization_parent_tree(childid bigint, currentlevel integer) FROM aart;
GRANT ALL ON FUNCTION organization_parent_tree(childid bigint, currentlevel integer) TO aart;
GRANT ALL ON FUNCTION organization_parent_tree(childid bigint, currentlevel integer) TO PUBLIC;


--
-- Name: organization_school_year(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION organization_school_year(orgid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION organization_school_year(orgid bigint) FROM aart;
GRANT ALL ON FUNCTION organization_school_year(orgid bigint) TO aart;
GRANT ALL ON FUNCTION organization_school_year(orgid bigint) TO PUBLIC;


--
-- Name: pdaddorupdateresponse(bigint, bigint, bigint, bigint, bigint, bigint, text, numeric); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION pdaddorupdateresponse(in_userid bigint, in_testid bigint, in_testsectionid bigint, in_usertestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION pdaddorupdateresponse(in_userid bigint, in_testid bigint, in_testsectionid bigint, in_usertestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) FROM aart;
GRANT ALL ON FUNCTION pdaddorupdateresponse(in_userid bigint, in_testid bigint, in_testsectionid bigint, in_usertestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) TO aart;
GRANT ALL ON FUNCTION pdaddorupdateresponse(in_userid bigint, in_testid bigint, in_testsectionid bigint, in_usertestsectionid bigint, in_taskid bigint, in_foilid bigint, in_response text, in_score numeric) TO PUBLIC;


--
-- Name: pdenrolltomodule(bigint, bigint, bigint, bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION pdenrolltomodule(in_moduleid bigint, in_userid bigint, in_enrolledstatusid bigint, in_stateid bigint, in_createduserid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION pdenrolltomodule(in_moduleid bigint, in_userid bigint, in_enrolledstatusid bigint, in_stateid bigint, in_createduserid bigint) FROM aart;
GRANT ALL ON FUNCTION pdenrolltomodule(in_moduleid bigint, in_userid bigint, in_enrolledstatusid bigint, in_stateid bigint, in_createduserid bigint) TO aart;
GRANT ALL ON FUNCTION pdenrolltomodule(in_moduleid bigint, in_userid bigint, in_enrolledstatusid bigint, in_stateid bigint, in_createduserid bigint) TO PUBLIC;


--
-- Name: pdupdatesectionstatusandgetstatus(bigint, bigint, text, text, text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION pdupdatesectionstatusandgetstatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text) FROM PUBLIC;
REVOKE ALL ON FUNCTION pdupdatesectionstatusandgetstatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text) FROM aart;
GRANT ALL ON FUNCTION pdupdatesectionstatusandgetstatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text) TO aart;
GRANT ALL ON FUNCTION pdupdatesectionstatusandgetstatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text) TO PUBLIC;


--
-- Name: populatestudentpnpjson(); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION populatestudentpnpjson() FROM PUBLIC;
REVOKE ALL ON FUNCTION populatestudentpnpjson() FROM aart;
GRANT ALL ON FUNCTION populatestudentpnpjson() TO aart;
GRANT ALL ON FUNCTION populatestudentpnpjson() TO PUBLIC;


--
-- Name: publish_republishing_test(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION publish_republishing_test(publishedtestid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION publish_republishing_test(publishedtestid bigint) FROM aart;
GRANT ALL ON FUNCTION publish_republishing_test(publishedtestid bigint) TO aart;
GRANT ALL ON FUNCTION publish_republishing_test(publishedtestid bigint) TO PUBLIC;


--
-- Name: qctest(boolean, boolean); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION qctest(highstake boolean, qccomplete boolean) FROM PUBLIC;
REVOKE ALL ON FUNCTION qctest(highstake boolean, qccomplete boolean) FROM aart;
GRANT ALL ON FUNCTION qctest(highstake boolean, qccomplete boolean) TO aart;
GRANT ALL ON FUNCTION qctest(highstake boolean, qccomplete boolean) TO PUBLIC;


--
-- Name: randomizestudenttest(text, text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION randomizestudenttest(in_username text, in_testtypename text) FROM PUBLIC;
REVOKE ALL ON FUNCTION randomizestudenttest(in_username text, in_testtypename text) FROM aart;
GRANT ALL ON FUNCTION randomizestudenttest(in_username text, in_testtypename text) TO aart;
GRANT ALL ON FUNCTION randomizestudenttest(in_username text, in_testtypename text) TO PUBLIC;


--
-- Name: reactivate_student_assessment_program(bigint, text, integer); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION reactivate_student_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION reactivate_student_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) FROM aart;
GRANT ALL ON FUNCTION reactivate_student_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) TO aart;
GRANT ALL ON FUNCTION reactivate_student_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) TO PUBLIC;


--
-- Name: reactivate_student_from_assessment_program(bigint, text, integer); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION reactivate_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION reactivate_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) FROM aart;
GRANT ALL ON FUNCTION reactivate_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) TO aart;
GRANT ALL ON FUNCTION reactivate_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) TO PUBLIC;


--
-- Name: refresh_organization_detail(); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION refresh_organization_detail() FROM PUBLIC;
REVOKE ALL ON FUNCTION refresh_organization_detail() FROM aart;
GRANT ALL ON FUNCTION refresh_organization_detail() TO aart;
GRANT ALL ON FUNCTION refresh_organization_detail() TO PUBLIC;


--
-- Name: remove_student_from_assessment_program(bigint, text, integer); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION remove_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION remove_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) FROM aart;
GRANT ALL ON FUNCTION remove_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) TO aart;
GRANT ALL ON FUNCTION remove_student_from_assessment_program(_studentid bigint, _assessmentprogramabbr text, _schoolyear integer) TO PUBLIC;


--
-- Name: remove_student_itiplan(bigint, text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION remove_student_itiplan(in_studentid bigint, in_essentialelement text) FROM PUBLIC;
REVOKE ALL ON FUNCTION remove_student_itiplan(in_studentid bigint, in_essentialelement text) FROM aart;
GRANT ALL ON FUNCTION remove_student_itiplan(in_studentid bigint, in_essentialelement text) TO aart;
GRANT ALL ON FUNCTION remove_student_itiplan(in_studentid bigint, in_essentialelement text) TO PUBLIC;


--
-- Name: remove_testsession_data(bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION remove_testsession_data(in_testsessionid bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION remove_testsession_data(in_testsessionid bigint) FROM aart;
GRANT ALL ON FUNCTION remove_testsession_data(in_testsessionid bigint) TO aart;
GRANT ALL ON FUNCTION remove_testsession_data(in_testsessionid bigint) TO PUBLIC;


--
-- Name: removeallstudentsfromrosterwithcourse(character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION removeallstudentsfromrosterwithcourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION removeallstudentsfromrosterwithcourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) FROM aart;
GRANT ALL ON FUNCTION removeallstudentsfromrosterwithcourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) TO aart;
GRANT ALL ON FUNCTION removeallstudentsfromrosterwithcourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) TO PUBLIC;


--
-- Name: removeallstudentsfromrosterwithnocourse(character varying, character varying, character varying, bigint, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION removeallstudentsfromrosterwithnocourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION removeallstudentsfromrosterwithnocourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) FROM aart;
GRANT ALL ON FUNCTION removeallstudentsfromrosterwithnocourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) TO aart;
GRANT ALL ON FUNCTION removeallstudentsfromrosterwithnocourse(ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) TO PUBLIC;


--
-- Name: removestudentfromrosterwithcourse(character varying, character varying, character varying, character varying, bigint, character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION removestudentfromrosterwithcourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION removestudentfromrosterwithcourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) FROM aart;
GRANT ALL ON FUNCTION removestudentfromrosterwithcourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) TO aart;
GRANT ALL ON FUNCTION removestudentfromrosterwithcourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, course_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) TO PUBLIC;


--
-- Name: removestudentfromrosterwithnocourse(character varying, character varying, character varying, character varying, bigint, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION removestudentfromrosterwithnocourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION removestudentfromrosterwithnocourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) FROM aart;
GRANT ALL ON FUNCTION removestudentfromrosterwithnocourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) TO aart;
GRANT ALL ON FUNCTION removestudentfromrosterwithnocourse(statestudent_identifier character varying, ayp_sch_displayidentifier character varying, att_sch_displayidentifier character varying, statedisplayidentifier character varying, schoolyear bigint, subject_abbrname character varying, teacher_uniquecommonid character varying, roster_name character varying) TO PUBLIC;


--
-- Name: reportassessmentprogram_fn(text, text, text, text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION reportassessmentprogram_fn(assessmentprogramcode text, reporttypecode text, subjectcode text, authoritycode text) FROM PUBLIC;
REVOKE ALL ON FUNCTION reportassessmentprogram_fn(assessmentprogramcode text, reporttypecode text, subjectcode text, authoritycode text) FROM aart;
GRANT ALL ON FUNCTION reportassessmentprogram_fn(assessmentprogramcode text, reporttypecode text, subjectcode text, authoritycode text) TO aart;
GRANT ALL ON FUNCTION reportassessmentprogram_fn(assessmentprogramcode text, reporttypecode text, subjectcode text, authoritycode text) TO PUBLIC;


--
-- Name: string_to_integer_array(text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION string_to_integer_array(inputtext text) FROM PUBLIC;
REVOKE ALL ON FUNCTION string_to_integer_array(inputtext text) FROM aart;
GRANT ALL ON FUNCTION string_to_integer_array(inputtext text) TO aart;
GRANT ALL ON FUNCTION string_to_integer_array(inputtext text) TO PUBLIC;


--
-- Name: studentstests_count(text, bigint, bigint, bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION studentstests_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "StudentCount" bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION studentstests_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "StudentCount" bigint) FROM aart;
GRANT ALL ON FUNCTION studentstests_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "StudentCount" bigint) TO aart;
GRANT ALL ON FUNCTION studentstests_count(_assessmentprogram text, _stataeid bigint, _contentareaid bigint, _gradelevel bigint, _currentschoolyear bigint, OUT "State" text, OUT "GradeCourse" text, OUT "Subject" text, OUT "StudentCount" bigint) TO PUBLIC;


--
-- Name: transferstudent(character varying, character varying, character varying, numeric, date, bigint, character varying, character varying, character varying, date, date, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION transferstudent(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, exitreason numeric, exitdate date, schoolyear bigint, new_aypsch character varying, new_attsch character varying, new_dist character varying, new_schentrydate date, new_distentrydate date, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION transferstudent(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, exitreason numeric, exitdate date, schoolyear bigint, new_aypsch character varying, new_attsch character varying, new_dist character varying, new_schentrydate date, new_distentrydate date, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION transferstudent(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, exitreason numeric, exitdate date, schoolyear bigint, new_aypsch character varying, new_attsch character varying, new_dist character varying, new_schentrydate date, new_distentrydate date, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION transferstudent(statestudent_identifier character varying, old_aypsch character varying, old_attsch character varying, exitreason numeric, exitdate date, schoolyear bigint, new_aypsch character varying, new_attsch character varying, new_dist character varying, new_schentrydate date, new_distentrydate date, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: update_breached_test(text[], text, text, text, text, text, text, bigint, text, text, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION update_breached_test(_statestudentidentifiers text[], _grade text, _contentarea text, _assessmentprogram text, _stage text, _state text, _breachedtestsession text, _breachedtest bigint, _clearscope text, _orgname text, _currentschoolyear bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION update_breached_test(_statestudentidentifiers text[], _grade text, _contentarea text, _assessmentprogram text, _stage text, _state text, _breachedtestsession text, _breachedtest bigint, _clearscope text, _orgname text, _currentschoolyear bigint) FROM aart;
GRANT ALL ON FUNCTION update_breached_test(_statestudentidentifiers text[], _grade text, _contentarea text, _assessmentprogram text, _stage text, _state text, _breachedtestsession text, _breachedtest bigint, _clearscope text, _orgname text, _currentschoolyear bigint) TO aart;
GRANT ALL ON FUNCTION update_breached_test(_statestudentidentifiers text[], _grade text, _contentarea text, _assessmentprogram text, _stage text, _state text, _breachedtestsession text, _breachedtest bigint, _clearscope text, _orgname text, _currentschoolyear bigint) TO PUBLIC;


--
-- Name: update_special_circumstance_status(); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION update_special_circumstance_status() FROM PUBLIC;
REVOKE ALL ON FUNCTION update_special_circumstance_status() FROM aart;
GRANT ALL ON FUNCTION update_special_circumstance_status() TO aart;
GRANT ALL ON FUNCTION update_special_circumstance_status() TO PUBLIC;


--
-- Name: modulereport; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE modulereport FROM PUBLIC;
REVOKE ALL ON TABLE modulereport FROM aart;
GRANT ALL ON TABLE modulereport TO aart;
GRANT SELECT ON TABLE modulereport TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE modulereport TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE modulereport TO etl_user;


--
-- Name: updateandgetqueuedmodulereport(bigint, bigint); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION updateandgetqueuedmodulereport(bigint, bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION updateandgetqueuedmodulereport(bigint, bigint) FROM aart;
GRANT ALL ON FUNCTION updateandgetqueuedmodulereport(bigint, bigint) TO aart;
GRANT ALL ON FUNCTION updateandgetqueuedmodulereport(bigint, bigint) TO PUBLIC;


--
-- Name: updatesectionstatusandgetteststatus(bigint, bigint, text, text, text, double precision); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION updatesectionstatusandgetteststatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision) FROM PUBLIC;
REVOKE ALL ON FUNCTION updatesectionstatusandgetteststatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision) FROM aart;
GRANT ALL ON FUNCTION updatesectionstatusandgetteststatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision) TO aart;
GRANT ALL ON FUNCTION updatesectionstatusandgetteststatus(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision) TO PUBLIC;


--
-- Name: updatesectionstatusandgetteststatusforlcs(bigint, bigint, text, text, text, double precision, timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION updatesectionstatusandgetteststatusforlcs(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision, in_stdteststartdatetime timestamp without time zone, in_stdtestenddatetime timestamp without time zone, in_stdtestsecstartdatetime timestamp without time zone, in_stdtestsecenddatetime timestamp without time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION updatesectionstatusandgetteststatusforlcs(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision, in_stdteststartdatetime timestamp without time zone, in_stdtestenddatetime timestamp without time zone, in_stdtestsecstartdatetime timestamp without time zone, in_stdtestsecenddatetime timestamp without time zone) FROM aart;
GRANT ALL ON FUNCTION updatesectionstatusandgetteststatusforlcs(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision, in_stdteststartdatetime timestamp without time zone, in_stdtestenddatetime timestamp without time zone, in_stdtestsecstartdatetime timestamp without time zone, in_stdtestsecenddatetime timestamp without time zone) TO aart;
GRANT ALL ON FUNCTION updatesectionstatusandgetteststatusforlcs(in_studenttestid bigint, in_testsectionid bigint, in_sectionscore text, in_testscore text, in_categorycode text, in_interimthetavalue double precision, in_stdteststartdatetime timestamp without time zone, in_stdtestenddatetime timestamp without time zone, in_stdtestsecstartdatetime timestamp without time zone, in_stdtestsecenddatetime timestamp without time zone) TO PUBLIC;


--
-- Name: updatestatestudentidentifier(character varying, character varying, character varying, character varying, bigint, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION updatestatestudentidentifier(old_statestudent_identifier character varying, new_statestudent_identifier character varying, aypsch character varying, attsch character varying, schoolyear bigint, statedisplayidentifier character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION updatestatestudentidentifier(old_statestudent_identifier character varying, new_statestudent_identifier character varying, aypsch character varying, attsch character varying, schoolyear bigint, statedisplayidentifier character varying) FROM aart;
GRANT ALL ON FUNCTION updatestatestudentidentifier(old_statestudent_identifier character varying, new_statestudent_identifier character varying, aypsch character varying, attsch character varying, schoolyear bigint, statedisplayidentifier character varying) TO aart;
GRANT ALL ON FUNCTION updatestatestudentidentifier(old_statestudent_identifier character varying, new_statestudent_identifier character varying, aypsch character varying, attsch character varying, schoolyear bigint, statedisplayidentifier character varying) TO PUBLIC;


--
-- Name: updatestudentdemographics(character varying, character varying, character varying, character varying, boolean, character varying, character varying, character varying, character varying, bigint, character varying, date, integer); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION updatestudentdemographics(student_firstname character varying, student_lastname character varying, state_student_identifier character varying, state_displayidentifier character varying, hispanic_ethnicity boolean, race character varying, esolcode character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, grade_abbrname character varying, birthdate date, student_gender integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION updatestudentdemographics(student_firstname character varying, student_lastname character varying, state_student_identifier character varying, state_displayidentifier character varying, hispanic_ethnicity boolean, race character varying, esolcode character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, grade_abbrname character varying, birthdate date, student_gender integer) FROM aart;
GRANT ALL ON FUNCTION updatestudentdemographics(student_firstname character varying, student_lastname character varying, state_student_identifier character varying, state_displayidentifier character varying, hispanic_ethnicity boolean, race character varying, esolcode character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, grade_abbrname character varying, birthdate date, student_gender integer) TO aart;
GRANT ALL ON FUNCTION updatestudentdemographics(student_firstname character varying, student_lastname character varying, state_student_identifier character varying, state_displayidentifier character varying, hispanic_ethnicity boolean, race character varying, esolcode character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, grade_abbrname character varying, birthdate date, student_gender integer) TO PUBLIC;


--
-- Name: updatestudentgrade(character varying, character varying, character varying, character varying, bigint, character varying, character varying); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION updatestudentgrade(state_student_identifier character varying, state_displayidentifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, old_grade character varying, new_grade character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION updatestudentgrade(state_student_identifier character varying, state_displayidentifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, old_grade character varying, new_grade character varying) FROM aart;
GRANT ALL ON FUNCTION updatestudentgrade(state_student_identifier character varying, state_displayidentifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, old_grade character varying, new_grade character varying) TO aart;
GRANT ALL ON FUNCTION updatestudentgrade(state_student_identifier character varying, state_displayidentifier character varying, att_sch_displayidentifier character varying, ayp_sch_displayidentifier character varying, schoolyear bigint, old_grade character varying, new_grade character varying) TO PUBLIC;


--
-- Name: uploadexternalstudentfilestoep(text); Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON FUNCTION uploadexternalstudentfilestoep(indexfilename text) FROM PUBLIC;
REVOKE ALL ON FUNCTION uploadexternalstudentfilestoep(indexfilename text) FROM aart;
GRANT ALL ON FUNCTION uploadexternalstudentfilestoep(indexfilename text) TO aart;
GRANT ALL ON FUNCTION uploadexternalstudentfilestoep(indexfilename text) TO PUBLIC;


--
-- Name: aartuser; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE aartuser FROM PUBLIC;
REVOKE ALL ON TABLE aartuser FROM aart;
GRANT ALL ON TABLE aartuser TO aart;
GRANT SELECT ON TABLE aartuser TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE aartuser TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE aartuser TO etl_user;


--
-- Name: aartuser_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE aartuser_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE aartuser_id_seq FROM aart;
GRANT ALL ON SEQUENCE aartuser_id_seq TO aart;
GRANT SELECT ON SEQUENCE aartuser_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE aartuser_id_seq TO aart_user;
GRANT ALL ON SEQUENCE aartuser_id_seq TO etl_user;


--
-- Name: accessibilityfile_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE accessibilityfile_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE accessibilityfile_id_seq FROM aart;
GRANT ALL ON SEQUENCE accessibilityfile_id_seq TO aart;
GRANT SELECT ON SEQUENCE accessibilityfile_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE accessibilityfile_id_seq TO aart_user;
GRANT ALL ON SEQUENCE accessibilityfile_id_seq TO etl_user;


--
-- Name: accessibilityfile; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE accessibilityfile FROM PUBLIC;
REVOKE ALL ON TABLE accessibilityfile FROM aart;
GRANT ALL ON TABLE accessibilityfile TO aart;
GRANT SELECT ON TABLE accessibilityfile TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE accessibilityfile TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE accessibilityfile TO etl_user;


--
-- Name: activity; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE activity FROM PUBLIC;
REVOKE ALL ON TABLE activity FROM aart;
GRANT ALL ON TABLE activity TO aart;
GRANT SELECT ON TABLE activity TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE activity TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE activity TO etl_user;


--
-- Name: activity_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE activity_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE activity_id_seq FROM aart;
GRANT ALL ON SEQUENCE activity_id_seq TO aart;
GRANT SELECT ON SEQUENCE activity_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE activity_id_seq TO aart_user;
GRANT ALL ON SEQUENCE activity_id_seq TO etl_user;


--
-- Name: ampexcludeditems; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE ampexcludeditems FROM PUBLIC;
REVOKE ALL ON TABLE ampexcludeditems FROM aart;
GRANT ALL ON TABLE ampexcludeditems TO aart;
GRANT SELECT ON TABLE ampexcludeditems TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ampexcludeditems TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ampexcludeditems TO etl_user;


--
-- Name: answered_item_summary_by_node; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE answered_item_summary_by_node FROM PUBLIC;
REVOKE ALL ON TABLE answered_item_summary_by_node FROM aart;
GRANT ALL ON TABLE answered_item_summary_by_node TO aart;
GRANT SELECT ON TABLE answered_item_summary_by_node TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE answered_item_summary_by_node TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE answered_item_summary_by_node TO etl_user;


--
-- Name: assessment; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE assessment FROM PUBLIC;
REVOKE ALL ON TABLE assessment FROM aart;
GRANT ALL ON TABLE assessment TO aart;
GRANT SELECT ON TABLE assessment TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE assessment TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE assessment TO etl_user;


--
-- Name: assessment_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE assessment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE assessment_id_seq FROM aart;
GRANT ALL ON SEQUENCE assessment_id_seq TO aart;
GRANT SELECT ON SEQUENCE assessment_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE assessment_id_seq TO aart_user;
GRANT ALL ON SEQUENCE assessment_id_seq TO etl_user;


--
-- Name: assessment_id_seq1; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE assessment_id_seq1 FROM PUBLIC;
REVOKE ALL ON SEQUENCE assessment_id_seq1 FROM aart;
GRANT ALL ON SEQUENCE assessment_id_seq1 TO aart;
GRANT SELECT ON SEQUENCE assessment_id_seq1 TO aart_reader;
GRANT ALL ON SEQUENCE assessment_id_seq1 TO aart_user;
GRANT ALL ON SEQUENCE assessment_id_seq1 TO etl_user;


--
-- Name: assessmentprogram; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE assessmentprogram FROM PUBLIC;
REVOKE ALL ON TABLE assessmentprogram FROM aart;
GRANT ALL ON TABLE assessmentprogram TO aart;
GRANT SELECT ON TABLE assessmentprogram TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE assessmentprogram TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE assessmentprogram TO etl_user;


--
-- Name: assessmentstestcollections; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE assessmentstestcollections FROM PUBLIC;
REVOKE ALL ON TABLE assessmentstestcollections FROM aart;
GRANT ALL ON TABLE assessmentstestcollections TO aart;
GRANT SELECT ON TABLE assessmentstestcollections TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE assessmentstestcollections TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE assessmentstestcollections TO etl_user;


--
-- Name: category; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE category FROM PUBLIC;
REVOKE ALL ON TABLE category FROM aart;
GRANT ALL ON TABLE category TO aart;
GRANT SELECT ON TABLE category TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE category TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE category TO etl_user;


--
-- Name: enrollment; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE enrollment FROM PUBLIC;
REVOKE ALL ON TABLE enrollment FROM aart;
GRANT ALL ON TABLE enrollment TO aart;
GRANT SELECT ON TABLE enrollment TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE enrollment TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE enrollment TO etl_user;


--
-- Name: enrollmentsrosters; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE enrollmentsrosters FROM PUBLIC;
REVOKE ALL ON TABLE enrollmentsrosters FROM aart;
GRANT ALL ON TABLE enrollmentsrosters TO aart;
GRANT SELECT ON TABLE enrollmentsrosters TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE enrollmentsrosters TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE enrollmentsrosters TO etl_user;


--
-- Name: organization; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE organization FROM PUBLIC;
REVOKE ALL ON TABLE organization FROM aart;
GRANT ALL ON TABLE organization TO aart;
GRANT SELECT ON TABLE organization TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organization TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organization TO etl_user;


--
-- Name: organizationrelation; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE organizationrelation FROM PUBLIC;
REVOKE ALL ON TABLE organizationrelation FROM aart;
GRANT ALL ON TABLE organizationrelation TO aart;
GRANT SELECT ON TABLE organizationrelation TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationrelation TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationrelation TO etl_user;


--
-- Name: roster; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE roster FROM PUBLIC;
REVOKE ALL ON TABLE roster FROM aart;
GRANT ALL ON TABLE roster TO aart;
GRANT SELECT ON TABLE roster TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE roster TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE roster TO etl_user;


--
-- Name: studentstests; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentstests FROM PUBLIC;
REVOKE ALL ON TABLE studentstests FROM aart;
GRANT ALL ON TABLE studentstests TO aart;
GRANT SELECT ON TABLE studentstests TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstests TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstests TO etl_user;


--
-- Name: test; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE test FROM PUBLIC;
REVOKE ALL ON TABLE test FROM aart;
GRANT ALL ON TABLE test TO aart;
GRANT SELECT ON TABLE test TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE test TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE test TO etl_user;


--
-- Name: testcollection; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testcollection FROM PUBLIC;
REVOKE ALL ON TABLE testcollection FROM aart;
GRANT ALL ON TABLE testcollection TO aart;
GRANT SELECT ON TABLE testcollection TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testcollection TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testcollection TO etl_user;


--
-- Name: testingprogram; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testingprogram FROM PUBLIC;
REVOKE ALL ON TABLE testingprogram FROM aart;
GRANT ALL ON TABLE testingprogram TO aart;
GRANT SELECT ON TABLE testingprogram TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testingprogram TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testingprogram TO etl_user;


--
-- Name: testsession; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testsession FROM PUBLIC;
REVOKE ALL ON TABLE testsession FROM aart;
GRANT ALL ON TABLE testsession TO aart;
GRANT SELECT ON TABLE testsession TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsession TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsession TO etl_user;


--
-- Name: assessment_program_participation; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE assessment_program_participation FROM PUBLIC;
REVOKE ALL ON TABLE assessment_program_participation FROM aart;
GRANT ALL ON TABLE assessment_program_participation TO aart;
GRANT SELECT ON TABLE assessment_program_participation TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE assessment_program_participation TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE assessment_program_participation TO etl_user;


--
-- Name: assessmentprogram_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE assessmentprogram_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE assessmentprogram_id_seq FROM aart;
GRANT ALL ON SEQUENCE assessmentprogram_id_seq TO aart;
GRANT SELECT ON SEQUENCE assessmentprogram_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE assessmentprogram_id_seq TO aart_user;
GRANT ALL ON SEQUENCE assessmentprogram_id_seq TO etl_user;


--
-- Name: assessmentprogramgrades_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE assessmentprogramgrades_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE assessmentprogramgrades_id_seq FROM aart;
GRANT ALL ON SEQUENCE assessmentprogramgrades_id_seq TO aart;
GRANT SELECT ON SEQUENCE assessmentprogramgrades_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE assessmentprogramgrades_id_seq TO aart_user;
GRANT ALL ON SEQUENCE assessmentprogramgrades_id_seq TO etl_user;


--
-- Name: assessmentprogramgrades; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE assessmentprogramgrades FROM PUBLIC;
REVOKE ALL ON TABLE assessmentprogramgrades FROM aart;
GRANT ALL ON TABLE assessmentprogramgrades TO aart;
GRANT SELECT ON TABLE assessmentprogramgrades TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE assessmentprogramgrades TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE assessmentprogramgrades TO etl_user;


--
-- Name: authorities; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE authorities FROM PUBLIC;
REVOKE ALL ON TABLE authorities FROM aart;
GRANT ALL ON TABLE authorities TO aart;
GRANT SELECT ON TABLE authorities TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE authorities TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE authorities TO etl_user;


--
-- Name: authorities_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE authorities_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE authorities_id_seq FROM aart;
GRANT ALL ON SEQUENCE authorities_id_seq TO aart;
GRANT SELECT ON SEQUENCE authorities_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE authorities_id_seq TO aart_user;
GRANT ALL ON SEQUENCE authorities_id_seq TO etl_user;


--
-- Name: autoregistrationcriteria; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE autoregistrationcriteria FROM PUBLIC;
REVOKE ALL ON TABLE autoregistrationcriteria FROM aart;
GRANT ALL ON TABLE autoregistrationcriteria TO aart;
GRANT SELECT ON TABLE autoregistrationcriteria TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE autoregistrationcriteria TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE autoregistrationcriteria TO etl_user;


--
-- Name: autoregistrationcriteria_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE autoregistrationcriteria_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE autoregistrationcriteria_id_seq FROM aart;
GRANT ALL ON SEQUENCE autoregistrationcriteria_id_seq TO aart;
GRANT SELECT ON SEQUENCE autoregistrationcriteria_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE autoregistrationcriteria_id_seq TO aart_user;
GRANT ALL ON SEQUENCE autoregistrationcriteria_id_seq TO etl_user;


--
-- Name: batchjobschedule; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE batchjobschedule FROM PUBLIC;
REVOKE ALL ON TABLE batchjobschedule FROM aart;
GRANT ALL ON TABLE batchjobschedule TO aart;
GRANT SELECT ON TABLE batchjobschedule TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE batchjobschedule TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE batchjobschedule TO etl_user;


--
-- Name: batchjobschedule_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE batchjobschedule_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE batchjobschedule_id_seq FROM aart;
GRANT ALL ON SEQUENCE batchjobschedule_id_seq TO aart;
GRANT SELECT ON SEQUENCE batchjobschedule_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE batchjobschedule_id_seq TO aart_user;
GRANT ALL ON SEQUENCE batchjobschedule_id_seq TO etl_user;


--
-- Name: batchstudenttracker_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE batchstudenttracker_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE batchstudenttracker_id_seq FROM aart;
GRANT ALL ON SEQUENCE batchstudenttracker_id_seq TO aart;
GRANT SELECT ON SEQUENCE batchstudenttracker_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE batchstudenttracker_id_seq TO aart_user;
GRANT ALL ON SEQUENCE batchstudenttracker_id_seq TO etl_user;


--
-- Name: batchstudenttracker; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE batchstudenttracker FROM PUBLIC;
REVOKE ALL ON TABLE batchstudenttracker FROM aart;
GRANT ALL ON TABLE batchstudenttracker TO aart;
GRANT SELECT ON TABLE batchstudenttracker TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE batchstudenttracker TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE batchstudenttracker TO etl_user;


--
-- Name: batchstudenttrackerreason; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE batchstudenttrackerreason FROM PUBLIC;
REVOKE ALL ON TABLE batchstudenttrackerreason FROM aart;
GRANT ALL ON TABLE batchstudenttrackerreason TO aart;
GRANT SELECT ON TABLE batchstudenttrackerreason TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE batchstudenttrackerreason TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE batchstudenttrackerreason TO etl_user;


--
-- Name: batchupload; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE batchupload FROM PUBLIC;
REVOKE ALL ON TABLE batchupload FROM aart;
GRANT ALL ON TABLE batchupload TO aart;
GRANT SELECT ON TABLE batchupload TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE batchupload TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE batchupload TO etl_user;


--
-- Name: batchupload_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE batchupload_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE batchupload_id_seq FROM aart;
GRANT ALL ON SEQUENCE batchupload_id_seq TO aart;
GRANT SELECT ON SEQUENCE batchupload_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE batchupload_id_seq TO aart_user;
GRANT ALL ON SEQUENCE batchupload_id_seq TO etl_user;


--
-- Name: batchuploadreason; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE batchuploadreason FROM PUBLIC;
REVOKE ALL ON TABLE batchuploadreason FROM aart;
GRANT ALL ON TABLE batchuploadreason TO aart;
GRANT SELECT ON TABLE batchuploadreason TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE batchuploadreason TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE batchuploadreason TO etl_user;


--
-- Name: blueprint_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE blueprint_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blueprint_id_seq FROM aart;
GRANT ALL ON SEQUENCE blueprint_id_seq TO aart;
GRANT SELECT ON SEQUENCE blueprint_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE blueprint_id_seq TO aart_user;
GRANT ALL ON SEQUENCE blueprint_id_seq TO etl_user;


--
-- Name: blueprint; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE blueprint FROM PUBLIC;
REVOKE ALL ON TABLE blueprint FROM aart;
GRANT ALL ON TABLE blueprint TO aart;
GRANT SELECT ON TABLE blueprint TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE blueprint TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE blueprint TO etl_user;


--
-- Name: blueprintessentialelements; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE blueprintessentialelements FROM PUBLIC;
REVOKE ALL ON TABLE blueprintessentialelements FROM aart;
GRANT ALL ON TABLE blueprintessentialelements TO aart;
GRANT SELECT ON TABLE blueprintessentialelements TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE blueprintessentialelements TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE blueprintessentialelements TO etl_user;


--
-- Name: brailleaccommodation; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE brailleaccommodation FROM PUBLIC;
REVOKE ALL ON TABLE brailleaccommodation FROM aart;
GRANT ALL ON TABLE brailleaccommodation TO aart;
GRANT SELECT ON TABLE brailleaccommodation TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE brailleaccommodation TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE brailleaccommodation TO etl_user;


--
-- Name: brailleaccommodation_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE brailleaccommodation_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE brailleaccommodation_id_seq FROM aart;
GRANT ALL ON SEQUENCE brailleaccommodation_id_seq TO aart;
GRANT SELECT ON SEQUENCE brailleaccommodation_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE brailleaccommodation_id_seq TO aart_user;
GRANT ALL ON SEQUENCE brailleaccommodation_id_seq TO etl_user;


--
-- Name: category_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE category_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE category_id_seq FROM aart;
GRANT ALL ON SEQUENCE category_id_seq TO aart;
GRANT SELECT ON SEQUENCE category_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE category_id_seq TO aart_user;
GRANT ALL ON SEQUENCE category_id_seq TO etl_user;


--
-- Name: categorytype; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE categorytype FROM PUBLIC;
REVOKE ALL ON TABLE categorytype FROM aart;
GRANT ALL ON TABLE categorytype TO aart;
GRANT SELECT ON TABLE categorytype TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE categorytype TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE categorytype TO etl_user;


--
-- Name: categorytype_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE categorytype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE categorytype_id_seq FROM aart;
GRANT ALL ON SEQUENCE categorytype_id_seq TO aart;
GRANT SELECT ON SEQUENCE categorytype_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE categorytype_id_seq TO aart_user;
GRANT ALL ON SEQUENCE categorytype_id_seq TO etl_user;


--
-- Name: ccqscore; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE ccqscore FROM PUBLIC;
REVOKE ALL ON TABLE ccqscore FROM aart;
GRANT ALL ON TABLE ccqscore TO aart;
GRANT SELECT ON TABLE ccqscore TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ccqscore TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ccqscore TO etl_user;


--
-- Name: ccqscore_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE ccqscore_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ccqscore_id_seq FROM aart;
GRANT ALL ON SEQUENCE ccqscore_id_seq TO aart;
GRANT SELECT ON SEQUENCE ccqscore_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE ccqscore_id_seq TO aart_user;
GRANT ALL ON SEQUENCE ccqscore_id_seq TO etl_user;


--
-- Name: ccqscoreitem; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE ccqscoreitem FROM PUBLIC;
REVOKE ALL ON TABLE ccqscoreitem FROM aart;
GRANT ALL ON TABLE ccqscoreitem TO aart;
GRANT SELECT ON TABLE ccqscoreitem TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ccqscoreitem TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ccqscoreitem TO etl_user;


--
-- Name: ccqscoreitem_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE ccqscoreitem_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ccqscoreitem_id_seq FROM aart;
GRANT ALL ON SEQUENCE ccqscoreitem_id_seq TO aart;
GRANT SELECT ON SEQUENCE ccqscoreitem_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE ccqscoreitem_id_seq TO aart_user;
GRANT ALL ON SEQUENCE ccqscoreitem_id_seq TO etl_user;


--
-- Name: cognitivetaxonomy; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE cognitivetaxonomy FROM PUBLIC;
REVOKE ALL ON TABLE cognitivetaxonomy FROM aart;
GRANT ALL ON TABLE cognitivetaxonomy TO aart;
GRANT SELECT ON TABLE cognitivetaxonomy TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE cognitivetaxonomy TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE cognitivetaxonomy TO etl_user;


--
-- Name: cognitivetaxonomy_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE cognitivetaxonomy_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cognitivetaxonomy_id_seq FROM aart;
GRANT ALL ON SEQUENCE cognitivetaxonomy_id_seq TO aart;
GRANT SELECT ON SEQUENCE cognitivetaxonomy_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE cognitivetaxonomy_id_seq TO aart_user;
GRANT ALL ON SEQUENCE cognitivetaxonomy_id_seq TO etl_user;


--
-- Name: cognitivetaxonomydimension; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE cognitivetaxonomydimension FROM PUBLIC;
REVOKE ALL ON TABLE cognitivetaxonomydimension FROM aart;
GRANT ALL ON TABLE cognitivetaxonomydimension TO aart;
GRANT SELECT ON TABLE cognitivetaxonomydimension TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE cognitivetaxonomydimension TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE cognitivetaxonomydimension TO etl_user;


--
-- Name: cognitivetaxonomydimension_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE cognitivetaxonomydimension_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cognitivetaxonomydimension_id_seq FROM aart;
GRANT ALL ON SEQUENCE cognitivetaxonomydimension_id_seq TO aart;
GRANT SELECT ON SEQUENCE cognitivetaxonomydimension_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE cognitivetaxonomydimension_id_seq TO aart_user;
GRANT ALL ON SEQUENCE cognitivetaxonomydimension_id_seq TO etl_user;


--
-- Name: combinedlevelmap; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE combinedlevelmap FROM PUBLIC;
REVOKE ALL ON TABLE combinedlevelmap FROM aart;
GRANT ALL ON TABLE combinedlevelmap TO aart;
GRANT SELECT ON TABLE combinedlevelmap TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE combinedlevelmap TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE combinedlevelmap TO etl_user;


--
-- Name: combinedlevelmap_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE combinedlevelmap_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE combinedlevelmap_id_seq FROM aart;
GRANT ALL ON SEQUENCE combinedlevelmap_id_seq TO aart;
GRANT SELECT ON SEQUENCE combinedlevelmap_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE combinedlevelmap_id_seq TO aart_user;
GRANT ALL ON SEQUENCE combinedlevelmap_id_seq TO etl_user;


--
-- Name: message_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE message_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE message_id_seq FROM aart;
GRANT ALL ON SEQUENCE message_id_seq TO aart;
GRANT SELECT ON SEQUENCE message_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE message_id_seq TO aart_user;
GRANT ALL ON SEQUENCE message_id_seq TO etl_user;


--
-- Name: communicationmessage; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE communicationmessage FROM PUBLIC;
REVOKE ALL ON TABLE communicationmessage FROM aart;
GRANT ALL ON TABLE communicationmessage TO aart;
GRANT SELECT ON TABLE communicationmessage TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE communicationmessage TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE communicationmessage TO etl_user;


--
-- Name: communicationmessageorgassessmentprogram; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE communicationmessageorgassessmentprogram FROM PUBLIC;
REVOKE ALL ON TABLE communicationmessageorgassessmentprogram FROM aart;
GRANT ALL ON TABLE communicationmessageorgassessmentprogram TO aart;
GRANT SELECT ON TABLE communicationmessageorgassessmentprogram TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE communicationmessageorgassessmentprogram TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE communicationmessageorgassessmentprogram TO etl_user;


--
-- Name: communicationmessagestate; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE communicationmessagestate FROM PUBLIC;
REVOKE ALL ON TABLE communicationmessagestate FROM aart;
GRANT ALL ON TABLE communicationmessagestate TO aart;
GRANT SELECT ON TABLE communicationmessagestate TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE communicationmessagestate TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE communicationmessagestate TO etl_user;


--
-- Name: complexityband; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE complexityband FROM PUBLIC;
REVOKE ALL ON TABLE complexityband FROM aart;
GRANT ALL ON TABLE complexityband TO aart;
GRANT SELECT ON TABLE complexityband TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE complexityband TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE complexityband TO etl_user;


--
-- Name: complexityband_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE complexityband_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE complexityband_id_seq FROM aart;
GRANT ALL ON SEQUENCE complexityband_id_seq TO aart;
GRANT SELECT ON SEQUENCE complexityband_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE complexityband_id_seq TO aart_user;
GRANT ALL ON SEQUENCE complexityband_id_seq TO etl_user;


--
-- Name: complexitybandrules; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE complexitybandrules FROM PUBLIC;
REVOKE ALL ON TABLE complexitybandrules FROM aart;
GRANT ALL ON TABLE complexitybandrules TO aart;
GRANT SELECT ON TABLE complexitybandrules TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE complexitybandrules TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE complexitybandrules TO etl_user;


--
-- Name: complexitybandrules_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE complexitybandrules_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE complexitybandrules_id_seq FROM aart;
GRANT ALL ON SEQUENCE complexitybandrules_id_seq TO aart;
GRANT SELECT ON SEQUENCE complexitybandrules_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE complexitybandrules_id_seq TO aart_user;
GRANT ALL ON SEQUENCE complexitybandrules_id_seq TO etl_user;


--
-- Name: compositestimulusvariant; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE compositestimulusvariant FROM PUBLIC;
REVOKE ALL ON TABLE compositestimulusvariant FROM aart;
GRANT ALL ON TABLE compositestimulusvariant TO aart;
GRANT SELECT ON TABLE compositestimulusvariant TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE compositestimulusvariant TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE compositestimulusvariant TO etl_user;


--
-- Name: contentarea; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE contentarea FROM PUBLIC;
REVOKE ALL ON TABLE contentarea FROM aart;
GRANT ALL ON TABLE contentarea TO aart;
GRANT SELECT ON TABLE contentarea TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE contentarea TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE contentarea TO etl_user;


--
-- Name: contentarea_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE contentarea_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE contentarea_id_seq FROM aart;
GRANT ALL ON SEQUENCE contentarea_id_seq TO aart;
GRANT SELECT ON SEQUENCE contentarea_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE contentarea_id_seq TO aart_user;
GRANT ALL ON SEQUENCE contentarea_id_seq TO etl_user;


--
-- Name: contentareatesttypesubjectarea; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE contentareatesttypesubjectarea FROM PUBLIC;
REVOKE ALL ON TABLE contentareatesttypesubjectarea FROM aart;
GRANT ALL ON TABLE contentareatesttypesubjectarea TO aart;
GRANT SELECT ON TABLE contentareatesttypesubjectarea TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE contentareatesttypesubjectarea TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE contentareatesttypesubjectarea TO etl_user;


--
-- Name: contentareatesttypesubjectarea_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE contentareatesttypesubjectarea_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE contentareatesttypesubjectarea_id_seq FROM aart;
GRANT ALL ON SEQUENCE contentareatesttypesubjectarea_id_seq TO aart;
GRANT SELECT ON SEQUENCE contentareatesttypesubjectarea_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE contentareatesttypesubjectarea_id_seq TO aart_user;
GRANT ALL ON SEQUENCE contentareatesttypesubjectarea_id_seq TO etl_user;


--
-- Name: contentframework; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE contentframework FROM PUBLIC;
REVOKE ALL ON TABLE contentframework FROM aart;
GRANT ALL ON TABLE contentframework TO aart;
GRANT SELECT ON TABLE contentframework TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE contentframework TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE contentframework TO etl_user;


--
-- Name: contentframework_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE contentframework_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE contentframework_id_seq FROM aart;
GRANT ALL ON SEQUENCE contentframework_id_seq TO aart;
GRANT SELECT ON SEQUENCE contentframework_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE contentframework_id_seq TO aart_user;
GRANT ALL ON SEQUENCE contentframework_id_seq TO etl_user;


--
-- Name: contentframeworkdetail; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE contentframeworkdetail FROM PUBLIC;
REVOKE ALL ON TABLE contentframeworkdetail FROM aart;
GRANT ALL ON TABLE contentframeworkdetail TO aart;
GRANT SELECT ON TABLE contentframeworkdetail TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE contentframeworkdetail TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE contentframeworkdetail TO etl_user;


--
-- Name: contentframeworkdetail_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE contentframeworkdetail_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE contentframeworkdetail_id_seq FROM aart;
GRANT ALL ON SEQUENCE contentframeworkdetail_id_seq TO aart;
GRANT SELECT ON SEQUENCE contentframeworkdetail_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE contentframeworkdetail_id_seq TO aart_user;
GRANT ALL ON SEQUENCE contentframeworkdetail_id_seq TO etl_user;


--
-- Name: contentgroup_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE contentgroup_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE contentgroup_id_seq FROM aart;
GRANT ALL ON SEQUENCE contentgroup_id_seq TO aart;
GRANT SELECT ON SEQUENCE contentgroup_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE contentgroup_id_seq TO aart_user;
GRANT ALL ON SEQUENCE contentgroup_id_seq TO etl_user;


--
-- Name: contentgroup; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE contentgroup FROM PUBLIC;
REVOKE ALL ON TABLE contentgroup FROM aart;
GRANT ALL ON TABLE contentgroup TO aart;
GRANT SELECT ON TABLE contentgroup TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE contentgroup TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE contentgroup TO etl_user;


--
-- Name: correct_response_summary_by_node; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE correct_response_summary_by_node FROM PUBLIC;
REVOKE ALL ON TABLE correct_response_summary_by_node FROM aart;
GRANT ALL ON TABLE correct_response_summary_by_node TO aart;
GRANT SELECT ON TABLE correct_response_summary_by_node TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE correct_response_summary_by_node TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE correct_response_summary_by_node TO etl_user;


--
-- Name: dailyaccesscode; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE dailyaccesscode FROM PUBLIC;
REVOKE ALL ON TABLE dailyaccesscode FROM aart;
GRANT ALL ON TABLE dailyaccesscode TO aart;
GRANT SELECT ON TABLE dailyaccesscode TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE dailyaccesscode TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE dailyaccesscode TO etl_user;


--
-- Name: dailyaccesscode_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE dailyaccesscode_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dailyaccesscode_id_seq FROM aart;
GRANT ALL ON SEQUENCE dailyaccesscode_id_seq TO aart;
GRANT SELECT ON SEQUENCE dailyaccesscode_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE dailyaccesscode_id_seq TO aart_user;
GRANT ALL ON SEQUENCE dailyaccesscode_id_seq TO etl_user;


--
-- Name: ddl_version; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE ddl_version FROM PUBLIC;
REVOKE ALL ON TABLE ddl_version FROM aart;
GRANT ALL ON TABLE ddl_version TO aart;
GRANT SELECT ON TABLE ddl_version TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ddl_version TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ddl_version TO etl_user;


--
-- Name: domainaudithistory; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE domainaudithistory FROM PUBLIC;
REVOKE ALL ON TABLE domainaudithistory FROM aart;
GRANT ALL ON TABLE domainaudithistory TO aart;
GRANT SELECT ON TABLE domainaudithistory TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE domainaudithistory TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE domainaudithistory TO etl_user;


--
-- Name: domainaudithistory_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE domainaudithistory_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE domainaudithistory_id_seq FROM aart;
GRANT ALL ON SEQUENCE domainaudithistory_id_seq TO aart;
GRANT SELECT ON SEQUENCE domainaudithistory_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE domainaudithistory_id_seq TO aart_user;
GRANT ALL ON SEQUENCE domainaudithistory_id_seq TO etl_user;


--
-- Name: enrollment_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE enrollment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE enrollment_id_seq FROM aart;
GRANT ALL ON SEQUENCE enrollment_id_seq TO aart;
GRANT SELECT ON SEQUENCE enrollment_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE enrollment_id_seq TO aart_user;
GRANT ALL ON SEQUENCE enrollment_id_seq TO etl_user;


--
-- Name: enrollmentsrosters_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE enrollmentsrosters_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE enrollmentsrosters_id_seq FROM aart;
GRANT ALL ON SEQUENCE enrollmentsrosters_id_seq TO aart;
GRANT SELECT ON SEQUENCE enrollmentsrosters_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE enrollmentsrosters_id_seq TO aart_user;
GRANT ALL ON SEQUENCE enrollmentsrosters_id_seq TO etl_user;


--
-- Name: enrollmenttesttypesubjectarea; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE enrollmenttesttypesubjectarea FROM PUBLIC;
REVOKE ALL ON TABLE enrollmenttesttypesubjectarea FROM aart;
GRANT ALL ON TABLE enrollmenttesttypesubjectarea TO aart;
GRANT SELECT ON TABLE enrollmenttesttypesubjectarea TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE enrollmenttesttypesubjectarea TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE enrollmenttesttypesubjectarea TO etl_user;


--
-- Name: enrollmenttesttypesubjectarea_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE enrollmenttesttypesubjectarea_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE enrollmenttesttypesubjectarea_id_seq FROM aart;
GRANT ALL ON SEQUENCE enrollmenttesttypesubjectarea_id_seq TO aart;
GRANT SELECT ON SEQUENCE enrollmenttesttypesubjectarea_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE enrollmenttesttypesubjectarea_id_seq TO aart_user;
GRANT ALL ON SEQUENCE enrollmenttesttypesubjectarea_id_seq TO etl_user;


--
-- Name: essentialelementlinkagetranslationvalues; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE essentialelementlinkagetranslationvalues FROM PUBLIC;
REVOKE ALL ON TABLE essentialelementlinkagetranslationvalues FROM aart;
GRANT ALL ON TABLE essentialelementlinkagetranslationvalues TO aart;
GRANT SELECT ON TABLE essentialelementlinkagetranslationvalues TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE essentialelementlinkagetranslationvalues TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE essentialelementlinkagetranslationvalues TO etl_user;


--
-- Name: essentialelementlinkagetranslationvalues_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE essentialelementlinkagetranslationvalues_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE essentialelementlinkagetranslationvalues_id_seq FROM aart;
GRANT ALL ON SEQUENCE essentialelementlinkagetranslationvalues_id_seq TO aart;
GRANT SELECT ON SEQUENCE essentialelementlinkagetranslationvalues_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE essentialelementlinkagetranslationvalues_id_seq TO aart_user;
GRANT ALL ON SEQUENCE essentialelementlinkagetranslationvalues_id_seq TO etl_user;


--
-- Name: excludeditems; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE excludeditems FROM PUBLIC;
REVOKE ALL ON TABLE excludeditems FROM aart;
GRANT ALL ON TABLE excludeditems TO aart;
GRANT SELECT ON TABLE excludeditems TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE excludeditems TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE excludeditems TO etl_user;


--
-- Name: excludeditems_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE excludeditems_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE excludeditems_id_seq FROM aart;
GRANT ALL ON SEQUENCE excludeditems_id_seq TO aart;
GRANT SELECT ON SEQUENCE excludeditems_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE excludeditems_id_seq TO aart_user;
GRANT ALL ON SEQUENCE excludeditems_id_seq TO etl_user;


--
-- Name: exitwithoutsavetest; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE exitwithoutsavetest FROM PUBLIC;
REVOKE ALL ON TABLE exitwithoutsavetest FROM aart;
GRANT ALL ON TABLE exitwithoutsavetest TO aart;
GRANT SELECT ON TABLE exitwithoutsavetest TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE exitwithoutsavetest TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE exitwithoutsavetest TO etl_user;


--
-- Name: externalstudentreports; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE externalstudentreports FROM PUBLIC;
REVOKE ALL ON TABLE externalstudentreports FROM aart;
GRANT ALL ON TABLE externalstudentreports TO aart;
GRANT SELECT ON TABLE externalstudentreports TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE externalstudentreports TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE externalstudentreports TO etl_user;


--
-- Name: externalstudentreports_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE externalstudentreports_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE externalstudentreports_id_seq FROM aart;
GRANT ALL ON SEQUENCE externalstudentreports_id_seq TO aart;
GRANT SELECT ON SEQUENCE externalstudentreports_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE externalstudentreports_id_seq TO aart_user;
GRANT ALL ON SEQUENCE externalstudentreports_id_seq TO etl_user;


--
-- Name: fieldspecification; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE fieldspecification FROM PUBLIC;
REVOKE ALL ON TABLE fieldspecification FROM aart;
GRANT ALL ON TABLE fieldspecification TO aart;
GRANT SELECT ON TABLE fieldspecification TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE fieldspecification TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE fieldspecification TO etl_user;


--
-- Name: fieldspecification_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE fieldspecification_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE fieldspecification_id_seq FROM aart;
GRANT ALL ON SEQUENCE fieldspecification_id_seq TO aart;
GRANT SELECT ON SEQUENCE fieldspecification_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE fieldspecification_id_seq TO aart_user;
GRANT ALL ON SEQUENCE fieldspecification_id_seq TO etl_user;


--
-- Name: fieldspecificationsrecordtypes; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE fieldspecificationsrecordtypes FROM PUBLIC;
REVOKE ALL ON TABLE fieldspecificationsrecordtypes FROM aart;
GRANT ALL ON TABLE fieldspecificationsrecordtypes TO aart;
GRANT SELECT ON TABLE fieldspecificationsrecordtypes TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE fieldspecificationsrecordtypes TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE fieldspecificationsrecordtypes TO etl_user;


--
-- Name: foil; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE foil FROM PUBLIC;
REVOKE ALL ON TABLE foil FROM aart;
GRANT ALL ON TABLE foil TO aart;
GRANT SELECT ON TABLE foil TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE foil TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE foil TO etl_user;


--
-- Name: foil_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE foil_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE foil_id_seq FROM aart;
GRANT ALL ON SEQUENCE foil_id_seq TO aart;
GRANT SELECT ON SEQUENCE foil_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE foil_id_seq TO aart_user;
GRANT ALL ON SEQUENCE foil_id_seq TO etl_user;


--
-- Name: foilsstimulusvariants; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE foilsstimulusvariants FROM PUBLIC;
REVOKE ALL ON TABLE foilsstimulusvariants FROM aart;
GRANT ALL ON TABLE foilsstimulusvariants TO aart;
GRANT SELECT ON TABLE foilsstimulusvariants TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE foilsstimulusvariants TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE foilsstimulusvariants TO etl_user;


--
-- Name: frameworklevel; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE frameworklevel FROM PUBLIC;
REVOKE ALL ON TABLE frameworklevel FROM aart;
GRANT ALL ON TABLE frameworklevel TO aart;
GRANT SELECT ON TABLE frameworklevel TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE frameworklevel TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE frameworklevel TO etl_user;


--
-- Name: frameworklevel_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE frameworklevel_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE frameworklevel_id_seq FROM aart;
GRANT ALL ON SEQUENCE frameworklevel_id_seq TO aart;
GRANT SELECT ON SEQUENCE frameworklevel_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE frameworklevel_id_seq TO aart_user;
GRANT ALL ON SEQUENCE frameworklevel_id_seq TO etl_user;


--
-- Name: frameworktype; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE frameworktype FROM PUBLIC;
REVOKE ALL ON TABLE frameworktype FROM aart;
GRANT ALL ON TABLE frameworktype TO aart;
GRANT SELECT ON TABLE frameworktype TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE frameworktype TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE frameworktype TO etl_user;


--
-- Name: frameworktype_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE frameworktype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE frameworktype_id_seq FROM aart;
GRANT ALL ON SEQUENCE frameworktype_id_seq TO aart;
GRANT SELECT ON SEQUENCE frameworktype_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE frameworktype_id_seq TO aart_user;
GRANT ALL ON SEQUENCE frameworktype_id_seq TO etl_user;


--
-- Name: gradeband_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE gradeband_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE gradeband_id_seq FROM aart;
GRANT ALL ON SEQUENCE gradeband_id_seq TO aart;
GRANT SELECT ON SEQUENCE gradeband_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE gradeband_id_seq TO aart_user;
GRANT ALL ON SEQUENCE gradeband_id_seq TO etl_user;


--
-- Name: gradeband; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE gradeband FROM PUBLIC;
REVOKE ALL ON TABLE gradeband FROM aart;
GRANT ALL ON TABLE gradeband TO aart;
GRANT SELECT ON TABLE gradeband TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE gradeband TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE gradeband TO etl_user;


--
-- Name: gradebandgradecourse; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE gradebandgradecourse FROM PUBLIC;
REVOKE ALL ON TABLE gradebandgradecourse FROM aart;
GRANT ALL ON TABLE gradebandgradecourse TO aart;
GRANT SELECT ON TABLE gradebandgradecourse TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE gradebandgradecourse TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE gradebandgradecourse TO etl_user;


--
-- Name: gradecontentareatesttypesubjectarea; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE gradecontentareatesttypesubjectarea FROM PUBLIC;
REVOKE ALL ON TABLE gradecontentareatesttypesubjectarea FROM aart;
GRANT ALL ON TABLE gradecontentareatesttypesubjectarea TO aart;
GRANT SELECT ON TABLE gradecontentareatesttypesubjectarea TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE gradecontentareatesttypesubjectarea TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE gradecontentareatesttypesubjectarea TO etl_user;


--
-- Name: gradecourse; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE gradecourse FROM PUBLIC;
REVOKE ALL ON TABLE gradecourse FROM aart;
GRANT ALL ON TABLE gradecourse TO aart;
GRANT SELECT ON TABLE gradecourse TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE gradecourse TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE gradecourse TO etl_user;


--
-- Name: gradecourse_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE gradecourse_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE gradecourse_id_seq FROM aart;
GRANT ALL ON SEQUENCE gradecourse_id_seq TO aart;
GRANT SELECT ON SEQUENCE gradecourse_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE gradecourse_id_seq TO aart_user;
GRANT ALL ON SEQUENCE gradecourse_id_seq TO etl_user;


--
-- Name: gradetestspec_row; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE gradetestspec_row FROM PUBLIC;
REVOKE ALL ON TABLE gradetestspec_row FROM aart;
GRANT ALL ON TABLE gradetestspec_row TO aart;
GRANT SELECT ON TABLE gradetestspec_row TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE gradetestspec_row TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE gradetestspec_row TO etl_user;


--
-- Name: groupauthorities; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE groupauthorities FROM PUBLIC;
REVOKE ALL ON TABLE groupauthorities FROM aart;
GRANT ALL ON TABLE groupauthorities TO aart;
GRANT SELECT ON TABLE groupauthorities TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE groupauthorities TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE groupauthorities TO etl_user;


--
-- Name: groupauthorities_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE groupauthorities_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE groupauthorities_id_seq FROM aart;
GRANT ALL ON SEQUENCE groupauthorities_id_seq TO aart;
GRANT SELECT ON SEQUENCE groupauthorities_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE groupauthorities_id_seq TO aart_user;
GRANT ALL ON SEQUENCE groupauthorities_id_seq TO etl_user;


--
-- Name: groupauthoritylockdownperiod; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE groupauthoritylockdownperiod FROM PUBLIC;
REVOKE ALL ON TABLE groupauthoritylockdownperiod FROM aart;
GRANT ALL ON TABLE groupauthoritylockdownperiod TO aart;
GRANT SELECT ON TABLE groupauthoritylockdownperiod TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE groupauthoritylockdownperiod TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE groupauthoritylockdownperiod TO etl_user;


--
-- Name: groupauthoritylockdownperiod_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE groupauthoritylockdownperiod_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE groupauthoritylockdownperiod_id_seq FROM aart;
GRANT ALL ON SEQUENCE groupauthoritylockdownperiod_id_seq TO aart;
GRANT SELECT ON SEQUENCE groupauthoritylockdownperiod_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE groupauthoritylockdownperiod_id_seq TO aart_user;
GRANT ALL ON SEQUENCE groupauthoritylockdownperiod_id_seq TO etl_user;


--
-- Name: groups; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE groups FROM PUBLIC;
REVOKE ALL ON TABLE groups FROM aart;
GRANT ALL ON TABLE groups TO aart;
GRANT SELECT ON TABLE groups TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE groups TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE groups TO etl_user;


--
-- Name: groups_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE groups_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE groups_id_seq FROM aart;
GRANT ALL ON SEQUENCE groups_id_seq TO aart;
GRANT SELECT ON SEQUENCE groups_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE groups_id_seq TO aart_user;
GRANT ALL ON SEQUENCE groups_id_seq TO etl_user;


--
-- Name: in_correct_response_summary_by_node; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE in_correct_response_summary_by_node FROM PUBLIC;
REVOKE ALL ON TABLE in_correct_response_summary_by_node FROM aart;
GRANT ALL ON TABLE in_correct_response_summary_by_node TO aart;
GRANT SELECT ON TABLE in_correct_response_summary_by_node TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE in_correct_response_summary_by_node TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE in_correct_response_summary_by_node TO etl_user;


--
-- Name: interfacerequesthistory; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE interfacerequesthistory FROM PUBLIC;
REVOKE ALL ON TABLE interfacerequesthistory FROM aart;
GRANT ALL ON TABLE interfacerequesthistory TO aart;
GRANT SELECT ON TABLE interfacerequesthistory TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE interfacerequesthistory TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE interfacerequesthistory TO etl_user;


--
-- Name: interfacerequesthistory_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE interfacerequesthistory_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE interfacerequesthistory_id_seq FROM aart;
GRANT ALL ON SEQUENCE interfacerequesthistory_id_seq TO aart;
GRANT SELECT ON SEQUENCE interfacerequesthistory_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE interfacerequesthistory_id_seq TO aart_user;
GRANT ALL ON SEQUENCE interfacerequesthistory_id_seq TO etl_user;


--
-- Name: itemstatistic; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE itemstatistic FROM PUBLIC;
REVOKE ALL ON TABLE itemstatistic FROM aart;
GRANT ALL ON TABLE itemstatistic TO aart;
GRANT SELECT ON TABLE itemstatistic TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE itemstatistic TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE itemstatistic TO etl_user;


--
-- Name: itimclog; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE itimclog FROM PUBLIC;
REVOKE ALL ON TABLE itimclog FROM aart;
GRANT ALL ON TABLE itimclog TO aart;
GRANT SELECT ON TABLE itimclog TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE itimclog TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE itimclog TO etl_user;


--
-- Name: itimclog_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE itimclog_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE itimclog_id_seq FROM aart;
GRANT ALL ON SEQUENCE itimclog_id_seq TO aart;
GRANT SELECT ON SEQUENCE itimclog_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE itimclog_id_seq TO aart_user;
GRANT ALL ON SEQUENCE itimclog_id_seq TO etl_user;


--
-- Name: ititestsessionhistory; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE ititestsessionhistory FROM PUBLIC;
REVOKE ALL ON TABLE ititestsessionhistory FROM aart;
GRANT ALL ON TABLE ititestsessionhistory TO aart;
GRANT SELECT ON TABLE ititestsessionhistory TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ititestsessionhistory TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ititestsessionhistory TO etl_user;


--
-- Name: ititestsessionhistory_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE ititestsessionhistory_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ititestsessionhistory_id_seq FROM aart;
GRANT ALL ON SEQUENCE ititestsessionhistory_id_seq TO aart;
GRANT SELECT ON SEQUENCE ititestsessionhistory_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE ititestsessionhistory_id_seq TO aart_user;
GRANT ALL ON SEQUENCE ititestsessionhistory_id_seq TO etl_user;


--
-- Name: ititestsessionsensitivitytags; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE ititestsessionsensitivitytags FROM PUBLIC;
REVOKE ALL ON TABLE ititestsessionsensitivitytags FROM aart;
GRANT ALL ON TABLE ititestsessionsensitivitytags TO aart;
GRANT SELECT ON TABLE ititestsessionsensitivitytags TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ititestsessionsensitivitytags TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ititestsessionsensitivitytags TO etl_user;


--
-- Name: ksdbprofile; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE ksdbprofile FROM PUBLIC;
REVOKE ALL ON TABLE ksdbprofile FROM aart;
GRANT ALL ON TABLE ksdbprofile TO aart;
GRANT SELECT ON TABLE ksdbprofile TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ksdbprofile TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ksdbprofile TO etl_user;


--
-- Name: ksdexmlaudit_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE ksdexmlaudit_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ksdexmlaudit_id_seq FROM aart;
GRANT ALL ON SEQUENCE ksdexmlaudit_id_seq TO aart;
GRANT SELECT ON SEQUENCE ksdexmlaudit_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE ksdexmlaudit_id_seq TO aart_user;
GRANT ALL ON SEQUENCE ksdexmlaudit_id_seq TO etl_user;


--
-- Name: ksdexmlaudit; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE ksdexmlaudit FROM PUBLIC;
REVOKE ALL ON TABLE ksdexmlaudit FROM aart;
GRANT ALL ON TABLE ksdexmlaudit TO aart;
GRANT SELECT ON TABLE ksdexmlaudit TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ksdexmlaudit TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ksdexmlaudit TO etl_user;


--
-- Name: ksdexmlaudit_id_seq1; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE ksdexmlaudit_id_seq1 FROM PUBLIC;
REVOKE ALL ON SEQUENCE ksdexmlaudit_id_seq1 FROM aart;
GRANT ALL ON SEQUENCE ksdexmlaudit_id_seq1 TO aart;
GRANT SELECT ON SEQUENCE ksdexmlaudit_id_seq1 TO aart_reader;
GRANT ALL ON SEQUENCE ksdexmlaudit_id_seq1 TO aart_user;
GRANT ALL ON SEQUENCE ksdexmlaudit_id_seq1 TO etl_user;


--
-- Name: lcsentries; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE lcsentries FROM PUBLIC;
REVOKE ALL ON TABLE lcsentries FROM aart;
GRANT ALL ON TABLE lcsentries TO aart;
GRANT ALL ON TABLE lcsentries TO tde;
GRANT SELECT ON TABLE lcsentries TO tde_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE lcsentries TO tde_user;
GRANT SELECT ON TABLE lcsentries TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE lcsentries TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE lcsentries TO etl_user;


--
-- Name: leveldescription; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE leveldescription FROM PUBLIC;
REVOKE ALL ON TABLE leveldescription FROM aart;
GRANT ALL ON TABLE leveldescription TO aart;
GRANT SELECT ON TABLE leveldescription TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE leveldescription TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE leveldescription TO etl_user;


--
-- Name: leveldescription_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE leveldescription_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE leveldescription_id_seq FROM aart;
GRANT ALL ON SEQUENCE leveldescription_id_seq TO aart;
GRANT SELECT ON SEQUENCE leveldescription_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE leveldescription_id_seq TO aart_user;
GRANT ALL ON SEQUENCE leveldescription_id_seq TO etl_user;


--
-- Name: lmassessmentmodelrule; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE lmassessmentmodelrule FROM PUBLIC;
REVOKE ALL ON TABLE lmassessmentmodelrule FROM aart;
GRANT ALL ON TABLE lmassessmentmodelrule TO aart;
GRANT SELECT ON TABLE lmassessmentmodelrule TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE lmassessmentmodelrule TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE lmassessmentmodelrule TO etl_user;


--
-- Name: micromap; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE micromap FROM PUBLIC;
REVOKE ALL ON TABLE micromap FROM aart;
GRANT ALL ON TABLE micromap TO aart;
GRANT SELECT ON TABLE micromap TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE micromap TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE micromap TO etl_user;


--
-- Name: micromap_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE micromap_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE micromap_id_seq FROM aart;
GRANT ALL ON SEQUENCE micromap_id_seq TO aart;
GRANT SELECT ON SEQUENCE micromap_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE micromap_id_seq TO aart_user;
GRANT ALL ON SEQUENCE micromap_id_seq TO etl_user;


--
-- Name: module; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE module FROM PUBLIC;
REVOKE ALL ON TABLE module FROM aart;
GRANT ALL ON TABLE module TO aart;
GRANT SELECT ON TABLE module TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE module TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE module TO etl_user;


--
-- Name: module_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE module_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE module_id_seq FROM aart;
GRANT ALL ON SEQUENCE module_id_seq TO aart;
GRANT SELECT ON SEQUENCE module_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE module_id_seq TO aart_user;
GRANT ALL ON SEQUENCE module_id_seq TO etl_user;


--
-- Name: modulegroup; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE modulegroup FROM PUBLIC;
REVOKE ALL ON TABLE modulegroup FROM aart;
GRANT ALL ON TABLE modulegroup TO aart;
GRANT SELECT ON TABLE modulegroup TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE modulegroup TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE modulegroup TO etl_user;


--
-- Name: modulegroup_groupid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE modulegroup_groupid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE modulegroup_groupid_seq FROM aart;
GRANT ALL ON SEQUENCE modulegroup_groupid_seq TO aart;
GRANT SELECT ON SEQUENCE modulegroup_groupid_seq TO aart_reader;
GRANT ALL ON SEQUENCE modulegroup_groupid_seq TO aart_user;
GRANT ALL ON SEQUENCE modulegroup_groupid_seq TO etl_user;


--
-- Name: modulegroup_moduleid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE modulegroup_moduleid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE modulegroup_moduleid_seq FROM aart;
GRANT ALL ON SEQUENCE modulegroup_moduleid_seq TO aart;
GRANT SELECT ON SEQUENCE modulegroup_moduleid_seq TO aart_reader;
GRANT ALL ON SEQUENCE modulegroup_moduleid_seq TO aart_user;
GRANT ALL ON SEQUENCE modulegroup_moduleid_seq TO etl_user;


--
-- Name: modulereport_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE modulereport_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE modulereport_id_seq FROM aart;
GRANT ALL ON SEQUENCE modulereport_id_seq TO aart;
GRANT SELECT ON SEQUENCE modulereport_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE modulereport_id_seq TO aart_user;
GRANT ALL ON SEQUENCE modulereport_id_seq TO etl_user;


--
-- Name: modulestate; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE modulestate FROM PUBLIC;
REVOKE ALL ON TABLE modulestate FROM aart;
GRANT ALL ON TABLE modulestate TO aart;
GRANT SELECT ON TABLE modulestate TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE modulestate TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE modulestate TO etl_user;


--
-- Name: modulestate_moduleid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE modulestate_moduleid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE modulestate_moduleid_seq FROM aart;
GRANT ALL ON SEQUENCE modulestate_moduleid_seq TO aart;
GRANT SELECT ON SEQUENCE modulestate_moduleid_seq TO aart_reader;
GRANT ALL ON SEQUENCE modulestate_moduleid_seq TO aart_user;
GRANT ALL ON SEQUENCE modulestate_moduleid_seq TO etl_user;


--
-- Name: modulestate_stateid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE modulestate_stateid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE modulestate_stateid_seq FROM aart;
GRANT ALL ON SEQUENCE modulestate_stateid_seq TO aart;
GRANT SELECT ON SEQUENCE modulestate_stateid_seq TO aart_reader;
GRANT ALL ON SEQUENCE modulestate_stateid_seq TO aart_user;
GRANT ALL ON SEQUENCE modulestate_stateid_seq TO etl_user;


--
-- Name: moduletag; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE moduletag FROM PUBLIC;
REVOKE ALL ON TABLE moduletag FROM aart;
GRANT ALL ON TABLE moduletag TO aart;
GRANT SELECT ON TABLE moduletag TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE moduletag TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE moduletag TO etl_user;


--
-- Name: moduletag_moduleid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE moduletag_moduleid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE moduletag_moduleid_seq FROM aart;
GRANT ALL ON SEQUENCE moduletag_moduleid_seq TO aart;
GRANT SELECT ON SEQUENCE moduletag_moduleid_seq TO aart_reader;
GRANT ALL ON SEQUENCE moduletag_moduleid_seq TO aart_user;
GRANT ALL ON SEQUENCE moduletag_moduleid_seq TO etl_user;


--
-- Name: moduletag_tagid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE moduletag_tagid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE moduletag_tagid_seq FROM aart;
GRANT ALL ON SEQUENCE moduletag_tagid_seq TO aart;
GRANT SELECT ON SEQUENCE moduletag_tagid_seq TO aart_reader;
GRANT ALL ON SEQUENCE moduletag_tagid_seq TO aart_user;
GRANT ALL ON SEQUENCE moduletag_tagid_seq TO etl_user;


--
-- Name: student_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE student_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE student_id_seq FROM aart;
GRANT ALL ON SEQUENCE student_id_seq TO aart;
GRANT SELECT ON SEQUENCE student_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE student_id_seq TO aart_user;
GRANT ALL ON SEQUENCE student_id_seq TO etl_user;


--
-- Name: student; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE student FROM PUBLIC;
REVOKE ALL ON TABLE student FROM aart;
GRANT ALL ON TABLE student TO aart;
GRANT SELECT ON TABLE student TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE student TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE student TO etl_user;


--
-- Name: testcollectionstests; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testcollectionstests FROM PUBLIC;
REVOKE ALL ON TABLE testcollectionstests FROM aart;
GRANT ALL ON TABLE testcollectionstests TO aart;
GRANT SELECT ON TABLE testcollectionstests TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testcollectionstests TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testcollectionstests TO etl_user;


--
-- Name: total_item_summary_by_node; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE total_item_summary_by_node FROM PUBLIC;
REVOKE ALL ON TABLE total_item_summary_by_node FROM aart;
GRANT ALL ON TABLE total_item_summary_by_node TO aart;
GRANT SELECT ON TABLE total_item_summary_by_node TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE total_item_summary_by_node TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE total_item_summary_by_node TO etl_user;


--
-- Name: node_report; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE node_report FROM PUBLIC;
REVOKE ALL ON TABLE node_report FROM aart;
GRANT ALL ON TABLE node_report TO aart;
GRANT SELECT ON TABLE node_report TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE node_report TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE node_report TO etl_user;


--
-- Name: operationaltestwindow; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE operationaltestwindow FROM PUBLIC;
REVOKE ALL ON TABLE operationaltestwindow FROM aart;
GRANT ALL ON TABLE operationaltestwindow TO aart;
GRANT SELECT ON TABLE operationaltestwindow TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindow TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindow TO etl_user;


--
-- Name: operationaltestwindow_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE operationaltestwindow_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE operationaltestwindow_id_seq FROM aart;
GRANT ALL ON SEQUENCE operationaltestwindow_id_seq TO aart;
GRANT SELECT ON SEQUENCE operationaltestwindow_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE operationaltestwindow_id_seq TO aart_user;
GRANT ALL ON SEQUENCE operationaltestwindow_id_seq TO etl_user;


--
-- Name: operationaltestwindowmultiassigndetail; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE operationaltestwindowmultiassigndetail FROM PUBLIC;
REVOKE ALL ON TABLE operationaltestwindowmultiassigndetail FROM aart;
GRANT ALL ON TABLE operationaltestwindowmultiassigndetail TO aart;
GRANT SELECT ON TABLE operationaltestwindowmultiassigndetail TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindowmultiassigndetail TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindowmultiassigndetail TO etl_user;


--
-- Name: operationaltestwindowmultiassigndetail_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE operationaltestwindowmultiassigndetail_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE operationaltestwindowmultiassigndetail_id_seq FROM aart;
GRANT ALL ON SEQUENCE operationaltestwindowmultiassigndetail_id_seq TO aart;
GRANT SELECT ON SEQUENCE operationaltestwindowmultiassigndetail_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE operationaltestwindowmultiassigndetail_id_seq TO aart_user;
GRANT ALL ON SEQUENCE operationaltestwindowmultiassigndetail_id_seq TO etl_user;


--
-- Name: operationaltestwindowsessionrule; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE operationaltestwindowsessionrule FROM PUBLIC;
REVOKE ALL ON TABLE operationaltestwindowsessionrule FROM aart;
GRANT ALL ON TABLE operationaltestwindowsessionrule TO aart;
GRANT SELECT ON TABLE operationaltestwindowsessionrule TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindowsessionrule TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindowsessionrule TO etl_user;


--
-- Name: operationaltestwindowstate; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE operationaltestwindowstate FROM PUBLIC;
REVOKE ALL ON TABLE operationaltestwindowstate FROM aart;
GRANT ALL ON TABLE operationaltestwindowstate TO aart;
GRANT SELECT ON TABLE operationaltestwindowstate TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindowstate TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindowstate TO etl_user;


--
-- Name: operationaltestwindowstestcollections; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE operationaltestwindowstestcollections FROM PUBLIC;
REVOKE ALL ON TABLE operationaltestwindowstestcollections FROM aart;
GRANT ALL ON TABLE operationaltestwindowstestcollections TO aart;
GRANT SELECT ON TABLE operationaltestwindowstestcollections TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindowstestcollections TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindowstestcollections TO etl_user;


--
-- Name: operationaltestwindowstudent; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE operationaltestwindowstudent FROM PUBLIC;
REVOKE ALL ON TABLE operationaltestwindowstudent FROM aart;
GRANT ALL ON TABLE operationaltestwindowstudent TO aart;
GRANT SELECT ON TABLE operationaltestwindowstudent TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindowstudent TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE operationaltestwindowstudent TO etl_user;


--
-- Name: organization_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE organization_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organization_id_seq FROM aart;
GRANT ALL ON SEQUENCE organization_id_seq TO aart;
GRANT SELECT ON SEQUENCE organization_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE organization_id_seq TO aart_user;
GRANT ALL ON SEQUENCE organization_id_seq TO etl_user;


--
-- Name: organizationcontentarea; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE organizationcontentarea FROM PUBLIC;
REVOKE ALL ON TABLE organizationcontentarea FROM aart;
GRANT ALL ON TABLE organizationcontentarea TO aart;
GRANT SELECT ON TABLE organizationcontentarea TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationcontentarea TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationcontentarea TO etl_user;


--
-- Name: organizationhierarchy; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE organizationhierarchy FROM PUBLIC;
REVOKE ALL ON TABLE organizationhierarchy FROM aart;
GRANT ALL ON TABLE organizationhierarchy TO aart;
GRANT SELECT ON TABLE organizationhierarchy TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationhierarchy TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationhierarchy TO etl_user;


--
-- Name: organizationreportdetails; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE organizationreportdetails FROM PUBLIC;
REVOKE ALL ON TABLE organizationreportdetails FROM aart;
GRANT ALL ON TABLE organizationreportdetails TO aart;
GRANT SELECT ON TABLE organizationreportdetails TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationreportdetails TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationreportdetails TO etl_user;


--
-- Name: organizationreportdetails_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE organizationreportdetails_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organizationreportdetails_id_seq FROM aart;
GRANT ALL ON SEQUENCE organizationreportdetails_id_seq TO aart;
GRANT SELECT ON SEQUENCE organizationreportdetails_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE organizationreportdetails_id_seq TO aart_user;
GRANT ALL ON SEQUENCE organizationreportdetails_id_seq TO etl_user;


--
-- Name: organizationtreedetail; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE organizationtreedetail FROM PUBLIC;
REVOKE ALL ON TABLE organizationtreedetail FROM aart;
GRANT ALL ON TABLE organizationtreedetail TO aart;
GRANT SELECT ON TABLE organizationtreedetail TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationtreedetail TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationtreedetail TO etl_user;


--
-- Name: organizationtype; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE organizationtype FROM PUBLIC;
REVOKE ALL ON TABLE organizationtype FROM aart;
GRANT ALL ON TABLE organizationtype TO aart;
GRANT SELECT ON TABLE organizationtype TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationtype TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organizationtype TO etl_user;


--
-- Name: organizationtype_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE organizationtype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organizationtype_id_seq FROM aart;
GRANT ALL ON SEQUENCE organizationtype_id_seq TO aart;
GRANT SELECT ON SEQUENCE organizationtype_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE organizationtype_id_seq TO aart_user;
GRANT ALL ON SEQUENCE organizationtype_id_seq TO etl_user;


--
-- Name: organizationtype_id_seq1; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE organizationtype_id_seq1 FROM PUBLIC;
REVOKE ALL ON SEQUENCE organizationtype_id_seq1 FROM aart;
GRANT ALL ON SEQUENCE organizationtype_id_seq1 TO aart;
GRANT SELECT ON SEQUENCE organizationtype_id_seq1 TO aart_reader;
GRANT ALL ON SEQUENCE organizationtype_id_seq1 TO aart_user;
GRANT ALL ON SEQUENCE organizationtype_id_seq1 TO etl_user;


--
-- Name: orgassessmentprogram; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE orgassessmentprogram FROM PUBLIC;
REVOKE ALL ON TABLE orgassessmentprogram FROM aart;
GRANT ALL ON TABLE orgassessmentprogram TO aart;
GRANT SELECT ON TABLE orgassessmentprogram TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE orgassessmentprogram TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE orgassessmentprogram TO etl_user;


--
-- Name: orgassessmentprogram_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE orgassessmentprogram_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE orgassessmentprogram_id_seq FROM aart;
GRANT ALL ON SEQUENCE orgassessmentprogram_id_seq TO aart;
GRANT SELECT ON SEQUENCE orgassessmentprogram_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE orgassessmentprogram_id_seq TO aart_user;
GRANT ALL ON SEQUENCE orgassessmentprogram_id_seq TO etl_user;


--
-- Name: policy; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE policy FROM PUBLIC;
REVOKE ALL ON TABLE policy FROM aart;
GRANT ALL ON TABLE policy TO aart;
GRANT SELECT ON TABLE policy TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE policy TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE policy TO etl_user;


--
-- Name: policy_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE policy_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE policy_id_seq FROM aart;
GRANT ALL ON SEQUENCE policy_id_seq TO aart;
GRANT SELECT ON SEQUENCE policy_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE policy_id_seq TO aart_user;
GRANT ALL ON SEQUENCE policy_id_seq TO etl_user;


--
-- Name: profileitemattribute; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE profileitemattribute FROM PUBLIC;
REVOKE ALL ON TABLE profileitemattribute FROM aart;
GRANT ALL ON TABLE profileitemattribute TO aart;
GRANT SELECT ON TABLE profileitemattribute TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE profileitemattribute TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE profileitemattribute TO etl_user;


--
-- Name: profileitemattribute_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE profileitemattribute_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE profileitemattribute_id_seq FROM aart;
GRANT ALL ON SEQUENCE profileitemattribute_id_seq TO aart;
GRANT SELECT ON SEQUENCE profileitemattribute_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE profileitemattribute_id_seq TO aart_user;
GRANT ALL ON SEQUENCE profileitemattribute_id_seq TO etl_user;


--
-- Name: profileitemattributecontainer; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE profileitemattributecontainer FROM PUBLIC;
REVOKE ALL ON TABLE profileitemattributecontainer FROM aart;
GRANT ALL ON TABLE profileitemattributecontainer TO aart;
GRANT SELECT ON TABLE profileitemattributecontainer TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE profileitemattributecontainer TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE profileitemattributecontainer TO etl_user;


--
-- Name: profileitemattributecontainer_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE profileitemattributecontainer_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE profileitemattributecontainer_id_seq FROM aart;
GRANT ALL ON SEQUENCE profileitemattributecontainer_id_seq TO aart;
GRANT SELECT ON SEQUENCE profileitemattributecontainer_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE profileitemattributecontainer_id_seq TO aart_user;
GRANT ALL ON SEQUENCE profileitemattributecontainer_id_seq TO etl_user;


--
-- Name: profileitemattributenameattributecontainer; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE profileitemattributenameattributecontainer FROM PUBLIC;
REVOKE ALL ON TABLE profileitemattributenameattributecontainer FROM aart;
GRANT ALL ON TABLE profileitemattributenameattributecontainer TO aart;
GRANT SELECT ON TABLE profileitemattributenameattributecontainer TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE profileitemattributenameattributecontainer TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE profileitemattributenameattributecontainer TO etl_user;


--
-- Name: profileitemattributenameattributecontainer_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE profileitemattributenameattributecontainer_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE profileitemattributenameattributecontainer_id_seq FROM aart;
GRANT ALL ON SEQUENCE profileitemattributenameattributecontainer_id_seq TO aart;
GRANT SELECT ON SEQUENCE profileitemattributenameattributecontainer_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE profileitemattributenameattributecontainer_id_seq TO aart_user;
GRANT ALL ON SEQUENCE profileitemattributenameattributecontainer_id_seq TO etl_user;


--
-- Name: profileitemattrnameattrcontainerviewoptions; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE profileitemattrnameattrcontainerviewoptions FROM PUBLIC;
REVOKE ALL ON TABLE profileitemattrnameattrcontainerviewoptions FROM aart;
GRANT ALL ON TABLE profileitemattrnameattrcontainerviewoptions TO aart;
GRANT SELECT ON TABLE profileitemattrnameattrcontainerviewoptions TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE profileitemattrnameattrcontainerviewoptions TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE profileitemattrnameattrcontainerviewoptions TO etl_user;


--
-- Name: profileitemattrnameattrcontainerviewoptions_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE profileitemattrnameattrcontainerviewoptions_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE profileitemattrnameattrcontainerviewoptions_id_seq FROM aart;
GRANT ALL ON SEQUENCE profileitemattrnameattrcontainerviewoptions_id_seq TO aart;
GRANT SELECT ON SEQUENCE profileitemattrnameattrcontainerviewoptions_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE profileitemattrnameattrcontainerviewoptions_id_seq TO aart_user;
GRANT ALL ON SEQUENCE profileitemattrnameattrcontainerviewoptions_id_seq TO etl_user;


--
-- Name: proportionmetrics_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE proportionmetrics_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE proportionmetrics_id_seq FROM aart;
GRANT ALL ON SEQUENCE proportionmetrics_id_seq TO aart;
GRANT SELECT ON SEQUENCE proportionmetrics_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE proportionmetrics_id_seq TO aart_user;
GRANT ALL ON SEQUENCE proportionmetrics_id_seq TO etl_user;


--
-- Name: proportionmetrics; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE proportionmetrics FROM PUBLIC;
REVOKE ALL ON TABLE proportionmetrics FROM aart;
GRANT ALL ON TABLE proportionmetrics TO aart;
GRANT SELECT ON TABLE proportionmetrics TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE proportionmetrics TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE proportionmetrics TO etl_user;


--
-- Name: rawtoscalescores; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE rawtoscalescores FROM PUBLIC;
REVOKE ALL ON TABLE rawtoscalescores FROM aart;
GRANT ALL ON TABLE rawtoscalescores TO aart;
GRANT SELECT ON TABLE rawtoscalescores TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE rawtoscalescores TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE rawtoscalescores TO etl_user;


--
-- Name: rawtoscalescores_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE rawtoscalescores_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE rawtoscalescores_id_seq FROM aart;
GRANT ALL ON SEQUENCE rawtoscalescores_id_seq TO aart;
GRANT SELECT ON SEQUENCE rawtoscalescores_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE rawtoscalescores_id_seq TO aart_user;
GRANT ALL ON SEQUENCE rawtoscalescores_id_seq TO etl_user;


--
-- Name: readaloudaccomodation_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE readaloudaccomodation_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE readaloudaccomodation_id_seq FROM aart;
GRANT ALL ON SEQUENCE readaloudaccomodation_id_seq TO aart;
GRANT SELECT ON SEQUENCE readaloudaccomodation_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE readaloudaccomodation_id_seq TO aart_user;
GRANT ALL ON SEQUENCE readaloudaccomodation_id_seq TO etl_user;


--
-- Name: readaloudaccommodation; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE readaloudaccommodation FROM PUBLIC;
REVOKE ALL ON TABLE readaloudaccommodation FROM aart;
GRANT ALL ON TABLE readaloudaccommodation TO aart;
GRANT SELECT ON TABLE readaloudaccommodation TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE readaloudaccommodation TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE readaloudaccommodation TO etl_user;


--
-- Name: reportassessmentprogram; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE reportassessmentprogram FROM PUBLIC;
REVOKE ALL ON TABLE reportassessmentprogram FROM aart;
GRANT ALL ON TABLE reportassessmentprogram TO aart;
GRANT SELECT ON TABLE reportassessmentprogram TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportassessmentprogram TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportassessmentprogram TO etl_user;


--
-- Name: reportassessmentprogram_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE reportassessmentprogram_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE reportassessmentprogram_id_seq FROM aart;
GRANT ALL ON SEQUENCE reportassessmentprogram_id_seq TO aart;
GRANT SELECT ON SEQUENCE reportassessmentprogram_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE reportassessmentprogram_id_seq TO aart_user;
GRANT ALL ON SEQUENCE reportassessmentprogram_id_seq TO etl_user;


--
-- Name: reportassessmentprogramgroup_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE reportassessmentprogramgroup_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE reportassessmentprogramgroup_id_seq FROM aart;
GRANT ALL ON SEQUENCE reportassessmentprogramgroup_id_seq TO aart;
GRANT SELECT ON SEQUENCE reportassessmentprogramgroup_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE reportassessmentprogramgroup_id_seq TO aart_user;
GRANT ALL ON SEQUENCE reportassessmentprogramgroup_id_seq TO etl_user;


--
-- Name: reportassessmentprogramgroup; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE reportassessmentprogramgroup FROM PUBLIC;
REVOKE ALL ON TABLE reportassessmentprogramgroup FROM aart;
GRANT ALL ON TABLE reportassessmentprogramgroup TO aart;
GRANT SELECT ON TABLE reportassessmentprogramgroup TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportassessmentprogramgroup TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportassessmentprogramgroup TO etl_user;


--
-- Name: reportprocess; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE reportprocess FROM PUBLIC;
REVOKE ALL ON TABLE reportprocess FROM aart;
GRANT ALL ON TABLE reportprocess TO aart;
GRANT SELECT ON TABLE reportprocess TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportprocess TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportprocess TO etl_user;


--
-- Name: reportprocess_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE reportprocess_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE reportprocess_id_seq FROM aart;
GRANT ALL ON SEQUENCE reportprocess_id_seq TO aart;
GRANT SELECT ON SEQUENCE reportprocess_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE reportprocess_id_seq TO aart_user;
GRANT ALL ON SEQUENCE reportprocess_id_seq TO etl_user;


--
-- Name: reportprocessreason; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE reportprocessreason FROM PUBLIC;
REVOKE ALL ON TABLE reportprocessreason FROM aart;
GRANT ALL ON TABLE reportprocessreason TO aart;
GRANT SELECT ON TABLE reportprocessreason TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportprocessreason TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportprocessreason TO etl_user;


--
-- Name: reportprocessrecordcounts; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE reportprocessrecordcounts FROM PUBLIC;
REVOKE ALL ON TABLE reportprocessrecordcounts FROM aart;
GRANT ALL ON TABLE reportprocessrecordcounts TO aart;
GRANT SELECT ON TABLE reportprocessrecordcounts TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportprocessrecordcounts TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportprocessrecordcounts TO etl_user;


--
-- Name: reportprocessrecordcounts_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE reportprocessrecordcounts_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE reportprocessrecordcounts_id_seq FROM aart;
GRANT ALL ON SEQUENCE reportprocessrecordcounts_id_seq TO aart;
GRANT SELECT ON SEQUENCE reportprocessrecordcounts_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE reportprocessrecordcounts_id_seq TO aart_user;
GRANT ALL ON SEQUENCE reportprocessrecordcounts_id_seq TO etl_user;


--
-- Name: reportsmedianscore; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE reportsmedianscore FROM PUBLIC;
REVOKE ALL ON TABLE reportsmedianscore FROM aart;
GRANT ALL ON TABLE reportsmedianscore TO aart;
GRANT SELECT ON TABLE reportsmedianscore TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportsmedianscore TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportsmedianscore TO etl_user;


--
-- Name: reportsmedianscore_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE reportsmedianscore_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE reportsmedianscore_id_seq FROM aart;
GRANT ALL ON SEQUENCE reportsmedianscore_id_seq TO aart;
GRANT SELECT ON SEQUENCE reportsmedianscore_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE reportsmedianscore_id_seq TO aart_user;
GRANT ALL ON SEQUENCE reportsmedianscore_id_seq TO etl_user;


--
-- Name: reportspercentbylevel; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE reportspercentbylevel FROM PUBLIC;
REVOKE ALL ON TABLE reportspercentbylevel FROM aart;
GRANT ALL ON TABLE reportspercentbylevel TO aart;
GRANT SELECT ON TABLE reportspercentbylevel TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportspercentbylevel TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportspercentbylevel TO etl_user;


--
-- Name: reportspercentbylevel_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE reportspercentbylevel_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE reportspercentbylevel_id_seq FROM aart;
GRANT ALL ON SEQUENCE reportspercentbylevel_id_seq TO aart;
GRANT SELECT ON SEQUENCE reportspercentbylevel_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE reportspercentbylevel_id_seq TO aart_user;
GRANT ALL ON SEQUENCE reportspercentbylevel_id_seq TO etl_user;


--
-- Name: reportsubscores; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE reportsubscores FROM PUBLIC;
REVOKE ALL ON TABLE reportsubscores FROM aart;
GRANT ALL ON TABLE reportsubscores TO aart;
GRANT SELECT ON TABLE reportsubscores TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportsubscores TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reportsubscores TO etl_user;


--
-- Name: reportsubscores_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE reportsubscores_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE reportsubscores_id_seq FROM aart;
GRANT ALL ON SEQUENCE reportsubscores_id_seq TO aart;
GRANT SELECT ON SEQUENCE reportsubscores_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE reportsubscores_id_seq TO aart_user;
GRANT ALL ON SEQUENCE reportsubscores_id_seq TO etl_user;


--
-- Name: reporttestlevelsubscores; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE reporttestlevelsubscores FROM PUBLIC;
REVOKE ALL ON TABLE reporttestlevelsubscores FROM aart;
GRANT ALL ON TABLE reporttestlevelsubscores TO aart;
GRANT SELECT ON TABLE reporttestlevelsubscores TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reporttestlevelsubscores TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE reporttestlevelsubscores TO etl_user;


--
-- Name: reporttestlevelsubscores_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE reporttestlevelsubscores_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE reporttestlevelsubscores_id_seq FROM aart;
GRANT ALL ON SEQUENCE reporttestlevelsubscores_id_seq TO aart;
GRANT SELECT ON SEQUENCE reporttestlevelsubscores_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE reporttestlevelsubscores_id_seq TO aart_user;
GRANT ALL ON SEQUENCE reporttestlevelsubscores_id_seq TO etl_user;


--
-- Name: restriction; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE restriction FROM PUBLIC;
REVOKE ALL ON TABLE restriction FROM aart;
GRANT ALL ON TABLE restriction TO aart;
GRANT SELECT ON TABLE restriction TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE restriction TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE restriction TO etl_user;


--
-- Name: restrictionsauthorities; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE restrictionsauthorities FROM PUBLIC;
REVOKE ALL ON TABLE restrictionsauthorities FROM aart;
GRANT ALL ON TABLE restrictionsauthorities TO aart;
GRANT SELECT ON TABLE restrictionsauthorities TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE restrictionsauthorities TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE restrictionsauthorities TO etl_user;


--
-- Name: restrictionsorganizations; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE restrictionsorganizations FROM PUBLIC;
REVOKE ALL ON TABLE restrictionsorganizations FROM aart;
GRANT ALL ON TABLE restrictionsorganizations TO aart;
GRANT SELECT ON TABLE restrictionsorganizations TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE restrictionsorganizations TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE restrictionsorganizations TO etl_user;


--
-- Name: resource_restriction; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE resource_restriction FROM PUBLIC;
REVOKE ALL ON TABLE resource_restriction FROM aart;
GRANT ALL ON TABLE resource_restriction TO aart;
GRANT SELECT ON TABLE resource_restriction TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE resource_restriction TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE resource_restriction TO etl_user;


--
-- Name: restriction_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE restriction_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE restriction_id_seq FROM aart;
GRANT ALL ON SEQUENCE restriction_id_seq TO aart;
GRANT SELECT ON SEQUENCE restriction_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE restriction_id_seq TO aart_user;
GRANT ALL ON SEQUENCE restriction_id_seq TO etl_user;


--
-- Name: restrictionsauthorities_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE restrictionsauthorities_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE restrictionsauthorities_id_seq FROM aart;
GRANT ALL ON SEQUENCE restrictionsauthorities_id_seq TO aart;
GRANT SELECT ON SEQUENCE restrictionsauthorities_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE restrictionsauthorities_id_seq TO aart_user;
GRANT ALL ON SEQUENCE restrictionsauthorities_id_seq TO etl_user;


--
-- Name: restrictionsorganizations_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE restrictionsorganizations_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE restrictionsorganizations_id_seq FROM aart;
GRANT ALL ON SEQUENCE restrictionsorganizations_id_seq TO aart;
GRANT SELECT ON SEQUENCE restrictionsorganizations_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE restrictionsorganizations_id_seq TO aart_user;
GRANT ALL ON SEQUENCE restrictionsorganizations_id_seq TO etl_user;


--
-- Name: restrictionsorganizations_restrictionid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE restrictionsorganizations_restrictionid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE restrictionsorganizations_restrictionid_seq FROM aart;
GRANT ALL ON SEQUENCE restrictionsorganizations_restrictionid_seq TO aart;
GRANT SELECT ON SEQUENCE restrictionsorganizations_restrictionid_seq TO aart_reader;
GRANT ALL ON SEQUENCE restrictionsorganizations_restrictionid_seq TO aart_user;
GRANT ALL ON SEQUENCE restrictionsorganizations_restrictionid_seq TO etl_user;


--
-- Name: roster_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE roster_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE roster_id_seq FROM aart;
GRANT ALL ON SEQUENCE roster_id_seq TO aart;
GRANT SELECT ON SEQUENCE roster_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE roster_id_seq TO aart_user;
GRANT ALL ON SEQUENCE roster_id_seq TO etl_user;


--
-- Name: rubriccategory; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE rubriccategory FROM PUBLIC;
REVOKE ALL ON TABLE rubriccategory FROM aart;
GRANT ALL ON TABLE rubriccategory TO aart;
GRANT SELECT ON TABLE rubriccategory TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE rubriccategory TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE rubriccategory TO etl_user;


--
-- Name: rubriccategoryid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE rubriccategoryid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE rubriccategoryid_seq FROM aart;
GRANT ALL ON SEQUENCE rubriccategoryid_seq TO aart;
GRANT SELECT ON SEQUENCE rubriccategoryid_seq TO aart_reader;
GRANT ALL ON SEQUENCE rubriccategoryid_seq TO aart_user;
GRANT ALL ON SEQUENCE rubriccategoryid_seq TO etl_user;


--
-- Name: rubricinfo; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE rubricinfo FROM PUBLIC;
REVOKE ALL ON TABLE rubricinfo FROM aart;
GRANT ALL ON TABLE rubricinfo TO aart;
GRANT SELECT ON TABLE rubricinfo TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE rubricinfo TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE rubricinfo TO etl_user;


--
-- Name: rubricinfoid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE rubricinfoid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE rubricinfoid_seq FROM aart;
GRANT ALL ON SEQUENCE rubricinfoid_seq TO aart;
GRANT SELECT ON SEQUENCE rubricinfoid_seq TO aart_reader;
GRANT ALL ON SEQUENCE rubricinfoid_seq TO aart_user;
GRANT ALL ON SEQUENCE rubricinfoid_seq TO etl_user;


--
-- Name: rubricscore; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE rubricscore FROM PUBLIC;
REVOKE ALL ON TABLE rubricscore FROM aart;
GRANT ALL ON TABLE rubricscore TO aart;
GRANT SELECT ON TABLE rubricscore TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE rubricscore TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE rubricscore TO etl_user;


--
-- Name: rubricscore_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE rubricscore_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE rubricscore_id_seq FROM aart;
GRANT ALL ON SEQUENCE rubricscore_id_seq TO aart;
GRANT SELECT ON SEQUENCE rubricscore_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE rubricscore_id_seq TO aart_user;
GRANT ALL ON SEQUENCE rubricscore_id_seq TO etl_user;


--
-- Name: scoremapping; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE scoremapping FROM PUBLIC;
REVOKE ALL ON TABLE scoremapping FROM aart;
GRANT ALL ON TABLE scoremapping TO aart;
GRANT SELECT ON TABLE scoremapping TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE scoremapping TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE scoremapping TO etl_user;


--
-- Name: scoringassignment; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE scoringassignment FROM PUBLIC;
REVOKE ALL ON TABLE scoringassignment FROM aart;
GRANT ALL ON TABLE scoringassignment TO aart;
GRANT SELECT ON TABLE scoringassignment TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE scoringassignment TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE scoringassignment TO etl_user;


--
-- Name: scoringassignment_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE scoringassignment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE scoringassignment_id_seq FROM aart;
GRANT ALL ON SEQUENCE scoringassignment_id_seq TO aart;
GRANT SELECT ON SEQUENCE scoringassignment_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE scoringassignment_id_seq TO aart_user;
GRANT ALL ON SEQUENCE scoringassignment_id_seq TO etl_user;


--
-- Name: scoringassignmentscorer; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE scoringassignmentscorer FROM PUBLIC;
REVOKE ALL ON TABLE scoringassignmentscorer FROM aart;
GRANT ALL ON TABLE scoringassignmentscorer TO aart;
GRANT SELECT ON TABLE scoringassignmentscorer TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE scoringassignmentscorer TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE scoringassignmentscorer TO etl_user;


--
-- Name: scoringassignmentscorer_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE scoringassignmentscorer_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE scoringassignmentscorer_id_seq FROM aart;
GRANT ALL ON SEQUENCE scoringassignmentscorer_id_seq TO aart;
GRANT SELECT ON SEQUENCE scoringassignmentscorer_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE scoringassignmentscorer_id_seq TO aart_user;
GRANT ALL ON SEQUENCE scoringassignmentscorer_id_seq TO etl_user;


--
-- Name: scoringassignmentstudent; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE scoringassignmentstudent FROM PUBLIC;
REVOKE ALL ON TABLE scoringassignmentstudent FROM aart;
GRANT ALL ON TABLE scoringassignmentstudent TO aart;
GRANT SELECT ON TABLE scoringassignmentstudent TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE scoringassignmentstudent TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE scoringassignmentstudent TO etl_user;


--
-- Name: scoringassignmentstudent_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE scoringassignmentstudent_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE scoringassignmentstudent_id_seq FROM aart;
GRANT ALL ON SEQUENCE scoringassignmentstudent_id_seq TO aart;
GRANT SELECT ON SEQUENCE scoringassignmentstudent_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE scoringassignmentstudent_id_seq TO aart_user;
GRANT ALL ON SEQUENCE scoringassignmentstudent_id_seq TO etl_user;


--
-- Name: sensitivitytag; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE sensitivitytag FROM PUBLIC;
REVOKE ALL ON TABLE sensitivitytag FROM aart;
GRANT ALL ON TABLE sensitivitytag TO aart;
GRANT SELECT ON TABLE sensitivitytag TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sensitivitytag TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sensitivitytag TO etl_user;


--
-- Name: sensitivitytag_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE sensitivitytag_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sensitivitytag_id_seq FROM aart;
GRANT ALL ON SEQUENCE sensitivitytag_id_seq TO aart;
GRANT SELECT ON SEQUENCE sensitivitytag_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE sensitivitytag_id_seq TO aart_user;
GRANT ALL ON SEQUENCE sensitivitytag_id_seq TO etl_user;


--
-- Name: signedaccomodation_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE signedaccomodation_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE signedaccomodation_id_seq FROM aart;
GRANT ALL ON SEQUENCE signedaccomodation_id_seq TO aart;
GRANT SELECT ON SEQUENCE signedaccomodation_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE signedaccomodation_id_seq TO aart_user;
GRANT ALL ON SEQUENCE signedaccomodation_id_seq TO etl_user;


--
-- Name: signedaccommodation; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE signedaccommodation FROM PUBLIC;
REVOKE ALL ON TABLE signedaccommodation FROM aart;
GRANT ALL ON TABLE signedaccommodation TO aart;
GRANT SELECT ON TABLE signedaccommodation TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE signedaccommodation TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE signedaccommodation TO etl_user;


--
-- Name: specialcircumstance; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE specialcircumstance FROM PUBLIC;
REVOKE ALL ON TABLE specialcircumstance FROM aart;
GRANT ALL ON TABLE specialcircumstance TO aart;
GRANT SELECT ON TABLE specialcircumstance TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE specialcircumstance TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE specialcircumstance TO etl_user;


--
-- Name: specialcircumstance_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE specialcircumstance_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE specialcircumstance_id_seq FROM aart;
GRANT ALL ON SEQUENCE specialcircumstance_id_seq TO aart;
GRANT SELECT ON SEQUENCE specialcircumstance_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE specialcircumstance_id_seq TO aart_user;
GRANT ALL ON SEQUENCE specialcircumstance_id_seq TO etl_user;


--
-- Name: stage; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE stage FROM PUBLIC;
REVOKE ALL ON TABLE stage FROM aart;
GRANT ALL ON TABLE stage TO aart;
GRANT SELECT ON TABLE stage TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stage TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stage TO etl_user;


--
-- Name: stage_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE stage_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stage_id_seq FROM aart;
GRANT ALL ON SEQUENCE stage_id_seq TO aart;
GRANT SELECT ON SEQUENCE stage_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE stage_id_seq TO aart_user;
GRANT ALL ON SEQUENCE stage_id_seq TO etl_user;


--
-- Name: statespecialcircumstance; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE statespecialcircumstance FROM PUBLIC;
REVOKE ALL ON TABLE statespecialcircumstance FROM aart;
GRANT ALL ON TABLE statespecialcircumstance TO aart;
GRANT SELECT ON TABLE statespecialcircumstance TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE statespecialcircumstance TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE statespecialcircumstance TO etl_user;


--
-- Name: stimulusvariant; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE stimulusvariant FROM PUBLIC;
REVOKE ALL ON TABLE stimulusvariant FROM aart;
GRANT ALL ON TABLE stimulusvariant TO aart;
GRANT SELECT ON TABLE stimulusvariant TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvariant TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvariant TO etl_user;


--
-- Name: stimulusvariant_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE stimulusvariant_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stimulusvariant_id_seq FROM aart;
GRANT ALL ON SEQUENCE stimulusvariant_id_seq TO aart;
GRANT SELECT ON SEQUENCE stimulusvariant_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE stimulusvariant_id_seq TO aart_user;
GRANT ALL ON SEQUENCE stimulusvariant_id_seq TO etl_user;


--
-- Name: stimulusvariantattachment; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE stimulusvariantattachment FROM PUBLIC;
REVOKE ALL ON TABLE stimulusvariantattachment FROM aart;
GRANT ALL ON TABLE stimulusvariantattachment TO aart;
GRANT SELECT ON TABLE stimulusvariantattachment TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvariantattachment TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvariantattachment TO etl_user;


--
-- Name: stimulusvariantattachment_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE stimulusvariantattachment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stimulusvariantattachment_id_seq FROM aart;
GRANT ALL ON SEQUENCE stimulusvariantattachment_id_seq TO aart;
GRANT SELECT ON SEQUENCE stimulusvariantattachment_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE stimulusvariantattachment_id_seq TO aart_user;
GRANT ALL ON SEQUENCE stimulusvariantattachment_id_seq TO etl_user;


--
-- Name: stimulusvariantattachmentmetadata; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE stimulusvariantattachmentmetadata FROM PUBLIC;
REVOKE ALL ON TABLE stimulusvariantattachmentmetadata FROM aart;
GRANT ALL ON TABLE stimulusvariantattachmentmetadata TO aart;
GRANT SELECT ON TABLE stimulusvariantattachmentmetadata TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvariantattachmentmetadata TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvariantattachmentmetadata TO etl_user;


--
-- Name: stimulusvariantcontentarea; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE stimulusvariantcontentarea FROM PUBLIC;
REVOKE ALL ON TABLE stimulusvariantcontentarea FROM aart;
GRANT ALL ON TABLE stimulusvariantcontentarea TO aart;
GRANT SELECT ON TABLE stimulusvariantcontentarea TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvariantcontentarea TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvariantcontentarea TO etl_user;


--
-- Name: stimulusvariantgradecourse; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE stimulusvariantgradecourse FROM PUBLIC;
REVOKE ALL ON TABLE stimulusvariantgradecourse FROM aart;
GRANT ALL ON TABLE stimulusvariantgradecourse TO aart;
GRANT SELECT ON TABLE stimulusvariantgradecourse TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvariantgradecourse TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvariantgradecourse TO etl_user;


--
-- Name: stimulusvarianttestingprogram; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE stimulusvarianttestingprogram FROM PUBLIC;
REVOKE ALL ON TABLE stimulusvarianttestingprogram FROM aart;
GRANT ALL ON TABLE stimulusvarianttestingprogram TO aart;
GRANT SELECT ON TABLE stimulusvarianttestingprogram TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvarianttestingprogram TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE stimulusvarianttestingprogram TO etl_user;


--
-- Name: studentadaptivetest_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentadaptivetest_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentadaptivetest_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentadaptivetest_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentadaptivetest_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentadaptivetest_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentadaptivetest_id_seq TO etl_user;


--
-- Name: studentadaptivetest; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentadaptivetest FROM PUBLIC;
REVOKE ALL ON TABLE studentadaptivetest FROM aart;
GRANT ALL ON TABLE studentadaptivetest TO aart;
GRANT SELECT ON TABLE studentadaptivetest TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentadaptivetest TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentadaptivetest TO etl_user;


--
-- Name: studentadaptivetestfinaltheta; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentadaptivetestfinaltheta FROM PUBLIC;
REVOKE ALL ON TABLE studentadaptivetestfinaltheta FROM aart;
GRANT ALL ON TABLE studentadaptivetestfinaltheta TO aart;
GRANT SELECT ON TABLE studentadaptivetestfinaltheta TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentadaptivetestfinaltheta TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentadaptivetestfinaltheta TO etl_user;


--
-- Name: studentadaptivetestthetastatus; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentadaptivetestthetastatus FROM PUBLIC;
REVOKE ALL ON TABLE studentadaptivetestthetastatus FROM aart;
GRANT ALL ON TABLE studentadaptivetestthetastatus TO aart;
GRANT SELECT ON TABLE studentadaptivetestthetastatus TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentadaptivetestthetastatus TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentadaptivetestthetastatus TO etl_user;


--
-- Name: studentassessmentprogram; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentassessmentprogram FROM PUBLIC;
REVOKE ALL ON TABLE studentassessmentprogram FROM aart;
GRANT ALL ON TABLE studentassessmentprogram TO aart;
GRANT SELECT ON TABLE studentassessmentprogram TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentassessmentprogram TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentassessmentprogram TO etl_user;


--
-- Name: studentassessmentprogram_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentassessmentprogram_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentassessmentprogram_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentassessmentprogram_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentassessmentprogram_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentassessmentprogram_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentassessmentprogram_id_seq TO etl_user;


--
-- Name: studentaudit; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentaudit FROM PUBLIC;
REVOKE ALL ON TABLE studentaudit FROM aart;
GRANT ALL ON TABLE studentaudit TO aart;
GRANT SELECT ON TABLE studentaudit TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentaudit TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentaudit TO etl_user;


--
-- Name: studentbandrecommendation_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentbandrecommendation_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentbandrecommendation_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentbandrecommendation_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentbandrecommendation_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentbandrecommendation_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentbandrecommendation_id_seq TO etl_user;


--
-- Name: studentbandrecommendation; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentbandrecommendation FROM PUBLIC;
REVOKE ALL ON TABLE studentbandrecommendation FROM aart;
GRANT ALL ON TABLE studentbandrecommendation TO aart;
GRANT SELECT ON TABLE studentbandrecommendation TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentbandrecommendation TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentbandrecommendation TO etl_user;


--
-- Name: studentnodeprobability; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentnodeprobability FROM PUBLIC;
REVOKE ALL ON TABLE studentnodeprobability FROM aart;
GRANT ALL ON TABLE studentnodeprobability TO aart;
GRANT SELECT ON TABLE studentnodeprobability TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentnodeprobability TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentnodeprobability TO etl_user;


--
-- Name: studentnodeprobability_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentnodeprobability_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentnodeprobability_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentnodeprobability_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentnodeprobability_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentnodeprobability_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentnodeprobability_id_seq TO etl_user;


--
-- Name: studentpassword; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentpassword FROM PUBLIC;
REVOKE ALL ON TABLE studentpassword FROM aart;
GRANT ALL ON TABLE studentpassword TO aart;
GRANT SELECT ON TABLE studentpassword TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentpassword TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentpassword TO etl_user;


--
-- Name: studentpassword_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentpassword_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentpassword_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentpassword_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentpassword_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentpassword_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentpassword_id_seq TO etl_user;


--
-- Name: studentpnpjson; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentpnpjson FROM PUBLIC;
REVOKE ALL ON TABLE studentpnpjson FROM aart;
GRANT ALL ON TABLE studentpnpjson TO aart;
GRANT SELECT ON TABLE studentpnpjson TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentpnpjson TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentpnpjson TO etl_user;


--
-- Name: studentprofileitemattributevalue; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentprofileitemattributevalue FROM PUBLIC;
REVOKE ALL ON TABLE studentprofileitemattributevalue FROM aart;
GRANT ALL ON TABLE studentprofileitemattributevalue TO aart;
GRANT SELECT ON TABLE studentprofileitemattributevalue TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentprofileitemattributevalue TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentprofileitemattributevalue TO etl_user;


--
-- Name: studentprofileitemattributevalue_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentprofileitemattributevalue_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentprofileitemattributevalue_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentprofileitemattributevalue_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentprofileitemattributevalue_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentprofileitemattributevalue_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentprofileitemattributevalue_id_seq TO etl_user;


--
-- Name: studentreport; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentreport FROM PUBLIC;
REVOKE ALL ON TABLE studentreport FROM aart;
GRANT ALL ON TABLE studentreport TO aart;
GRANT SELECT ON TABLE studentreport TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentreport TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentreport TO etl_user;


--
-- Name: studentreport_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentreport_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentreport_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentreport_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentreport_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentreport_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentreport_id_seq TO etl_user;


--
-- Name: studentreporttestscores; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentreporttestscores FROM PUBLIC;
REVOKE ALL ON TABLE studentreporttestscores FROM aart;
GRANT ALL ON TABLE studentreporttestscores TO aart;
GRANT SELECT ON TABLE studentreporttestscores TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentreporttestscores TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentreporttestscores TO etl_user;


--
-- Name: studentreporttestscores_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentreporttestscores_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentreporttestscores_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentreporttestscores_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentreporttestscores_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentreporttestscores_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentreporttestscores_id_seq TO etl_user;


--
-- Name: studentresponseaudit; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentresponseaudit FROM PUBLIC;
REVOKE ALL ON TABLE studentresponseaudit FROM aart;
GRANT ALL ON TABLE studentresponseaudit TO aart;
GRANT SELECT ON TABLE studentresponseaudit TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentresponseaudit TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentresponseaudit TO etl_user;


--
-- Name: studentresponseaudit_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentresponseaudit_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentresponseaudit_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentresponseaudit_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentresponseaudit_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentresponseaudit_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentresponseaudit_id_seq TO etl_user;


--
-- Name: studentresponsescore; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentresponsescore FROM PUBLIC;
REVOKE ALL ON TABLE studentresponsescore FROM aart;
GRANT ALL ON TABLE studentresponsescore TO aart;
GRANT SELECT ON TABLE studentresponsescore TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentresponsescore TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentresponsescore TO etl_user;


--
-- Name: studentresponsescorerater; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentresponsescorerater FROM PUBLIC;
REVOKE ALL ON TABLE studentresponsescorerater FROM aart;
GRANT ALL ON TABLE studentresponsescorerater TO aart;
GRANT SELECT ON TABLE studentresponsescorerater TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentresponsescorerater TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentresponsescorerater TO etl_user;


--
-- Name: studentresponsetaskvariantgroup; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentresponsetaskvariantgroup FROM PUBLIC;
REVOKE ALL ON TABLE studentresponsetaskvariantgroup FROM aart;
GRANT ALL ON TABLE studentresponsetaskvariantgroup TO aart;
GRANT SELECT ON TABLE studentresponsetaskvariantgroup TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentresponsetaskvariantgroup TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentresponsetaskvariantgroup TO etl_user;


--
-- Name: studentsadaptivetestsections; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentsadaptivetestsections FROM PUBLIC;
REVOKE ALL ON TABLE studentsadaptivetestsections FROM aart;
GRANT ALL ON TABLE studentsadaptivetestsections TO aart;
GRANT SELECT ON TABLE studentsadaptivetestsections TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsadaptivetestsections TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsadaptivetestsections TO etl_user;


--
-- Name: studentsassessments; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentsassessments FROM PUBLIC;
REVOKE ALL ON TABLE studentsassessments FROM aart;
GRANT ALL ON TABLE studentsassessments TO aart;
GRANT SELECT ON TABLE studentsassessments TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsassessments TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsassessments TO etl_user;


--
-- Name: studentspecialcircumstance; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentspecialcircumstance FROM PUBLIC;
REVOKE ALL ON TABLE studentspecialcircumstance FROM aart;
GRANT ALL ON TABLE studentspecialcircumstance TO aart;
GRANT SELECT ON TABLE studentspecialcircumstance TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentspecialcircumstance TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentspecialcircumstance TO etl_user;


--
-- Name: studentsresponseparameters_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentsresponseparameters_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentsresponseparameters_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentsresponseparameters_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentsresponseparameters_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentsresponseparameters_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentsresponseparameters_id_seq TO etl_user;


--
-- Name: studentsresponseparameters; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentsresponseparameters FROM PUBLIC;
REVOKE ALL ON TABLE studentsresponseparameters FROM aart;
GRANT ALL ON TABLE studentsresponseparameters TO aart;
GRANT SELECT ON TABLE studentsresponseparameters TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsresponseparameters TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsresponseparameters TO etl_user;


--
-- Name: studentsresponses; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentsresponses FROM PUBLIC;
REVOKE ALL ON TABLE studentsresponses FROM aart;
GRANT ALL ON TABLE studentsresponses TO aart;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsresponses TO aart_user;
GRANT SELECT ON TABLE studentsresponses TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsresponses TO etl_user;


--
-- Name: studentsresponses_aart; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentsresponses_aart FROM PUBLIC;
REVOKE ALL ON TABLE studentsresponses_aart FROM aart;
GRANT ALL ON TABLE studentsresponses_aart TO aart;
GRANT SELECT ON TABLE studentsresponses_aart TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsresponses_aart TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsresponses_aart TO etl_user;


--
-- Name: studentsresponses_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentsresponses_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentsresponses_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentsresponses_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentsresponses_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentsresponses_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentsresponses_id_seq TO etl_user;


--
-- Name: studentstests_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentstests_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentstests_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentstests_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentstests_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentstests_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentstests_id_seq TO etl_user;


--
-- Name: studentstestsections_aart; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentstestsections_aart FROM PUBLIC;
REVOKE ALL ON TABLE studentstestsections_aart FROM aart;
GRANT ALL ON TABLE studentstestsections_aart TO aart;
GRANT SELECT ON TABLE studentstestsections_aart TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestsections_aart TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestsections_aart TO etl_user;


--
-- Name: studentstestsections_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentstestsections_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentstestsections_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentstestsections_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentstestsections_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentstestsections_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentstestsections_id_seq TO etl_user;


--
-- Name: studentstestsections; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentstestsections FROM PUBLIC;
REVOKE ALL ON TABLE studentstestsections FROM aart;
GRANT ALL ON TABLE studentstestsections TO aart;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestsections TO aart_user;
GRANT SELECT ON TABLE studentstestsections TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestsections TO etl_user;


--
-- Name: studentstestsectionstasks; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentstestsectionstasks FROM PUBLIC;
REVOKE ALL ON TABLE studentstestsectionstasks FROM aart;
GRANT ALL ON TABLE studentstestsectionstasks TO aart;
GRANT SELECT ON TABLE studentstestsectionstasks TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestsectionstasks TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestsectionstasks TO etl_user;


--
-- Name: studentstestsectionstasksfoils; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentstestsectionstasksfoils FROM PUBLIC;
REVOKE ALL ON TABLE studentstestsectionstasksfoils FROM aart;
GRANT ALL ON TABLE studentstestsectionstasksfoils TO aart;
GRANT SELECT ON TABLE studentstestsectionstasksfoils TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestsectionstasksfoils TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestsectionstasksfoils TO etl_user;


--
-- Name: studentstestshighlighterindex; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentstestshighlighterindex FROM PUBLIC;
REVOKE ALL ON TABLE studentstestshighlighterindex FROM aart;
GRANT ALL ON TABLE studentstestshighlighterindex TO aart;
GRANT SELECT ON TABLE studentstestshighlighterindex TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestshighlighterindex TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestshighlighterindex TO etl_user;


--
-- Name: studentstestshistory_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentstestshistory_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentstestshistory_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentstestshistory_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentstestshistory_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentstestshistory_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentstestshistory_id_seq TO etl_user;


--
-- Name: studentstestshistory; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentstestshistory FROM PUBLIC;
REVOKE ALL ON TABLE studentstestshistory FROM aart;
GRANT ALL ON TABLE studentstestshistory TO aart;
GRANT SELECT ON TABLE studentstestshistory TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestshistory TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentstestshistory TO etl_user;


--
-- Name: studentsteststags; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentsteststags FROM PUBLIC;
REVOKE ALL ON TABLE studentsteststags FROM aart;
GRANT ALL ON TABLE studentsteststags TO aart;
GRANT SELECT ON TABLE studentsteststags TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsteststags TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsteststags TO etl_user;


--
-- Name: studentsurveyresponse; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studentsurveyresponse FROM PUBLIC;
REVOKE ALL ON TABLE studentsurveyresponse FROM aart;
GRANT ALL ON TABLE studentsurveyresponse TO aart;
GRANT SELECT ON TABLE studentsurveyresponse TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsurveyresponse TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studentsurveyresponse TO etl_user;


--
-- Name: studentsurveyresponse_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studentsurveyresponse_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studentsurveyresponse_id_seq FROM aart;
GRANT ALL ON SEQUENCE studentsurveyresponse_id_seq TO aart;
GRANT SELECT ON SEQUENCE studentsurveyresponse_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studentsurveyresponse_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studentsurveyresponse_id_seq TO etl_user;


--
-- Name: studenttracker; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studenttracker FROM PUBLIC;
REVOKE ALL ON TABLE studenttracker FROM aart;
GRANT ALL ON TABLE studenttracker TO aart;
GRANT SELECT ON TABLE studenttracker TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studenttracker TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studenttracker TO etl_user;


--
-- Name: studenttracker_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studenttracker_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studenttracker_id_seq FROM aart;
GRANT ALL ON SEQUENCE studenttracker_id_seq TO aart;
GRANT SELECT ON SEQUENCE studenttracker_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studenttracker_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studenttracker_id_seq TO etl_user;


--
-- Name: studenttrackerband; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studenttrackerband FROM PUBLIC;
REVOKE ALL ON TABLE studenttrackerband FROM aart;
GRANT ALL ON TABLE studenttrackerband TO aart;
GRANT SELECT ON TABLE studenttrackerband TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studenttrackerband TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studenttrackerband TO etl_user;


--
-- Name: studenttrackerband_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE studenttrackerband_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE studenttrackerband_id_seq FROM aart;
GRANT ALL ON SEQUENCE studenttrackerband_id_seq TO aart;
GRANT SELECT ON SEQUENCE studenttrackerband_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE studenttrackerband_id_seq TO aart_user;
GRANT ALL ON SEQUENCE studenttrackerband_id_seq TO etl_user;


--
-- Name: studenttrackerblueprintstatus; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE studenttrackerblueprintstatus FROM PUBLIC;
REVOKE ALL ON TABLE studenttrackerblueprintstatus FROM aart;
GRANT ALL ON TABLE studenttrackerblueprintstatus TO aart;
GRANT SELECT ON TABLE studenttrackerblueprintstatus TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studenttrackerblueprintstatus TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE studenttrackerblueprintstatus TO etl_user;


--
-- Name: subjectarea; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE subjectarea FROM PUBLIC;
REVOKE ALL ON TABLE subjectarea FROM aart;
GRANT ALL ON TABLE subjectarea TO aart;
GRANT SELECT ON TABLE subjectarea TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE subjectarea TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE subjectarea TO etl_user;


--
-- Name: subjectarea_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE subjectarea_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE subjectarea_id_seq FROM aart;
GRANT ALL ON SEQUENCE subjectarea_id_seq TO aart;
GRANT SELECT ON SEQUENCE subjectarea_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE subjectarea_id_seq TO aart_user;
GRANT ALL ON SEQUENCE subjectarea_id_seq TO etl_user;


--
-- Name: subscoreframework; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE subscoreframework FROM PUBLIC;
REVOKE ALL ON TABLE subscoreframework FROM aart;
GRANT ALL ON TABLE subscoreframework TO aart;
GRANT SELECT ON TABLE subscoreframework TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE subscoreframework TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE subscoreframework TO etl_user;


--
-- Name: subscoreframework_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE subscoreframework_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE subscoreframework_id_seq FROM aart;
GRANT ALL ON SEQUENCE subscoreframework_id_seq TO aart;
GRANT SELECT ON SEQUENCE subscoreframework_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE subscoreframework_id_seq TO aart_user;
GRANT ALL ON SEQUENCE subscoreframework_id_seq TO etl_user;


--
-- Name: subscoresrawtoscale; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE subscoresrawtoscale FROM PUBLIC;
REVOKE ALL ON TABLE subscoresrawtoscale FROM aart;
GRANT ALL ON TABLE subscoresrawtoscale TO aart;
GRANT SELECT ON TABLE subscoresrawtoscale TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE subscoresrawtoscale TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE subscoresrawtoscale TO etl_user;


--
-- Name: subscores_rawtoscale_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE subscores_rawtoscale_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE subscores_rawtoscale_id_seq FROM aart;
GRANT ALL ON SEQUENCE subscores_rawtoscale_id_seq TO aart;
GRANT SELECT ON SEQUENCE subscores_rawtoscale_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE subscores_rawtoscale_id_seq TO aart_user;
GRANT ALL ON SEQUENCE subscores_rawtoscale_id_seq TO etl_user;


--
-- Name: subscoresdescription; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE subscoresdescription FROM PUBLIC;
REVOKE ALL ON TABLE subscoresdescription FROM aart;
GRANT ALL ON TABLE subscoresdescription TO aart;
GRANT SELECT ON TABLE subscoresdescription TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE subscoresdescription TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE subscoresdescription TO etl_user;


--
-- Name: subscoresdescription_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE subscoresdescription_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE subscoresdescription_id_seq FROM aart;
GRANT ALL ON SEQUENCE subscoresdescription_id_seq TO aart;
GRANT SELECT ON SEQUENCE subscoresdescription_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE subscoresdescription_id_seq TO aart_user;
GRANT ALL ON SEQUENCE subscoresdescription_id_seq TO etl_user;


--
-- Name: subscoresrawtoscale_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE subscoresrawtoscale_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE subscoresrawtoscale_id_seq FROM aart;
GRANT ALL ON SEQUENCE subscoresrawtoscale_id_seq TO aart;
GRANT SELECT ON SEQUENCE subscoresrawtoscale_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE subscoresrawtoscale_id_seq TO aart_user;
GRANT ALL ON SEQUENCE subscoresrawtoscale_id_seq TO etl_user;


--
-- Name: suppressedlevel_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE suppressedlevel_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE suppressedlevel_id_seq FROM aart;
GRANT ALL ON SEQUENCE suppressedlevel_id_seq TO aart;
GRANT SELECT ON SEQUENCE suppressedlevel_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE suppressedlevel_id_seq TO aart_user;
GRANT ALL ON SEQUENCE suppressedlevel_id_seq TO etl_user;


--
-- Name: suppressedlevel; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE suppressedlevel FROM PUBLIC;
REVOKE ALL ON TABLE suppressedlevel FROM aart;
GRANT ALL ON TABLE suppressedlevel TO aart;
GRANT SELECT ON TABLE suppressedlevel TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE suppressedlevel TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE suppressedlevel TO etl_user;


--
-- Name: survey; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE survey FROM PUBLIC;
REVOKE ALL ON TABLE survey FROM aart;
GRANT ALL ON TABLE survey TO aart;
GRANT SELECT ON TABLE survey TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE survey TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE survey TO etl_user;


--
-- Name: survey_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE survey_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE survey_id_seq FROM aart;
GRANT ALL ON SEQUENCE survey_id_seq TO aart;
GRANT SELECT ON SEQUENCE survey_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE survey_id_seq TO aart_user;
GRANT ALL ON SEQUENCE survey_id_seq TO etl_user;


--
-- Name: surveylabel; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE surveylabel FROM PUBLIC;
REVOKE ALL ON TABLE surveylabel FROM aart;
GRANT ALL ON TABLE surveylabel TO aart;
GRANT SELECT ON TABLE surveylabel TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE surveylabel TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE surveylabel TO etl_user;


--
-- Name: surveylabelprerequisite; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE surveylabelprerequisite FROM PUBLIC;
REVOKE ALL ON TABLE surveylabelprerequisite FROM aart;
GRANT ALL ON TABLE surveylabelprerequisite TO aart;
GRANT SELECT ON TABLE surveylabelprerequisite TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE surveylabelprerequisite TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE surveylabelprerequisite TO etl_user;


--
-- Name: surveylabels_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE surveylabels_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE surveylabels_id_seq FROM aart;
GRANT ALL ON SEQUENCE surveylabels_id_seq TO aart;
GRANT SELECT ON SEQUENCE surveylabels_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE surveylabels_id_seq TO aart_user;
GRANT ALL ON SEQUENCE surveylabels_id_seq TO etl_user;


--
-- Name: surveypagestatus; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE surveypagestatus FROM PUBLIC;
REVOKE ALL ON TABLE surveypagestatus FROM aart;
GRANT ALL ON TABLE surveypagestatus TO aart;
GRANT SELECT ON TABLE surveypagestatus TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE surveypagestatus TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE surveypagestatus TO etl_user;


--
-- Name: surveypagestatus_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE surveypagestatus_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE surveypagestatus_id_seq FROM aart;
GRANT ALL ON SEQUENCE surveypagestatus_id_seq TO aart;
GRANT SELECT ON SEQUENCE surveypagestatus_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE surveypagestatus_id_seq TO aart_user;
GRANT ALL ON SEQUENCE surveypagestatus_id_seq TO etl_user;


--
-- Name: surveyresponse; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE surveyresponse FROM PUBLIC;
REVOKE ALL ON TABLE surveyresponse FROM aart;
GRANT ALL ON TABLE surveyresponse TO aart;
GRANT SELECT ON TABLE surveyresponse TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE surveyresponse TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE surveyresponse TO etl_user;


--
-- Name: surveyresponses_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE surveyresponses_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE surveyresponses_id_seq FROM aart;
GRANT ALL ON SEQUENCE surveyresponses_id_seq TO aart;
GRANT SELECT ON SEQUENCE surveyresponses_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE surveyresponses_id_seq TO aart_user;
GRANT ALL ON SEQUENCE surveyresponses_id_seq TO etl_user;


--
-- Name: surveysection; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE surveysection FROM PUBLIC;
REVOKE ALL ON TABLE surveysection FROM aart;
GRANT ALL ON TABLE surveysection TO aart;
GRANT SELECT ON TABLE surveysection TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE surveysection TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE surveysection TO etl_user;


--
-- Name: surveysection_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE surveysection_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE surveysection_id_seq FROM aart;
GRANT ALL ON SEQUENCE surveysection_id_seq TO aart;
GRANT SELECT ON SEQUENCE surveysection_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE surveysection_id_seq TO aart_user;
GRANT ALL ON SEQUENCE surveysection_id_seq TO etl_user;


--
-- Name: tag; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE tag FROM PUBLIC;
REVOKE ALL ON TABLE tag FROM aart;
GRANT ALL ON TABLE tag TO aart;
GRANT SELECT ON TABLE tag TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tag TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tag TO etl_user;


--
-- Name: tag_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE tag_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tag_id_seq FROM aart;
GRANT ALL ON SEQUENCE tag_id_seq TO aart;
GRANT SELECT ON SEQUENCE tag_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE tag_id_seq TO aart_user;
GRANT ALL ON SEQUENCE tag_id_seq TO etl_user;


--
-- Name: taskvariant; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE taskvariant FROM PUBLIC;
REVOKE ALL ON TABLE taskvariant FROM aart;
GRANT ALL ON TABLE taskvariant TO aart;
GRANT SELECT ON TABLE taskvariant TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariant TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariant TO etl_user;


--
-- Name: task_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE task_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE task_id_seq FROM aart;
GRANT ALL ON SEQUENCE task_id_seq TO aart;
GRANT SELECT ON SEQUENCE task_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE task_id_seq TO aart_user;
GRANT ALL ON SEQUENCE task_id_seq TO etl_user;


--
-- Name: tasklayout; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE tasklayout FROM PUBLIC;
REVOKE ALL ON TABLE tasklayout FROM aart;
GRANT ALL ON TABLE tasklayout TO aart;
GRANT SELECT ON TABLE tasklayout TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tasklayout TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tasklayout TO etl_user;


--
-- Name: tasklayout_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE tasklayout_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tasklayout_id_seq FROM aart;
GRANT ALL ON SEQUENCE tasklayout_id_seq TO aart;
GRANT SELECT ON SEQUENCE tasklayout_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE tasklayout_id_seq TO aart_user;
GRANT ALL ON SEQUENCE tasklayout_id_seq TO etl_user;


--
-- Name: tasklayoutformat; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE tasklayoutformat FROM PUBLIC;
REVOKE ALL ON TABLE tasklayoutformat FROM aart;
GRANT ALL ON TABLE tasklayoutformat TO aart;
GRANT SELECT ON TABLE tasklayoutformat TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tasklayoutformat TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tasklayoutformat TO etl_user;


--
-- Name: tasklayoutformat_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE tasklayoutformat_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tasklayoutformat_id_seq FROM aart;
GRANT ALL ON SEQUENCE tasklayoutformat_id_seq TO aart;
GRANT SELECT ON SEQUENCE tasklayoutformat_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE tasklayoutformat_id_seq TO aart_user;
GRANT ALL ON SEQUENCE tasklayoutformat_id_seq TO etl_user;


--
-- Name: tasksubtype; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE tasksubtype FROM PUBLIC;
REVOKE ALL ON TABLE tasksubtype FROM aart;
GRANT ALL ON TABLE tasksubtype TO aart;
GRANT SELECT ON TABLE tasksubtype TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tasksubtype TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tasksubtype TO etl_user;


--
-- Name: tasksubtypeid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE tasksubtypeid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tasksubtypeid_seq FROM aart;
GRANT ALL ON SEQUENCE tasksubtypeid_seq TO aart;
GRANT SELECT ON SEQUENCE tasksubtypeid_seq TO aart_reader;
GRANT ALL ON SEQUENCE tasksubtypeid_seq TO aart_user;
GRANT ALL ON SEQUENCE tasksubtypeid_seq TO etl_user;


--
-- Name: tasktype; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE tasktype FROM PUBLIC;
REVOKE ALL ON TABLE tasktype FROM aart;
GRANT ALL ON TABLE tasktype TO aart;
GRANT SELECT ON TABLE tasktype TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tasktype TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tasktype TO etl_user;


--
-- Name: tasktype_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE tasktype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tasktype_id_seq FROM aart;
GRANT ALL ON SEQUENCE tasktype_id_seq TO aart;
GRANT SELECT ON SEQUENCE tasktype_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE tasktype_id_seq TO aart_user;
GRANT ALL ON SEQUENCE tasktype_id_seq TO etl_user;


--
-- Name: taskvariantcontentframeworkdetail; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE taskvariantcontentframeworkdetail FROM PUBLIC;
REVOKE ALL ON TABLE taskvariantcontentframeworkdetail FROM aart;
GRANT ALL ON TABLE taskvariantcontentframeworkdetail TO aart;
GRANT SELECT ON TABLE taskvariantcontentframeworkdetail TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantcontentframeworkdetail TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantcontentframeworkdetail TO etl_user;


--
-- Name: taskvariantessentialelementlinkage; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE taskvariantessentialelementlinkage FROM PUBLIC;
REVOKE ALL ON TABLE taskvariantessentialelementlinkage FROM aart;
GRANT ALL ON TABLE taskvariantessentialelementlinkage TO aart;
GRANT SELECT ON TABLE taskvariantessentialelementlinkage TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantessentialelementlinkage TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantessentialelementlinkage TO etl_user;


--
-- Name: taskvariantitemusage; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE taskvariantitemusage FROM PUBLIC;
REVOKE ALL ON TABLE taskvariantitemusage FROM aart;
GRANT ALL ON TABLE taskvariantitemusage TO aart;
GRANT SELECT ON TABLE taskvariantitemusage TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantitemusage TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantitemusage TO etl_user;


--
-- Name: taskvariantlearningmapnode_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE taskvariantlearningmapnode_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE taskvariantlearningmapnode_id_seq FROM aart;
GRANT ALL ON SEQUENCE taskvariantlearningmapnode_id_seq TO aart;
GRANT SELECT ON SEQUENCE taskvariantlearningmapnode_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE taskvariantlearningmapnode_id_seq TO aart_user;
GRANT ALL ON SEQUENCE taskvariantlearningmapnode_id_seq TO etl_user;


--
-- Name: taskvariantlearningmapnode; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE taskvariantlearningmapnode FROM PUBLIC;
REVOKE ALL ON TABLE taskvariantlearningmapnode FROM aart;
GRANT ALL ON TABLE taskvariantlearningmapnode TO aart;
GRANT SELECT ON TABLE taskvariantlearningmapnode TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantlearningmapnode TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantlearningmapnode TO etl_user;


--
-- Name: taskvariantrescore; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE taskvariantrescore FROM PUBLIC;
REVOKE ALL ON TABLE taskvariantrescore FROM aart;
GRANT ALL ON TABLE taskvariantrescore TO aart;
GRANT SELECT ON TABLE taskvariantrescore TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantrescore TO etl_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantrescore TO aart_user;


--
-- Name: taskvariantsfoils; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE taskvariantsfoils FROM PUBLIC;
REVOKE ALL ON TABLE taskvariantsfoils FROM aart;
GRANT ALL ON TABLE taskvariantsfoils TO aart;
GRANT SELECT ON TABLE taskvariantsfoils TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantsfoils TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantsfoils TO etl_user;


--
-- Name: taskvariantsstimulusvariants; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE taskvariantsstimulusvariants FROM PUBLIC;
REVOKE ALL ON TABLE taskvariantsstimulusvariants FROM aart;
GRANT ALL ON TABLE taskvariantsstimulusvariants TO aart;
GRANT SELECT ON TABLE taskvariantsstimulusvariants TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantsstimulusvariants TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantsstimulusvariants TO etl_user;


--
-- Name: taskvariantstools; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE taskvariantstools FROM PUBLIC;
REVOKE ALL ON TABLE taskvariantstools FROM aart;
GRANT ALL ON TABLE taskvariantstools TO aart;
GRANT SELECT ON TABLE taskvariantstools TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantstools TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE taskvariantstools TO etl_user;


--
-- Name: temp_students_enrollments; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE temp_students_enrollments FROM PUBLIC;
REVOKE ALL ON TABLE temp_students_enrollments FROM aart;
GRANT ALL ON TABLE temp_students_enrollments TO aart;
GRANT SELECT ON TABLE temp_students_enrollments TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE temp_students_enrollments TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE temp_students_enrollments TO etl_user;


--
-- Name: test_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE test_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE test_id_seq FROM aart;
GRANT ALL ON SEQUENCE test_id_seq TO aart;
GRANT SELECT ON SEQUENCE test_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE test_id_seq TO aart_user;
GRANT ALL ON SEQUENCE test_id_seq TO etl_user;


--
-- Name: testaccessibilityflag; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testaccessibilityflag FROM PUBLIC;
REVOKE ALL ON TABLE testaccessibilityflag FROM aart;
GRANT ALL ON TABLE testaccessibilityflag TO aart;
GRANT SELECT ON TABLE testaccessibilityflag TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testaccessibilityflag TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testaccessibilityflag TO etl_user;


--
-- Name: testcollection_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testcollection_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testcollection_id_seq FROM aart;
GRANT ALL ON SEQUENCE testcollection_id_seq TO aart;
GRANT SELECT ON SEQUENCE testcollection_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testcollection_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testcollection_id_seq TO etl_user;


--
-- Name: testconstruct; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testconstruct FROM PUBLIC;
REVOKE ALL ON TABLE testconstruct FROM aart;
GRANT ALL ON TABLE testconstruct TO aart;
GRANT SELECT ON TABLE testconstruct TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testconstruct TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testconstruct TO etl_user;


--
-- Name: testconstructid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testconstructid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testconstructid_seq FROM aart;
GRANT ALL ON SEQUENCE testconstructid_seq TO aart;
GRANT SELECT ON SEQUENCE testconstructid_seq TO aart_reader;
GRANT ALL ON SEQUENCE testconstructid_seq TO aart_user;
GRANT ALL ON SEQUENCE testconstructid_seq TO etl_user;


--
-- Name: testcutscores; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testcutscores FROM PUBLIC;
REVOKE ALL ON TABLE testcutscores FROM aart;
GRANT ALL ON TABLE testcutscores TO aart;
GRANT SELECT ON TABLE testcutscores TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testcutscores TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testcutscores TO etl_user;


--
-- Name: testcutscores_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testcutscores_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testcutscores_id_seq FROM aart;
GRANT ALL ON SEQUENCE testcutscores_id_seq TO aart;
GRANT SELECT ON SEQUENCE testcutscores_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testcutscores_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testcutscores_id_seq TO etl_user;


--
-- Name: testenrollmentmethod; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testenrollmentmethod FROM PUBLIC;
REVOKE ALL ON TABLE testenrollmentmethod FROM aart;
GRANT ALL ON TABLE testenrollmentmethod TO aart;
GRANT SELECT ON TABLE testenrollmentmethod TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testenrollmentmethod TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testenrollmentmethod TO etl_user;


--
-- Name: testenrollmentmethod_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testenrollmentmethod_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testenrollmentmethod_id_seq FROM aart;
GRANT ALL ON SEQUENCE testenrollmentmethod_id_seq TO aart;
GRANT SELECT ON SEQUENCE testenrollmentmethod_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testenrollmentmethod_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testenrollmentmethod_id_seq TO etl_user;


--
-- Name: testexternalidmap; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testexternalidmap FROM PUBLIC;
REVOKE ALL ON TABLE testexternalidmap FROM aart;
GRANT ALL ON TABLE testexternalidmap TO aart;
GRANT SELECT ON TABLE testexternalidmap TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testexternalidmap TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testexternalidmap TO etl_user;


--
-- Name: testfeedbackrules; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testfeedbackrules FROM PUBLIC;
REVOKE ALL ON TABLE testfeedbackrules FROM aart;
GRANT ALL ON TABLE testfeedbackrules TO aart;
GRANT SELECT ON TABLE testfeedbackrules TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testfeedbackrules TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testfeedbackrules TO etl_user;


--
-- Name: testformat; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testformat FROM PUBLIC;
REVOKE ALL ON TABLE testformat FROM aart;
GRANT ALL ON TABLE testformat TO aart;
GRANT SELECT ON TABLE testformat TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testformat TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testformat TO etl_user;


--
-- Name: testingprogram_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testingprogram_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testingprogram_id_seq FROM aart;
GRANT ALL ON SEQUENCE testingprogram_id_seq TO aart;
GRANT SELECT ON SEQUENCE testingprogram_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testingprogram_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testingprogram_id_seq TO etl_user;


--
-- Name: testjson; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testjson FROM PUBLIC;
REVOKE ALL ON TABLE testjson FROM aart;
GRANT ALL ON TABLE testjson TO aart;
GRANT SELECT ON TABLE testjson TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testjson TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testjson TO etl_user;


--
-- Name: testleitemusage; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testleitemusage FROM PUBLIC;
REVOKE ALL ON TABLE testleitemusage FROM aart;
GRANT ALL ON TABLE testleitemusage TO aart;
GRANT SELECT ON TABLE testleitemusage TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testleitemusage TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testleitemusage TO etl_user;


--
-- Name: testlet; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testlet FROM PUBLIC;
REVOKE ALL ON TABLE testlet FROM aart;
GRANT ALL ON TABLE testlet TO aart;
GRANT SELECT ON TABLE testlet TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testlet TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testlet TO etl_user;


--
-- Name: testlet_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testlet_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testlet_id_seq FROM aart;
GRANT ALL ON SEQUENCE testlet_id_seq TO aart;
GRANT SELECT ON SEQUENCE testlet_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testlet_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testlet_id_seq TO etl_user;


--
-- Name: testletsensitivitytag; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testletsensitivitytag FROM PUBLIC;
REVOKE ALL ON TABLE testletsensitivitytag FROM aart;
GRANT ALL ON TABLE testletsensitivitytag TO aart;
GRANT SELECT ON TABLE testletsensitivitytag TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testletsensitivitytag TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testletsensitivitytag TO etl_user;


--
-- Name: testletstimulusvariantid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testletstimulusvariantid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testletstimulusvariantid_seq FROM aart;
GRANT ALL ON SEQUENCE testletstimulusvariantid_seq TO aart;
GRANT SELECT ON SEQUENCE testletstimulusvariantid_seq TO aart_reader;
GRANT ALL ON SEQUENCE testletstimulusvariantid_seq TO aart_user;
GRANT ALL ON SEQUENCE testletstimulusvariantid_seq TO etl_user;


--
-- Name: testletstimulusvariants; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testletstimulusvariants FROM PUBLIC;
REVOKE ALL ON TABLE testletstimulusvariants FROM aart;
GRANT ALL ON TABLE testletstimulusvariants TO aart;
GRANT SELECT ON TABLE testletstimulusvariants TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testletstimulusvariants TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testletstimulusvariants TO etl_user;


--
-- Name: testpanel; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testpanel FROM PUBLIC;
REVOKE ALL ON TABLE testpanel FROM aart;
GRANT ALL ON TABLE testpanel TO aart;
GRANT SELECT ON TABLE testpanel TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpanel TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpanel TO etl_user;


--
-- Name: testpanel_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testpanel_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testpanel_id_seq FROM aart;
GRANT ALL ON SEQUENCE testpanel_id_seq TO aart;
GRANT SELECT ON SEQUENCE testpanel_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testpanel_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testpanel_id_seq TO etl_user;


--
-- Name: testpanelscoring; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testpanelscoring FROM PUBLIC;
REVOKE ALL ON TABLE testpanelscoring FROM aart;
GRANT ALL ON TABLE testpanelscoring TO aart;
GRANT SELECT ON TABLE testpanelscoring TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpanelscoring TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpanelscoring TO etl_user;


--
-- Name: testpanelstage; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testpanelstage FROM PUBLIC;
REVOKE ALL ON TABLE testpanelstage FROM aart;
GRANT ALL ON TABLE testpanelstage TO aart;
GRANT SELECT ON TABLE testpanelstage TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpanelstage TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpanelstage TO etl_user;


--
-- Name: testpanelstage_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testpanelstage_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testpanelstage_id_seq FROM aart;
GRANT ALL ON SEQUENCE testpanelstage_id_seq TO aart;
GRANT SELECT ON SEQUENCE testpanelstage_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testpanelstage_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testpanelstage_id_seq TO etl_user;


--
-- Name: testpanelstagemapping; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testpanelstagemapping FROM PUBLIC;
REVOKE ALL ON TABLE testpanelstagemapping FROM aart;
GRANT ALL ON TABLE testpanelstagemapping TO aart;
GRANT SELECT ON TABLE testpanelstagemapping TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpanelstagemapping TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpanelstagemapping TO etl_user;


--
-- Name: testpanelstagemapping_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testpanelstagemapping_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testpanelstagemapping_id_seq FROM aart;
GRANT ALL ON SEQUENCE testpanelstagemapping_id_seq TO aart;
GRANT SELECT ON SEQUENCE testpanelstagemapping_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testpanelstagemapping_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testpanelstagemapping_id_seq TO etl_user;


--
-- Name: testpanelstagetestcollection; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testpanelstagetestcollection FROM PUBLIC;
REVOKE ALL ON TABLE testpanelstagetestcollection FROM aart;
GRANT ALL ON TABLE testpanelstagetestcollection TO aart;
GRANT SELECT ON TABLE testpanelstagetestcollection TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpanelstagetestcollection TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpanelstagetestcollection TO etl_user;


--
-- Name: testpanelstagetestcollection_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testpanelstagetestcollection_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testpanelstagetestcollection_id_seq FROM aart;
GRANT ALL ON SEQUENCE testpanelstagetestcollection_id_seq TO aart;
GRANT SELECT ON SEQUENCE testpanelstagetestcollection_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testpanelstagetestcollection_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testpanelstagetestcollection_id_seq TO etl_user;


--
-- Name: testpart; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testpart FROM PUBLIC;
REVOKE ALL ON TABLE testpart FROM aart;
GRANT ALL ON TABLE testpart TO aart;
GRANT SELECT ON TABLE testpart TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpart TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpart TO etl_user;


--
-- Name: testpartid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testpartid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testpartid_seq FROM aart;
GRANT ALL ON SEQUENCE testpartid_seq TO aart;
GRANT SELECT ON SEQUENCE testpartid_seq TO aart_reader;
GRANT ALL ON SEQUENCE testpartid_seq TO aart_user;
GRANT ALL ON SEQUENCE testpartid_seq TO etl_user;


--
-- Name: testpriorparameter; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testpriorparameter FROM PUBLIC;
REVOKE ALL ON TABLE testpriorparameter FROM aart;
GRANT ALL ON TABLE testpriorparameter TO aart;
GRANT SELECT ON TABLE testpriorparameter TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpriorparameter TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testpriorparameter TO etl_user;


--
-- Name: testpriorparameter_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testpriorparameter_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testpriorparameter_id_seq FROM aart;
GRANT ALL ON SEQUENCE testpriorparameter_id_seq TO aart;
GRANT SELECT ON SEQUENCE testpriorparameter_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testpriorparameter_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testpriorparameter_id_seq TO etl_user;


--
-- Name: testsection; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testsection FROM PUBLIC;
REVOKE ALL ON TABLE testsection FROM aart;
GRANT ALL ON TABLE testsection TO aart;
GRANT SELECT ON TABLE testsection TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsection TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsection TO etl_user;


--
-- Name: testsection_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testsection_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testsection_id_seq FROM aart;
GRANT ALL ON SEQUENCE testsection_id_seq TO aart;
GRANT SELECT ON SEQUENCE testsection_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testsection_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testsection_id_seq TO etl_user;


--
-- Name: testsectioncontainer; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testsectioncontainer FROM PUBLIC;
REVOKE ALL ON TABLE testsectioncontainer FROM aart;
GRANT ALL ON TABLE testsectioncontainer TO aart;
GRANT SELECT ON TABLE testsectioncontainer TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectioncontainer TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectioncontainer TO etl_user;


--
-- Name: testsectioncontainerconstruct; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testsectioncontainerconstruct FROM PUBLIC;
REVOKE ALL ON TABLE testsectioncontainerconstruct FROM aart;
GRANT ALL ON TABLE testsectioncontainerconstruct TO aart;
GRANT SELECT ON TABLE testsectioncontainerconstruct TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectioncontainerconstruct TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectioncontainerconstruct TO etl_user;


--
-- Name: testsectioncontainerid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testsectioncontainerid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testsectioncontainerid_seq FROM aart;
GRANT ALL ON SEQUENCE testsectioncontainerid_seq TO aart;
GRANT SELECT ON SEQUENCE testsectioncontainerid_seq TO aart_reader;
GRANT ALL ON SEQUENCE testsectioncontainerid_seq TO aart_user;
GRANT ALL ON SEQUENCE testsectioncontainerid_seq TO etl_user;


--
-- Name: testsectioncontainerthetanode; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testsectioncontainerthetanode FROM PUBLIC;
REVOKE ALL ON TABLE testsectioncontainerthetanode FROM aart;
GRANT ALL ON TABLE testsectioncontainerthetanode TO aart;
GRANT SELECT ON TABLE testsectioncontainerthetanode TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectioncontainerthetanode TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectioncontainerthetanode TO etl_user;


--
-- Name: testsectioncontainerthetanodeid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testsectioncontainerthetanodeid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testsectioncontainerthetanodeid_seq FROM aart;
GRANT ALL ON SEQUENCE testsectioncontainerthetanodeid_seq TO aart;
GRANT SELECT ON SEQUENCE testsectioncontainerthetanodeid_seq TO aart_reader;
GRANT ALL ON SEQUENCE testsectioncontainerthetanodeid_seq TO aart_user;
GRANT ALL ON SEQUENCE testsectioncontainerthetanodeid_seq TO etl_user;


--
-- Name: testsectionresource_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testsectionresource_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testsectionresource_id_seq FROM aart;
GRANT ALL ON SEQUENCE testsectionresource_id_seq TO aart;
GRANT SELECT ON SEQUENCE testsectionresource_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testsectionresource_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testsectionresource_id_seq TO etl_user;


--
-- Name: testsectionresource; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testsectionresource FROM PUBLIC;
REVOKE ALL ON TABLE testsectionresource FROM aart;
GRANT ALL ON TABLE testsectionresource TO aart;
GRANT SELECT ON TABLE testsectionresource TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectionresource TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectionresource TO etl_user;


--
-- Name: testsectionsrules; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testsectionsrules FROM PUBLIC;
REVOKE ALL ON TABLE testsectionsrules FROM aart;
GRANT ALL ON TABLE testsectionsrules TO aart;
GRANT SELECT ON TABLE testsectionsrules TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectionsrules TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectionsrules TO etl_user;


--
-- Name: testsectionstaskvariants_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testsectionstaskvariants_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testsectionstaskvariants_id_seq FROM aart;
GRANT ALL ON SEQUENCE testsectionstaskvariants_id_seq TO aart;
GRANT SELECT ON SEQUENCE testsectionstaskvariants_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testsectionstaskvariants_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testsectionstaskvariants_id_seq TO etl_user;


--
-- Name: testsectionstaskvariants; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testsectionstaskvariants FROM PUBLIC;
REVOKE ALL ON TABLE testsectionstaskvariants FROM aart;
GRANT ALL ON TABLE testsectionstaskvariants TO aart;
GRANT SELECT ON TABLE testsectionstaskvariants TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectionstaskvariants TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectionstaskvariants TO etl_user;


--
-- Name: testsectionstools; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testsectionstools FROM PUBLIC;
REVOKE ALL ON TABLE testsectionstools FROM aart;
GRANT ALL ON TABLE testsectionstools TO aart;
GRANT SELECT ON TABLE testsectionstools TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectionstools TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testsectionstools TO etl_user;


--
-- Name: testselectionstatistic; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testselectionstatistic FROM PUBLIC;
REVOKE ALL ON TABLE testselectionstatistic FROM aart;
GRANT ALL ON TABLE testselectionstatistic TO aart;
GRANT SELECT ON TABLE testselectionstatistic TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testselectionstatistic TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testselectionstatistic TO etl_user;


--
-- Name: testselectionstatisticid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testselectionstatisticid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testselectionstatisticid_seq FROM aart;
GRANT ALL ON SEQUENCE testselectionstatisticid_seq TO aart;
GRANT SELECT ON SEQUENCE testselectionstatisticid_seq TO aart_reader;
GRANT ALL ON SEQUENCE testselectionstatisticid_seq TO aart_user;
GRANT ALL ON SEQUENCE testselectionstatisticid_seq TO etl_user;


--
-- Name: testsession_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testsession_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testsession_id_seq FROM aart;
GRANT ALL ON SEQUENCE testsession_id_seq TO aart;
GRANT SELECT ON SEQUENCE testsession_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testsession_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testsession_id_seq TO etl_user;


--
-- Name: testspecification; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testspecification FROM PUBLIC;
REVOKE ALL ON TABLE testspecification FROM aart;
GRANT ALL ON TABLE testspecification TO aart;
GRANT SELECT ON TABLE testspecification TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testspecification TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testspecification TO etl_user;


--
-- Name: testspecification_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testspecification_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testspecification_id_seq FROM aart;
GRANT ALL ON SEQUENCE testspecification_id_seq TO aart;
GRANT SELECT ON SEQUENCE testspecification_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testspecification_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testspecification_id_seq TO etl_user;


--
-- Name: testtype; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testtype FROM PUBLIC;
REVOKE ALL ON TABLE testtype FROM aart;
GRANT ALL ON TABLE testtype TO aart;
GRANT SELECT ON TABLE testtype TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testtype TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testtype TO etl_user;


--
-- Name: testtype_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testtype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testtype_id_seq FROM aart;
GRANT ALL ON SEQUENCE testtype_id_seq TO aart;
GRANT SELECT ON SEQUENCE testtype_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testtype_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testtype_id_seq TO etl_user;


--
-- Name: testtypesubjectarea; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE testtypesubjectarea FROM PUBLIC;
REVOKE ALL ON TABLE testtypesubjectarea FROM aart;
GRANT ALL ON TABLE testtypesubjectarea TO aart;
GRANT SELECT ON TABLE testtypesubjectarea TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testtypesubjectarea TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE testtypesubjectarea TO etl_user;


--
-- Name: testtypesubjectarea_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE testtypesubjectarea_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE testtypesubjectarea_id_seq FROM aart;
GRANT ALL ON SEQUENCE testtypesubjectarea_id_seq TO aart;
GRANT SELECT ON SEQUENCE testtypesubjectarea_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE testtypesubjectarea_id_seq TO aart_user;
GRANT ALL ON SEQUENCE testtypesubjectarea_id_seq TO etl_user;


--
-- Name: textaccommodationid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE textaccommodationid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE textaccommodationid_seq FROM aart;
GRANT ALL ON SEQUENCE textaccommodationid_seq TO aart;
GRANT SELECT ON SEQUENCE textaccommodationid_seq TO aart_reader;
GRANT ALL ON SEQUENCE textaccommodationid_seq TO aart_user;
GRANT ALL ON SEQUENCE textaccommodationid_seq TO etl_user;


--
-- Name: textaccommodation; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE textaccommodation FROM PUBLIC;
REVOKE ALL ON TABLE textaccommodation FROM aart;
GRANT ALL ON TABLE textaccommodation TO aart;
GRANT SELECT ON TABLE textaccommodation TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE textaccommodation TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE textaccommodation TO etl_user;


--
-- Name: tool; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE tool FROM PUBLIC;
REVOKE ALL ON TABLE tool FROM aart;
GRANT ALL ON TABLE tool TO aart;
GRANT SELECT ON TABLE tool TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tool TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tool TO etl_user;


--
-- Name: tool_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE tool_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tool_id_seq FROM aart;
GRANT ALL ON SEQUENCE tool_id_seq TO aart;
GRANT SELECT ON SEQUENCE tool_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE tool_id_seq TO aart_user;
GRANT ALL ON SEQUENCE tool_id_seq TO etl_user;


--
-- Name: uploadfile_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE uploadfile_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE uploadfile_id_seq FROM aart;
GRANT ALL ON SEQUENCE uploadfile_id_seq TO aart;
GRANT SELECT ON SEQUENCE uploadfile_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE uploadfile_id_seq TO aart_user;
GRANT ALL ON SEQUENCE uploadfile_id_seq TO etl_user;


--
-- Name: uploadfile; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE uploadfile FROM PUBLIC;
REVOKE ALL ON TABLE uploadfile FROM aart;
GRANT ALL ON TABLE uploadfile TO aart;
GRANT SELECT ON TABLE uploadfile TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE uploadfile TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE uploadfile TO etl_user;


--
-- Name: userassessmentprogram; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE userassessmentprogram FROM PUBLIC;
REVOKE ALL ON TABLE userassessmentprogram FROM aart;
GRANT ALL ON TABLE userassessmentprogram TO aart;
GRANT SELECT ON TABLE userassessmentprogram TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE userassessmentprogram TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE userassessmentprogram TO etl_user;


--
-- Name: userassessmentprogram_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE userassessmentprogram_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE userassessmentprogram_id_seq FROM aart;
GRANT ALL ON SEQUENCE userassessmentprogram_id_seq TO aart;
GRANT SELECT ON SEQUENCE userassessmentprogram_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE userassessmentprogram_id_seq TO aart_user;
GRANT ALL ON SEQUENCE userassessmentprogram_id_seq TO etl_user;


--
-- Name: useraudit; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE useraudit FROM PUBLIC;
REVOKE ALL ON TABLE useraudit FROM aart;
GRANT ALL ON TABLE useraudit TO aart;
GRANT SELECT ON TABLE useraudit TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE useraudit TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE useraudit TO etl_user;


--
-- Name: useraudit_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE useraudit_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE useraudit_id_seq FROM aart;
GRANT ALL ON SEQUENCE useraudit_id_seq TO aart;
GRANT SELECT ON SEQUENCE useraudit_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE useraudit_id_seq TO aart_user;
GRANT ALL ON SEQUENCE useraudit_id_seq TO etl_user;


--
-- Name: useraudit_userid_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE useraudit_userid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE useraudit_userid_seq FROM aart;
GRANT ALL ON SEQUENCE useraudit_userid_seq TO aart;
GRANT SELECT ON SEQUENCE useraudit_userid_seq TO aart_reader;
GRANT ALL ON SEQUENCE useraudit_userid_seq TO aart_user;
GRANT ALL ON SEQUENCE useraudit_userid_seq TO etl_user;


--
-- Name: userorganizationsgroups; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE userorganizationsgroups FROM PUBLIC;
REVOKE ALL ON TABLE userorganizationsgroups FROM aart;
GRANT ALL ON TABLE userorganizationsgroups TO aart;
GRANT SELECT ON TABLE userorganizationsgroups TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE userorganizationsgroups TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE userorganizationsgroups TO etl_user;


--
-- Name: usergroups_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE usergroups_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE usergroups_id_seq FROM aart;
GRANT ALL ON SEQUENCE usergroups_id_seq TO aart;
GRANT SELECT ON SEQUENCE usergroups_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE usergroups_id_seq TO aart_user;
GRANT ALL ON SEQUENCE usergroups_id_seq TO etl_user;


--
-- Name: usermodule; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE usermodule FROM PUBLIC;
REVOKE ALL ON TABLE usermodule FROM aart;
GRANT ALL ON TABLE usermodule TO aart;
GRANT SELECT ON TABLE usermodule TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usermodule TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usermodule TO etl_user;


--
-- Name: usermodule_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE usermodule_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE usermodule_id_seq FROM aart;
GRANT ALL ON SEQUENCE usermodule_id_seq TO aart;
GRANT SELECT ON SEQUENCE usermodule_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE usermodule_id_seq TO aart_user;
GRANT ALL ON SEQUENCE usermodule_id_seq TO etl_user;


--
-- Name: userpasswordreset; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE userpasswordreset FROM PUBLIC;
REVOKE ALL ON TABLE userpasswordreset FROM aart;
GRANT ALL ON TABLE userpasswordreset TO aart;
GRANT SELECT ON TABLE userpasswordreset TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE userpasswordreset TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE userpasswordreset TO etl_user;


--
-- Name: userpdtrainingdetail; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE userpdtrainingdetail FROM PUBLIC;
REVOKE ALL ON TABLE userpdtrainingdetail FROM aart;
GRANT ALL ON TABLE userpdtrainingdetail TO aart;
GRANT SELECT ON TABLE userpdtrainingdetail TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE userpdtrainingdetail TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE userpdtrainingdetail TO etl_user;


--
-- Name: userpdtrainingdetail_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE userpdtrainingdetail_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE userpdtrainingdetail_id_seq FROM aart;
GRANT ALL ON SEQUENCE userpdtrainingdetail_id_seq TO aart;
GRANT SELECT ON SEQUENCE userpdtrainingdetail_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE userpdtrainingdetail_id_seq TO aart_user;
GRANT ALL ON SEQUENCE userpdtrainingdetail_id_seq TO etl_user;


--
-- Name: userreportupload; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE userreportupload FROM PUBLIC;
REVOKE ALL ON TABLE userreportupload FROM aart;
GRANT ALL ON TABLE userreportupload TO aart;
GRANT SELECT ON TABLE userreportupload TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE userreportupload TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE userreportupload TO etl_user;


--
-- Name: userreportupload_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE userreportupload_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE userreportupload_id_seq FROM aart;
GRANT ALL ON SEQUENCE userreportupload_id_seq TO aart;
GRANT SELECT ON SEQUENCE userreportupload_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE userreportupload_id_seq TO aart_user;
GRANT ALL ON SEQUENCE userreportupload_id_seq TO etl_user;


--
-- Name: usersecurityagreement; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE usersecurityagreement FROM PUBLIC;
REVOKE ALL ON TABLE usersecurityagreement FROM aart;
GRANT ALL ON TABLE usersecurityagreement TO aart;
GRANT SELECT ON TABLE usersecurityagreement TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usersecurityagreement TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usersecurityagreement TO etl_user;


--
-- Name: usersorganizations; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE usersorganizations FROM PUBLIC;
REVOKE ALL ON TABLE usersorganizations FROM aart;
GRANT ALL ON TABLE usersorganizations TO aart;
GRANT SELECT ON TABLE usersorganizations TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usersorganizations TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usersorganizations TO etl_user;


--
-- Name: usersorganizations_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE usersorganizations_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE usersorganizations_id_seq FROM aart;
GRANT ALL ON SEQUENCE usersorganizations_id_seq TO aart;
GRANT SELECT ON SEQUENCE usersorganizations_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE usersorganizations_id_seq TO aart_user;
GRANT ALL ON SEQUENCE usersorganizations_id_seq TO etl_user;


--
-- Name: usertest; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE usertest FROM PUBLIC;
REVOKE ALL ON TABLE usertest FROM aart;
GRANT ALL ON TABLE usertest TO aart;
GRANT SELECT ON TABLE usertest TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usertest TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usertest TO etl_user;


--
-- Name: usertest_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE usertest_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE usertest_id_seq FROM aart;
GRANT ALL ON SEQUENCE usertest_id_seq TO aart;
GRANT SELECT ON SEQUENCE usertest_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE usertest_id_seq TO aart_user;
GRANT ALL ON SEQUENCE usertest_id_seq TO etl_user;


--
-- Name: usertestresponse; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE usertestresponse FROM PUBLIC;
REVOKE ALL ON TABLE usertestresponse FROM aart;
GRANT ALL ON TABLE usertestresponse TO aart;
GRANT SELECT ON TABLE usertestresponse TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usertestresponse TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usertestresponse TO etl_user;


--
-- Name: usertestsection; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE usertestsection FROM PUBLIC;
REVOKE ALL ON TABLE usertestsection FROM aart;
GRANT ALL ON TABLE usertestsection TO aart;
GRANT SELECT ON TABLE usertestsection TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usertestsection TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usertestsection TO etl_user;


--
-- Name: usertestsection_id_seq; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON SEQUENCE usertestsection_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE usertestsection_id_seq FROM aart;
GRANT ALL ON SEQUENCE usertestsection_id_seq TO aart;
GRANT SELECT ON SEQUENCE usertestsection_id_seq TO aart_reader;
GRANT ALL ON SEQUENCE usertestsection_id_seq TO aart_user;
GRANT ALL ON SEQUENCE usertestsection_id_seq TO etl_user;


--
-- Name: usertestsectiontask; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE usertestsectiontask FROM PUBLIC;
REVOKE ALL ON TABLE usertestsectiontask FROM aart;
GRANT ALL ON TABLE usertestsectiontask TO aart;
GRANT SELECT ON TABLE usertestsectiontask TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usertestsectiontask TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usertestsectiontask TO etl_user;


--
-- Name: usertestsectiontaskfoil; Type: ACL; Schema: public; Owner: aart
--

REVOKE ALL ON TABLE usertestsectiontaskfoil FROM PUBLIC;
REVOKE ALL ON TABLE usertestsectiontaskfoil FROM aart;
GRANT ALL ON TABLE usertestsectiontaskfoil TO aart;
GRANT SELECT ON TABLE usertestsectiontaskfoil TO aart_reader;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usertestsectiontaskfoil TO aart_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE usertestsectiontaskfoil TO etl_user;


--
-- PostgreSQL database dump complete
--

